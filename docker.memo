https://sysdig.com/blog/7-docker-security-vulnerabilities/
######Startmemoof docker.memo #######

https://azizunsal.github.io/blog/post/delete-images-from-private-docker-registry

docker pull hub.docker.com/it/ingress-nginx/controller:v0.43.0@sha256:hexxxx....

No network connectivity to/from Docker CE container on CentOS 8
https://serverfault.com/questions/987686/no-network-connectivity-to-from-docker-ce-container-on-centos-8

# Masquerading allows for docker ingress and egress (this is the juicy bit)
firewall-cmd --zone=public --add-masquerade --permanent   ####this working ?

# Specifically allow incoming traffic on port 80/443 (nothing new here)
firewall-cmd --zone=public --add-port=80/tcp
firewall-cmd --zone=public --add-port=443/tcp

# Reload firewall to apply permanent rules
firewall-cmd --reload


###set docker locale
http://jaredmarkell.com/docker-and-locales/
https://www.jianshu.com/p/43a3468362aa
https://help.ubuntu.com/community/Locale
https://lintut.com/how-to-set-up-system-locale-on-ubuntu-18-04/
https://stackoverflow.com/questions/28405902/how-to-set-the-locale-inside-a-debian-ubuntu-docker-container

$> apt-get -y install locales
$> vim dockerfile


    RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && locale-gen
    ENV LANG en_US.UTF-8  
    ENV LANGUAGE en_US:en  
    ENV LC_ALL en_US.UTF-8   
    ###ENV LANG C.UTF-8   CHINESE SUPPORT ? ###
    
    $ cat Dockerfile   ###chinese example 
     From dockerhub.yoursite.com/common/foobar:v3.1
     ENV LANG C.UTF-8
     ENV LC_ALL C.UTF-8
###clean docker log
--10
truncate -s 0 /var/lib/docker/containers/*/*-json.log.

--20
You can switch to the none log driver, either as the default for all new containers, or on a per container basis. Documentation on logging drivers is here: https://docs.docker.com/config/containers/logging/configure/#supported-logging-drivers

To configure it as a daemon default for new containers, setup /etc/docker/daemon.json with:

{
      "log-driver": "none"
}
Or to run a single container without logging:

docker run --log-driver none ...

--30

You can also set this as part of your daemon.json file instead of modifying your startup scripts:

{
      "log-driver": "json-file",
        "log-opts": {"max-size": "10m", "max-file": "3"}
}

###clean docker log

######Start docker.memo #######
https://blog.oddbit.com/post/2014-08-11-four-ways-to-connect-a-docker/

###view resource usage
docker stats --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"

###view docker file
docker history some-image

###safety shutdown container
docker kill --signal=TERM contailer && docker logs -f contailer (esp db-server)

#####centos install docker  
yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine

yum install -y yum-utils   device-mapper-persistent-data   lvm2

yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
#yum-config-manager     --add-repo     https://download.docker.com/linux/centos/docker-ce.repo
yum makecache fast
yum install docker-ce docker-ce-cli containerd.io -y

yum list docker-ce --showduplicates | sort -r
yum install docker-ce.x86_64 docker-ce-cli.x86_64 -y 
###yum install docker-ce-18.09.9 docker-ce-cli-18.09.9     specfic version

###remove
###yum remove docker-ce.x86_64 && yum remove docker-ce-cli.x86_64

yum install -y containerd.io
systemctl enable docker
systemctl start docker
#####centos install docker

#########mv /var/lib/docker to other path
$> systemctl stop docker

# cat /etc/docker/daemon.json 
{ 
   "graph": "/data/docker" 
}


$> mv /var/lib/docker/* /data/docker/

$> systemctl restart docker

#########mv /var/lib/docker to other path



####kubernetes best practice####
https://jimmysong.io/kubernetes-handbook/practice/
####kubernetes best practice####
####docker with proxy####
# cat /etc/sysconfig/docker
HTTP_PROXY="http://user01:password@10.10.10.10:8080"
HTTPS_PROXY="https://user01:password@10.10.10.10:8080"
$>service docker restart

--or not work on centos 7
# mkdir /etc/systemd/system/docker.service.d
[Service]
Environment="HTTP_PROXY=http://user01:password@10.10.10.10:8080/"
Environment="HTTPS_PROXY=https://user01:password@10.10.10.10:8080/"
Environment="NO_PROXY= hostname.example.com,172.10.10.10"


# systemctl daemon-reload

# systemctl restart docker
# systemctl show docker --property Environment
Environment=GOTRACEBACK=crash HTTP_PROXY=http://10.10.10.10:8080/ HTTPS_PROXY=http://10.10.10.10:8080/ NO_PROXY= hostname.example.com,172.10.10.10

####docker with proxy####
####docker-compose nginx php #####################
# pwd
/usr/local/lnmp
# cat docker-compose.yml
version: '3'

services:
    web:
        image: nginx:latest
        ports:
            - "80:80"
        volumes:
            - /usr/local/php:/code
            - ./site.conf:/etc/nginx/conf.d/default.conf
        networks:
            - code-network
    php:
        image: php:fpm
        volumes:
            - /usr/local/php:/code
        networks:
            - code-network
    ##network_mode: host  ###set to bridge to host
networks:
    code-network:
        driver: bridge
# cat site.conf
server {
    listen 80;
    index index.php index.html;
    server_name localhost;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /code;

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}
# cat /usr/local/php/index.php
<?php
echo "0322-1434";
?>
#####docker compose file example
version: '2'
services:
    db:
        image: mysql:5.7
        container_name: mysqlg
        environment:
            MYSQL_ROOT_PASSWORD: iab
        restart: always
        volumes:
            ###style is host_dir:container_dir
            - './mysql/data:/var/lib/mysql:Z'
            - './mysql/conf:/etc/mysql:Z'
        ports:
            ###style is host_dir:container_dir
            - 3306:3306
    
    redis:
        image: redis:4-alpine
        container_name: redisg
        restart: always
        volumes:
            - './redis/data:/data:Z'
        ports:
            - 6379:6379
    registry:
        image: registry:2
        container_name: registry
        restart: always
        ports:
            - 8000:8000            
#####docker compose file example

###up and down,PATT option and command sequ,FUCK
$ docker-compose -f mysql.yml up -d
Creating network "dockermysql_default" with the default driver
Creating mysql-docker ... done
$ ss -tlnp|grep 3306
LISTEN     0      128         :::3306                    :::*                   users:(("docker-proxy-cu",pid=23515,fd=4))
$ docker-compose -f mysql.yml down
Stopping mysql-docker ... done
Removing mysql-docker ... done
Removing network dockermysql_default
$ ss -tlnp|grep 3306
$ 

####docker-compose nginx php ############################


#####docker php#####

# cat Dockerfile
FROM php               //or FROM php:7-fpm
ADD index.php /var/www/
EXPOSE 8080
WORKDIR /var/www/
ENTRYPOINT ["php","-S","0.0.0.0:8080"]

# cat /usr/local/php/index.php
<?php
echo "your-php-script";
?>

# docker run --rm -v /usr/local/php:/var/www/ -p 8080:8080 09bcc
[Wed Mar 21 04:23:06 2018] 10.0.0.10:63443 [200]: /index.php

# docker ps
CONTAINER ID        IMAGE               COMMAND                 CREATED              STATUS              PORTS                    NAMES
2c407b93086f        09bcc               "php -S 0.0.0.0:8080"   About a minute ago   Up About a minute   0.0.0.0:8080->8080/tcp   sick_wing

# ip addr show |grep 161
    inet 10.0.0.161/24 brd 10.0.0.255 scope global eth0

# curl 10.0.0.161:8080/index.php
your-php-script


#####docker php#####



####How To Install and Use Docker Compose on CentOS 7#######
sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose


https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-compose-on-centos-7    How To Install and Use Docker Compose on CentOS 7 
1 install Docker
2.0 install docker-compose
sudo yum install epel-release
sudo yum install -y python-pip
sudo pip install docker-compose
sudo yum upgrade python*
pip install --upgrade pip

2.1 install docker-compose on opensuse
sudo curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

3 run demo
mkdir hello-world
cd hello-world


nano docker-compose.yml
my-test:
  image: hello-world

docker-compose up


4 php nginx demo url
http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/
https://github.com/mikechernev/dockerised-php
####How To Install and Use Docker Compose on CentOS 7#######


docker run --rm --name mysql01 -e MYSQL_ROOT_PASSWORD=my-secret -p 172.16.0.1:3306:3306 mysql:8.0.22 \
 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci  ####run a temp mysql using docker

https://yeasy.gitbooks.io/docker_practice/content/ Docker — 从入门到实践

#######连接到已经后台运行的docker container
$ docker exec -it containerid bash

$ docker images ###########列镜像
REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE
ubuntu/ubuntu_httpd v0 ba8ba558ddfb About an hour ago 227.9 MB

$ $ sudo docker run -itdp 8080:80 ubuntu/ubuntu_httpd:v0 #######以后台方式运行镜像
########注意端口格式是对外端口号：对内端口号###########
0b62724e1d06ca685cd4567ad46d4c5f26fe55089d423579e22942083a185e62

$ docker ps ###列出正在运行的镜像
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
0b62724e1d06 ubuntu/ubuntu_httpd:v0 "/bin/bash" ...... 0.0.0.0:8080->80/tcp rever

$ docker inspect 0b62724e1d06 |grep -Ei ipaddr ##########获取运行镜像的IP地址
"IPAddress": "172.17.0.26"         ####宿主机器的ip192.168.1.93

$ curl 172.17.0.26 #######运行的镜像初始没有启动nginx
curl: (7) couldn't connect to host

$ docker exec 0b62724e1d06 service nginx start######为启动的镜像启动nginx
$ curl 172.17.0.26 ##########nginx启动了,curl 192.168.1.93:8080也是一样#####
.............Some nginx html PAGE HERE.....................
<title>Welcome to nginx!</title>
.............OMIT MANY URL CONTENT..........................

使用宿主机器的目录作为工作目录(冒号前面是宿主机器目录，后面是容器目录）
$docker run -d -p 1080:80 --name website \
-v $PWD/website:/var/www/html/website jamtur01/nginx nginx

$ ls $PWD
default.htm index.html lb.html Test.html
\

###########创建私有HUB             //here 172.31.11.144 is Host IP Address###########
docker run -dp 5000:5000 registry  #创建服务器
docker tag 3620872edb5e 172.31.11.144:5000/your-name/ubuntu:1.2.3 #标记待上传image
docker push 172.31.11.144:5000/your-name/ubuntu:1.2.3 #上传image

# docker push 172.31.11.144:5000/michael/my-private-image
The push refers to a repository [172.31.11.144:5000/michael/my-private-image]


vim /etc/default/docker  #使用http的方式，编辑这个文件，加入下一句,CentOS6 worked,
CentOS7 not work.
DOCKER_OPTS="--insecure-registry 172.31.11.144:5000"

//CentOS 7 worked here
 //server gave HTTP response to HTTPS client error edit /etc/docker/daemon.json 
# cat /etc/docker/daemon.json               //PATT format style
{"registry-mirrors": [
"http://9993f789.m.daocloud.io"],           //This is speed up 
 "insecure-registries":[                    //This is http private repository
        "172.31.11.144:5000"
        ]
 }

# docker pull 172.31.11.144:5000/hw        //pull private repository 
Using default tag: latest
Trying to pull repository 172.31.11.144:5000/hw ... 
latest: Pulling from 172.31.11.144:5000/hw
Digest: sha256:8a8e4ca374451ac419bacb36ffe21edf3eee360d290d846b2c75e7b084fb5887

# docker images
REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE
172.31.11.144:5000/hw         latest              09bccff3fdd3        2 days ago          352 MB

###########创建私有HUB             //here 172.31.11.144 is Host IP Address###########


“Unable to locate package” while trying to install packages by apt

Try running sudo apt-get update before trying to install the package. After installation the system doesn't have an up-to-date package list so you won't be able to find the package.

制作完整docker自定义镜像的方法：

docker pull 拉源image
docker run -it imageID

进入Container
apt-get update 升级软件仓库源
apt-get install nginx 安装
nginx -v 验证
exit 退出docker

docker ps 查找ContainerID
docker commit 提交
docker commit -m "Added nginx from ubuntu14.04" -a "saymagic" 79c761f627f3 saymagic/ubuntu-nginx:v1

docker run -it

docker pull microsoft/dotnet

C#

###############加速#############

curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://9993f789.m.daocloud.io
如果报错，编辑下面的文件，去掉多余的逗号
vim /etc/docker/daemon.json
然后重启DOCKER

Copy

该脚本可以将 --registry-mirror 加入到你的 Docker 配置文件 /etc/default/docker 中。适用于
Ubuntu14.04、Debian、CentOS6 、CentOS7、Fedora、Arch Linux、openSUSE Leap 42.1，其他版本可能有细微不同。更多详情请访问文档。

网易
https://c.163.com/wiki/index.php?title=Dockerhub%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F

$ sudo echo "DOCKER_OPTS=\"\$DOCKER_OPTS --registry-mirror=http://hub-mirror.c.163.com\"" >> /etc/default/docker
$ service docker restart


docker offcial 官方
 为了永久性保留更改，您可以修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值。

{
  "registry-mirrors": ["https://registry.docker-cn.com"]
}

修改保存后重启 Docker 以使配置生效。 
#################################

Error starting daemon: layer does not exist" centos 7

https://github.com/moby/moby/blob/620339f166984540f15aadef2348646eee9a5b42/contrib/nuke-graph-directory.sh
运行下面的脚本,成功后删除DOCKER重装


#!/bin/sh

set -e

dir="$1"

if [ -z "$dir" ]; then

{

echo 'This script is for destroying old /var/lib/docker directories more safely than'

echo ' "rm -rf", which can cause data loss or other serious issues.'

echo

echo "usage: $0 directory"

echo " ie: $0 /var/lib/docker"

} >&2

exit 1

fi

if [ "$(id -u)" != 0 ]; then

echo >&2 "error: $0 must be run as root"

exit 1

fi

if [ ! -d "$dir" ]; then

echo >&2 "error: $dir is not a directory"

exit 1

fi

dir="$(readlink -f "$dir")"

echo

echo "Nuking $dir ..."

echo ' (if this is wrong, press Ctrl+C NOW!)'

echo

( set -x; sleep 10 )

echo

dir_in_dir() {

inner="$1"

outer="$2"

[ "${inner#$outer}" != "$inner" ]

}

# let's start by unmounting any submounts in $dir

# (like -v /home:... for example - DON'T DELETE MY HOME DIRECTORY BRU!)

for mount in $(awk '{ print $5 }' /proc/self/mountinfo); do

mount="$(readlink -f "$mount" || true)"

if dir_in_dir "$mount" "$dir"; then

( set -x; umount -f "$mount" )

fi

done

# now, let's go destroy individual btrfs subvolumes, if any exist

if command -v btrfs > /dev/null 2>&1; then

root="$(df "$dir" | awk 'NR>1 { print $NF }')"

root="${root#/}" # if root is "/", we want it to become ""

for subvol in $(btrfs subvolume list -o "$root/" 2>/dev/null | awk -F' path ' '{ print $2 }' | sort -r); do

subvolDir="$root/$subvol"

if dir_in_dir "$subvolDir" "$dir"; then

( set -x; btrfs subvolume delete "$subvolDir" )

fi

done

fi

# finally, DESTROY ALL THINGS

( set -x; rm -rf "$dir" )

] 27.57MB/82.5MB
eca642e7826b: Download complete
3638d91a9039: Download complete ########################################################
######End docker.memo #######
######Endmemoof docker.memo #######
