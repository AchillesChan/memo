######Startmemoof mongod.memo #######
######Start mongod.memo #######
##backup scripts

use dbs
db.createUser(
   {
            user: "User1",
                 pwd: "User1Pwd",
                      roles: [ "read", "read" ]
                         }
                         )

use admin
db.auth('root','rootpwd')
db.grantRolesToUser('User1', [{ role: 'read', db: 'dbs' }])
db.getuser('User1')


db.grantRolesToUser('UserName',[{role: 'read', db: 'db1'}])
db.grantRolesToUser('UserName',[{role: 'read', db: 'db2'}])
db.grantRolesToUser('UserName',[{role: 'read', db: 'db3'}])

db.getUser("UserName")
{
        "_id" : "admin.UserName",
        "user" : "UserName",
        "db" : "admin",
        "roles" : [
                {
                        "role" : "read",
                        "db" : "db1"
                },
                {
                        "role" : "read",
                        "db" : "db2"
                },
                {
                        "role" : "read",
                        "db" : "db3"
                }
        ]
}

#!/bin/bash
set -o errexit
set -o pipefail
set -o nounset
#define variables
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/usr/local/mongodb/bin
export PATH
op_date=$(date +%Y%m%d-%H%M%S)
bak_dst_path=/data/backup/mongo
lsync_path=/data/backup/lsync

ls $bak_dst_path || mkdir -p $bak_dst_path
ls $lsync_path || mkdir -p $lsync_path
#delete old date
find "$bak_dst_path" -mmin +600 |xargs -I {} rm -rf {}

#backup current mongodb
mongodump  --username=root --password='pwd' --host=172.16.3.1 --gzip --out="$bak_dst_path/$(hostname)$op_date"  
tar vcf "$bak_dst_path/mongo-$(hostname)$op_date.tar" "$bak_dst_path/$(hostname)$op_date"
find "$bak_dst_path" -maxdepth 1 -name "*.tar"|sed -e "s:/data/backup/mongo/::g"|xargs -I {} mv "$bak_dst_path"/{} "$lsync_path"/{}
##backup


###BASIC OPERATION
$> mongo                                                                                                                                                                            
MongoDB shell version v3.6.5                                                                                                                                                                         
connecting to: mongodb://127.0.0.1:27017                                                                                                                                                             
MongoDB server version: 3.6.5                                                                                                                                                                        
> use admin                                                                                                                                                                                          
switched to db admin                                                                                                                                                                                 
> db.auth('root','root')                   ###AUTH LOGIN                                                                                                                                                                           
1                                                                                                                                                                                                    

> use poc01                                ###create db                                                                                                                                                           
switched to db poc01                                                                                                                                                                                 

> db                                       ##display current db                                                                                                                                                          

poc01                                      ##display all db,new db not display                                                                                                                                                          
> show dbs                                                                                                                                                                                           
admin   0.000GB                                                                                                                                                                                      
config  0.000GB                                                                                                                                                                                      
local   0.000GB                                                                                                                                                                                      

> db.poc01.insert({"name":"Adan"})      ###Insert item                                                                                                                                                               
WriteResult({ "nInserted" : 1 })                                                                                                                                                                     

> show dbs                              ###created db displayed                                                                                                                                                             
admin   0.000GB                                                                                                                                                                                      
config  0.000GB                                                                                                                                                                                      
local   0.000GB                                                                                                                                                                                      
poc01   0.000GB                                                                                                                                                                                      
> db.poc01.insert({"Age":"35"})                                                                                                                                                                      
WriteResult({ "nInserted" : 1 })                                                                                                                                                                     

> db.poc01.find().pretty()           ####select item                                                                                                                                                                
{ "_id" : ObjectId("5e210ce515ec507bf48a6d76"), "name" : "Adan" }                                                                                                                                    
{ "_id" : ObjectId("5e210d3115ec507bf48a6d77"), "Age" : "35" } 


###update item                                                                                                                                      
> db.poc01.update({"Age":"35"},{$set:{"Age":"25"}},{multi:true})                                                                                                                                     
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })                                                                                                                                    
> db.poc01.find().pretty()                                                                                                                                                                           
{ "_id" : ObjectId("5e210ce515ec507bf48a6d76"), "name" : "Adan" }                                                                                                                                    
{ "_id" : ObjectId("5e210d3115ec507bf48a6d77"), "Age" : "25" }                                                                                                                                       

###remove item
> db.poc01.remove({"Age":"25"})                                                                                                                                                                      
WriteResult({ "nRemoved" : 1 })                                                                                                                                                                      
> db.poc01.find().pretty()                                                                                                                                                                           
{ "_id" : ObjectId("5e210ce515ec507bf48a6d76"), "name" : "Adan" }                                                                                                                                    
> db.poc01.remove({})                                                                                                                                                                                
WriteResult({ "nRemoved" : 1 })                


####create collection
> use poc01
switched to db poc01
> db.createCollection("mycollection")
{ "ok" : 1 }
> db.createCollection("yourcollection")
{ "ok" : 1 }
> db.createCollection("hercollection")
{ "ok" : 1 }

> show collections
hercollection
mycollection
yourcollection

###remove collection
> use poc01
switched to db poc01
> db.hercollection.drop()
true
> show collections
mycollection
yourcollection

###remove db
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
poc01   0.000GB

> use poc01              ###enter db
switched to db poc01

> db.dropDatabase()      ###remove current db
{ "dropped" : "poc01", "ok" : 1 }

> show dbs               ###db poc01 removed
admin   0.000GB
config  0.000GB
local   0.000GB


###BASIC OPERATION

###auto delete collections script
$ cat auto-delete-mongo-collections.sh
#!/bin/bash
echo " "
echo "Before delete:"
sed -e 's:\(\s*[\w\s]*\)#.*$:\1:g' <<eof |mongo
show databases;
use MongoApp;
show collections;
eof


echo " "
echo "Deleting:"
sed -e 's:\(\s*[\w\s]*\)#.*$:\1:g' <<eof |mongo
####below is op ####
use MongoApp;         ###           ####below is delete op
var collectionNames = db.getCollectionNames();
for(var i = 0, len = collectionNames.length; i < len ; i++){
    var collectionName = collectionNames[i];
    if(collectionName.indexOf('log_') == 0){  ###delete start with log_
        db[collectionName].drop()
    }
}
eof


echo " "
echo "After delete:"
sed -e 's:\(\s*[\w\s]*\)#.*$:\1:g' <<eof |mongo
use MongoApp;
show collections;
eof

$ sh auto-delete-mongo-collections.sh

Before delete:
MongoDB shell version v3.6.5
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.6.5
MongoApp  0.000GB
admin     0.000GB
config    0.000GB
local     0.000GB
switched to db MongoApp
app_logisticsorder_D5101071804005_TMSWaybillRoute
app_operation_C0000017
log_16                      ####3 log_ collecitons
log_18
log_19
bye

Deleting:
MongoDB shell version v3.6.5
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.6.5
switched to db MongoApp
true
bye

After delete:
MongoDB shell version v3.6.5
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.6.5
switched to db MongoApp
app_logisticsorder_D5101071804005_TMSWaybillRoute
app_operation_C0000017     ####log_ collections deleted
bye

###auto delete collections script

########delete multi collection 
--10 before delete

> show collections;
app_logisticsorder_D5101071804005_TMSWaybillRoute
log_Queue_201710
log_Queue_201711
log_Queue_201701
log_Queue_201702
log_Queue_201703
log_Queue_201704
log_Queue_201705
log_Queue_201706
log_Queue_201707
log_Queue_201708
> 

--20 delete command                                                                                                                                                                                            
var collectionNames = db.getCollectionNames();
for(var i = 0, len = collectionNames.length; i < len ; i++){
    var collectionName = collectionNames[i];
    if(collectionName.indexOf('log_') == 0){
        db[collectionName].drop()
    }
}

--30 after delete

> show collections;
app_logisticsorder_D5101071804005_TMSWaybillRoute

########delete multi collection 


######install with tar package 
--05 install with tar
a> sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config

b> useradd mongod -s /bin/false

c> mkdir -p /var/log/mongodb && chown -R mongod.mongod /var/log/mongodb

d> tar zxf /tmp/mongodb-linux-x86_64-3.6.5.tgz && mv mongodb-linux-x86_64-3.6.5 /usr/local/mongod

e> ln -s /usr/local/mongod/bin/* /bin

f> setup mongod.conf                ##see below

g> setup mongo.service              ##see below

h> set daemon and firewall 
 systemctl daemon-reload &&  firewall-cmd --add-port 27017/tcp --permanent && firewall-cmd --reload

i> dd delay_start_mongod to crontab

@reboot    root    /etc/delay_start_mongod.sh

j> start mongod
/bin/sh /etc/delay_start_mongod.sh

--10 add repo
$> sudo vi /etc/yum.repos.d/mongodb-org.repo
/etc/yum.repos.d/mongodb-org.repo

[mongodb-org-3.4]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc

$ > yum repolist

--20 install mongo
sudo yum -y install mongodb-org

sudo systemctl start mongod

sudo systemctl enable mongod

--30 setup cfg ##PATT DBPATH, LOGPATH, PIDPATH, LISTEN INTERFACE
$>sudo  cat /etc/mongod.conf |grep -v '#'
# mongod.conf                                                                                                                                                                                                 

# for documentation of all options, see:
#   http://docs.mongodb.org/manual/reference/configuration-options/

# where to write logging data.
systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log

# Where and how to store data.
storage:
  dbPath: /data/mongo
  journal:
    enabled: true
#  engine:
#  mmapv1:
#  wiredTiger:

# how the process runs
processManagement:
  fork: true  # fork and run in background
  pidFilePath: /data/mongo/mongod.pid  # location of pidfile

# network interfaces
net:
  port: 27017
  bindIp: 172.18.8.9  # Listen to local interface only, comment to listen on all interfaces.


#security:

#operationProfiling:

#replication:

#sharding:

## Enterprise-Only Options

#auditLog:

#snmp:




$>sudo systemctl cat mongod.service
# /usr/lib/systemd/system/mongod.service
[Unit]
Description=High-performance, schema-free document-oriented database
After=network.target
Documentation=https://docs.mongodb.org/manual

[Service]
CPUShares=2048            ####default is 1024
MemoryLimit=1G
BlockIOWeight=500        ####valid from 10 to 1000?
User=mongod
Group=mongod
Environment="OPTIONS=-f /etc/mongod.conf"
ExecStart=/usr/bin/mongod $OPTIONS
ExecStartPre=/usr/bin/mkdir -p /data/mongo
ExecStartPre=/usr/bin/chown mongod:mongod /data/mongo
ExecStartPre=/usr/bin/chmod 0755 /data/mongo
PermissionsStartOnly=true
PIDFile=/data/mongo/mongod.pid
Type=forking
# file size
LimitFSIZE=infinity
# cpu time
LimitCPU=infinity
# virtual memory size
LimitAS=infinity
# open files
LimitNOFILE=64000
# processes/threads
LimitNPROC=64000
# locked memory
LimitMEMLOCK=infinity
# total threads (user+kernel)
TasksMax=infinity
TasksAccounting=false
# Recommended limits for for mongod as specified in
# http://docs.mongodb.org/manual/reference/ulimit/#recommended-settings

[Install]
WantedBy=multi-user.target

$ >sudo systemctl daemon-reload && systemctl restart mongod

$>sudo echo never >/sys/kernel/mm/transparent_hugepage/enabled

--35 delay_start_mongod After disable THB
$>grep never -A 1 -B 1 /var/log/mongodb/mongod.log
###need prevent message from log like those:
** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is 'always'.
**        We suggest setting it to 'never'

$> cat /etc/delay_start_mongod.sh 
#!/bin/sh
sleep 8s
echo never >/sys/kernel/mm/transparent_hugepage/defrag
###not need?
###echo never >/sys/kernel/mm/transparent_hugepage/enabled
sleep 2s
systemctl start mongod

$> cat /etc/crontab
......
@reboot     root   /etc/delay_start_mongod.sh
......

--40 result
$ >sudo ss -tlnp|grep 27017
LISTEN     0      128          *:27017                    *:*                   users:(("mongod",pid=1061,fd=7))

$ >sudo systemctl status mongod
● mongod.service - High-performance, schema-free document-oriented database
   Loaded: loaded (/usr/lib/systemd/system/mongod.service; enabled; vendor preset: disabled)
   Active: active (running) since Tue 2018-06-05 16:55:50 CST; 5min ago
     Docs: https://docs.mongodb.org/manual
  Process: 1019 ExecStart=/usr/bin/mongod $OPTIONS (code=exited, status=0/SUCCESS)
  Process: 1015 ExecStartPre=/usr/bin/chmod 0755 /data/mongo (code=exited, status=0/SUCCESS)
  Process: 1007 ExecStartPre=/usr/bin/chown mongod:mongod /data/mongo (code=exited, status=0/SUCCESS)
  Process: 965 ExecStartPre=/usr/bin/mkdir -p /data/mongo (code=exited, status=0/SUCCESS)
 Main PID: 1061 (mongod)
   CGroup: /system.slice/mongod.service
           └─1061 /usr/bin/mongod -f /etc/mongod.conf

####backup all mongodb
https://stackoverflow.com/questions/43543583/multiple-databases-and-collections-mongodump
#!/bin/bash
dbs=$(/usr/local/mongodb/bin/mongo --eval "db.getMongo().getDBNames()" | grep '"' | tr -d '",' )
   for db in $dbs; do
       #col=$(/usr/local/mongodb/bin/mongo  $db --host 127.0.0.1 --quiet --eval "db.getCollectionNames()" | tr -d ',"[]')
       #for collection in $col; do
       #  /usr/local/mongodb/bin/mongodump --host 127.0.0.1 -q '{_id: {$gt: 10}}' -d $db -c $collection --out dump
         /usr/local/mongodb/bin/mongodump --host 127.0.0.1 -q '{_id: {$gt: 10}}' -d $db  --out /path/2/dump/dir
      #done
   done



####backup all mongodb

###restore all mongodb
 /usr/local/mongodb/bin/mongorestore /path/2/dump/dir
###restore all mongodb

##################backup mongod
#!/bin/bash

#define variables
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/usr/local/mongodb/bin
export PATH
op_date=$(date +%Y%m%d-%H%M%S)
bak_dst_path=/data/backup/mongo/
lsync_path=/data/backup/lsync

ls $bak_dst_path || mkdir -p $bak_dst_path
ls $lsync_path || mkdir -p $lsync_path 
#delete old date
cd "$bak_dst_path"
cd MongoOMS
find . -not -name "*.tar.gz" -delete
sleep 3s

#backup current mongodb
cd "$bak_dst_path"
mongodump --db MongoOMS --out "$bak_dst_path"
cd MongoOMS
tar zcf waas-mongodb-"$op_date".tar.gz * --exclude "*.tar.gz"
find . -not -name "*.tar.gz" -delete
find . -mtime -2 |xargs -P 1 -n 1 -I {} cp --no-clobber {}  $lsync_path
find "$lsync_path" -mtime +5 |xargs -I {} rm -f {}
##################backup mongod
######End  mongod.memo #######
######Endmemoof mongod.memo #######
