######Startmemoof vim.memo #######
######Start vim.memo #######
https://stackoverflow.com/questions/1878974/redefine-tab-as-4-spaces
For tab characters that appear 4-spaces-wide:
set tabstop=4
Finally, if you want an indent to correspond to a single tab, you should also use:
set shiftwidth=4

For indents that consist of 4 space characters but are entered with the tab key:
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab
To make the above settings permanent add these lines to your vimrc.

########vim zero-width assertion
https://stackoverflow.com/questions/3860532/vim-regex-replace-multiple-consecutive-spaces-with-only-one-space
In the interests of pragmatism, I tend to just do it as a three-stage process:

:g/^    /s//XYZZYPARA/g ###/s// is matched elements(here is consective space at start) 
:g/ \+/s// /g        ###first g is select the match line include more than one space,s// / is replace selective chars to ONLY one space  
:g/^XYZZYPARA/s//    /g     ###first g is select the match line,s// / is replace selective chars to ONLY one space
:g: \+:s::|:g          ####replace multiple space with only one '|'

Aside: If you're wondering why I use :g instead of :s, that's just habit mostly. :g can do everything :s can and so much more. It's actually a way to execute an arbitrary command on selected lines. The command to execute happens to be s in this case so there's no real difference but, if you want to become a vi power user, you should look into :g at some point.

@anteatersa, the s is the substitute command itself. If you read the last part of my answer it explains the g simply selects the lines, then executes an arbitrary command on each of them, of which s is one possibility. For example :g/^$/d will run the d command (delete line) on all empty lines. You can have all sorts of fun such as with :g/^/m0 :-) – paxdiablo Nov 28



https://jbodah.github.io/blog/2016/11/01/positivenegative-lookaheadlookbehind-vim/

For example, say I have a document: hello foo, welcome to foobar and I only wanted to match the second “foo” which is followed by “bar”. I could use positive lookahead (i.e. “match me ‘foo’ where the next expression is ‘bar’, but don’t include ‘bar’ in the match”).

vim however doesn’t implement PCRE. Instead vim’s lookaround expressions affect the previous capture group, so first we’d need to capture “bar” then apply the lookahead modifier to it:

/foo\(bar\)\@=/
All of the looakaround expressions work in a similar way: capture, then apply the appropriate lookaround modifier.

(Note that vim treats parenthesis literals differently than PCRE. Where PCRE always treats them as special characters unless escaped, vim always treats them as literals unless escaped.)

For reference:

Positive lookahead: \@=
Negative lookahead: \@!
Positive lookbehind: \@<=
Negative lookbehind: \@<!

########vim zero-width assertion


"Zoom" anchors
In addition to @jecxjo's answer, there are many situations where you can use the zero-width anchors \zs and \ze instead of positive lookaround. These anchors define the start (\zs) and the end (\ze) of the match within the full pattern.
Examples
foo\zsbar will match bar preceded by foo (foo not part of the match)
foo\zebar will match foo followed by bar (bar not part of the match)
myFunction(\zs.*\ze) will match the parameters in a function call (for demonstration purposes, I'm not focusing on greedy vs non-greedy matching)
Putting it to use
These become most useful when using the :substitute command. For example, say I wanted to replace the parameters in a function call to myFunction() with foo:

:%s/myFunction(\zs.*\ze)/foo/
This will leave myFunction( and ) intact, and you don't have to worry about capturing them in your pattern or repeating them in your replacement.

You could do this using the lookaround feature of Vim's regex, but it's quite clunky:

:%s/\(myFunction(\)\@<=.*\()\)\@=/foo/
(I find this syntax causes me to forget what I was trying to do in the first place.)

You still need lookaround sometimes
There are still situations where you need lookaround. Using \zs and \ze are great for simple situations where you have something before followed by text to match followed by something after. But if it's more complex than that, you'll probably have to stick to the heavier lookaround syntax.

Fun fact
Though they're considerably uglier, Vim's lookarounds are more powerful than those in PCRE! They support variable-length negative lookbehind, meaning you can assert that some pattern whose length is not predetermined is not before your match.

PCRE doesn't support this, as it's fairly computationally expensive. That's not a huge concern in Vim, since the most common use cases of regex tend to involve interactive searching where the computation time is nearly imperceptible to the user. You'd probably notice it if it were used for syntax highlighting, though.

Relevant Help Topics
:help \zs
:help \ze
:help perl-patterns


<<<<<<< HEAD
Remove first N letter:
%s/^.\{0,3\}//g
=======
https://stackoverflow.com/questions/28421864/how-do-i-remove-first-5-characters-in-each-line-in-a-text-file-using-vi?rq=1
How do I remove first 5 characters in each line in a text file using vi?

:%s/^.\{0,5\}// should do the trick. It also handles cases where there are less than 5 characters.

>>>>>>> ed392f7f49851690d9c612da60f6e90dc2a1246a

Remove unwanted empty lines

:g/^\s*$/d
:v/\S/d

In the second command, v operates on lines that do not match, and \S matches anything that is not a whitespace, and d deletes the flagged lines (all lines that have no characters, or that have only whitespace characters).

You may want to condense multiple blank lines into a single blank line. The following will delete all trailing whitespace from each line, then replace three or more consecutive line endings with two line endings (a single blank line): 

%s/\s\+$//e
:%s/\n\{3,}/\r\r/e

The e substitute flag means that no error is displayed if the pattern is not found. In the second command, \n in the search pattern finds newline, while \r in the replacement inserts a newline.

Another solution is to join consecutive lines found between non-blank lines. 

:v/\S/,/\S/-j

%s#Hostname\(\s\+\)\(\w\+.*$\)#Hostname\ \U\2#g   ###replace back reference to upper
:%s:\n: :g                    ###replace newline with space,\n is null char,hex is 0x00
:%s:\(^.*$\):\1\1:c                              ###repeat whole line  
:%s: :\r:g                   ###replace space with newline,\r is newline(return),hex is 0x0a
    \r matches <CR>
    \n matches an end-of-line - When matching in a string instead of buffer text a literal newline character is matched.

#####install vim8 
git clone https://github.com/vim/vim.git
cd vim/src
zypper install python-devel
zypper install gcc gcc-c++ cmake
./configure --prefix=/usr/local/vim8 --enable-pythoninterp=yes --with-python-config-dir=/usr/lib64/python/config ###dir is the config.c in
make
sudo make install
######install YouCompleteMe
a .vimrc Plugin 'Valloric/YouCompleteMe' ###add thi to .vimrc\
b .vimrc PluginInstall  ####run :PluginInstall in .vimrc of vim \need many time download staff
c cd ~/.vim/bundle/YouCompleteMe\
  ./install.py --clang-completer \##?It's Ok with me on no --clang-completer
d .vimrc something later of this m\emo
e copy .ycm_extra_conf.py to ~ or Y\ouCompleteMe ?

http://harttle.com/2015/07/18/vim-cpp.html
http://harttle.com/2013/11/08/vim-config.html
http://harttle.com/2015/11/04/vim-ide.html
http://harttle.com/vim-practice

http://www.jianshu.com/p/f0513d18742a 把vim配置成顺手的python轻量级IDE（一）
http://www.jianshu.com/p/c690a3462224 把vim配置成顺手的python轻量级IDE（二）
https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/ VIM and Python - a Match Made in Heaven
http://codingpy.com/article/vim-and-python-match-in-heaven/ Vim与Python真乃天作之合
http://www.cnblogs.com/xbf9xbf/p/4860484.html 【vim环境配置】详细实录
http://www.cnblogs.com/xbf9xbf/p/4876306.html  【vim环境配置】在centos6.4上配置vim的一些零碎记录
http://www.voidcn.com/article/p-utrxbluz-bcx.html vim 插件 youcompleteme full install
https://github.com/yangyangwithgnu/use_vim_as_ide 所需即所获：像 IDE 一样使用 vim

set nocompatible              " required
filetype off                  " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()  "these plugin  MUST between begin() and end()
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'gmarik/Vundle.vim'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'scrooloose/nerdcommenter'   " commenter: \cc \cu
Plugin 'majutsushi/tagbar'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-scripts/loremipsum' 
" Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/nerdtree'
call vundle#end()            " required
filetype plugin indent on    " required
set foldmethod=indent
au BufWinLeave * silent mkview  " 保存文件的折叠状态
au BufRead * silent loadview    " 恢复文件的折叠状态
nnoremap <space> za             " 用空格来切换折叠状态
" 这个插件可以显示文件的Git增删状态
set tabstop=4
set clipboard=unnamed
let g:airline_powerline_fonts = 1
" set guifont=Inconsolata\ for\ Powerline:h15
let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set term=xterm-256color
set termencoding=utf-8
let mapleader=';'
set pastetoggle=<F9>
set softtabstop=4
inoremap Lorem <Esc><Esc>:Loremipsum 20<CR>
inoremap Ipsum <Esc><Esc>:Loremipsum 70<CR>
set expandtab
set number
map <F3> :TagbarToggle<CR>
set showcmd
set cursorline
set wildmenu
set showmatch
"默认配置文件路径"
"let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
""打开vim时不再询问是否加载ycm_extra_conf.py配置"
let g:ycm_confirm_extra_conf=0
set completeopt=longest,menu
"python解释器路径"
"let g:ycm_path_to_python_interpreter='/usr/bin/python2.7'
""是否开启语义补全"
let g:ycm_seed_identifiers_with_syntax=1
"是否在注释中也开启补全"
"let g:ycm_complete_in_comments=1
"let g:ycm_collect_identifiers_from_comments_and_strings = 0
""开始补全的字符数"
let g:ycm_min_num_of_chars_for_completion=2
"补全后自动关机预览窗口"
"let g:ycm_autoclose_preview_window_after_completion=1
"" 禁止缓存匹配项,每次都重新生成匹配项"
let g:ycm_cache_omnifunc=0
"字符串中也开启补全"
"let g:ycm_complete_in_strings = 1
""离开插入模式后自动关闭预览窗口"
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
"回车即选中当前项"
"inoremap <expr> <CR>       pumvisible() ? '<C-y>' : '\<CR>'     
""上下左右键行为"
inoremap <expr> <Down>     pumvisible() ? '\<C-n>' : '\<Down>'
inoremap <expr> <Up>       pumvisible() ? '\<C-p>' : '\<Up>'
inoremap <expr> <PageDown> pumvisible() ? '\<PageDown>\<C-p>\<C-n>' : '\<PageDown>'
inoremap <expr> <PageUp>   pumvisible() ? '\<PageUp>\<C-p>\<C-n>' : '\<PageUp>'

let g:rbpt_colorpairs = [ ['brown', 'RoyalBlue3'], ['Darkblue', 'SeaGreen3'], ['darkgray', 'DarkOrchid3'], ['darkgreen', 'firebrick3'],['darkcyan', 'RoyalBlue3'],['darkred', 'SeaGreen3'],['darkmagenta', 'DarkOrchid3'],['brown', 'firebrick3'],['gray', 'RoyalBlue3'],['black',       'SeaGreen3'],['darkmagenta', 'DarkOrchid3'],['Darkblue',  'firebrick3'],['darkgreen', 'RoyalBlue3'],['darkcyan', 'SeaGreen3'],['darkred', 'DarkOrchid3'],['red', 'firebrick3']]
let g:rbpt_max = 16
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
######End vim.memo #######
######Endmemoof vim.memo #######
