######Startmemoof screen.memo #######
######Start screen.memo #######
########screen config 20170320######
###prex-key(ie Ctrl+a) + Esc and up row scroll
hardstatus on
hardstatus alwayslastline
hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %C%a "
defscrollback 2048
##bind shorcut Fn to switch screen
##f10-->k; select 0
##f11-->F1 monitor
##f12-->F2 kill
##f7--->k7 new screen
##f8--->k8 title screen
bindkey -k k1 select 1
bindkey -k k2 select 2
bindkey -k k3 select 3
bindkey -k k4 select 4
bindkey -k k5 select 5
bindkey -k k6 select 6
bindkey -k k7 screen
bindkey -k k8 title
bindkey -k k9 time
bindkey -k k;  select 0
bindkey -k F1  monitor
bindkey -k F2  kill
##initial named session
screen -t cfg 1 bash
screen -t run 1 bash
screen -t log 1 bash
screen -t dbg 1 bash
screen -t misc 1 bash
##initail screen from 1
bind c screen 1
bind ^c screen 1
bind 0 select 10
screen 1

##shortcut
##Window Management
##create new window	C-a c
##change to last-visited active window	C-a C-a (commonly used to flip-flop between two windows)
##change to window by number	C-a <number> (only for windows 0 to 9)
##change to window by number or name	C-a ' <number or title>
##change to next window in list	C-a n or C-a <space>
##change to previous window in list	C-a p or C-a <backspace>
##see window list	C-a " (allows you to select a window to change to)
##show window bar	C-a w (if you don't have window bar)
##close current window	Close all applications in the current window (including shell)
##kill current window	C-a k (not recommended)
##kill all windows	C-a \ (not recommended)
##rename current window	C-a A
##
##
##Getting out
##detach	C-a d
##detach and logout (quick exit)	C-a D D
##exit screen	C-a \ Exit all of the programs in screen. (not recommended)
##force-exit screen	C-a C-\ (not recommended)
##getting out of the screen session	exit
##
##
##Split screen
##split display horizontally	C-a S
##split display vertically	C-a | or C-a V (for the vanilla vertical screen patch)
##jump to next display region	C-a tab
##remove current region	C-a X
##remove all regions but the current one	C-a Q
##
##Clipboard and Navigation
##freely navigate buffer	C-a [ or C-a <esc>
##toggle selection to copy	space
##paste	C-a ]
##
##Misc
##redraw window	C-a C-l
##monitor window for activity	C-a M
##monitor window for silence	C-a _
##enter digraph (for producing non-ASCII characters)	C-a C-v
##lock (password protect) session	C-a x
##enter screen command	C-a :
##enable logging in the screen session	C-a H
##
##
##Scrollback-buffer
##In copy mode, one can navigate the scrollback buffer in various ways:
##
##half page up	C-u		half page down	C-d
##back	C-b		forward	C-f
##cursor left/down/up/right	h/j/k/l
########screen config 20170320 END######

hardstatus on
hardstatus alwayslastline
hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %C%a "
##scroll 2048 line
defscrollback 2048
##bind shorcut Fn to switch screen
bindkey -k k1 select 1
bindkey -k k2 select 2
bindkey -k k3 select 3
bindkey -k k4 select 4
bindkey -k k5 select 5
##initial named session
screen -t config 1 bash
screen -t debug 1 bash
screen -t test 1 bash
screen -t misc 1 bash
##initail screen from 1
bind c screen 1
bind ^c screen 1
bind 0 select 10
screen 1
termcapinfo xterm* ti@:te@

#############################
#############split view#########
http://unix.stackexchange.com/questions/7453/how-to-split-the-terminal-into-more-than-one-view
You can do it in screen the terminal multiplexer.
here ctrla is press Ctrl + a
To split vertically: ctrla then |.
To split horizontally: ctrla then S (uppercase one).
To unsplit: ctrla then Q (uppercase one).
To switch from one to the other: ctrla then tab
Note: After splitting, you need to go into the new region and start a new session via ctrla then c before you can use that area.

EDIT, basic screen usage:

New terminal: ctrla then c.
Next terminal: ctrla then space.
Previous terminal: ctrla then backspace.
N'th terminal ctrla then [n]. (works for n∈{0,1…9})
Switch between terminals using list: ctrla then " (useful when more than 10 terminals)
Send ctrla to the underlying terminal ctrla then a.

#############################
###split view end###

for centos 7 title
I am using bash and GNU screen on centos7. I notice that if I ssh to another server, change the title (via ctrl+a+A), and log out of the server that my new title gets overwritten by USER@HOST:~. How can I stop it from doing this?

As documented in the man page, screen looks for a null title-escape-sequence. bash sends this sequence via the PROMPT_COMMAND environment variable (for example, mine defaults to printf "\033k%s@%s:%s\033\\" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}".

To disable this feature for a particular window, I just run unset PROMPT_COMMAND from that window. Of course, one could just add this to their ~/.bashrc or to a specific environment file to make it more persistent.
shareimprove this answer

add unset PROMPT_COMMAND  TO ~/.bashrc end or /etc/profile end

If $PROMPT_COMMAND is empty, check $PS1. – choroba Oct 22 '14 at 22:44
######End screen.memo #######
######Endmemoof screen.memo #######
