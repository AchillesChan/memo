######Startmemoof nginx.memo #######
######Start nginx.memo #######

######Let’s Encrypt/Certbot CA 
https://letsencrypt.org/docs/
https://github.com/certbot/certbot

--10 install 
  yum install -y python-minimal git-core
  git clone https://github.com/certbot/certbot.git
  cd certbot/
  ./letsencrypt-auto certonly --standalone -d www.abc.com -d abc.com
./letsencrypt-auto certonly --standalone -d www.abc.com

--20 other take port 80(stop it and rerun)
Obtaining a new certificate
Performing the following challenges:
http-01 challenge for www.abc.com
Cleaning up challenges
Problem binding to port 80: Could not bind to IPv4 or IPv6.

IMPORTANT NOTES:
 - Your account credentials have been saved in your Certbot
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Certbot so
   making regular backups of this folder is ideal.






--30 success get 
./letsencrypt-auto certonly --standalone -d www.abc.com -d abc.com


- Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/www.abc.com/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/www.abc.com/privkey.pem
   Your cert will expire on 2019-10-14. To obtain a new or tweaked
   version of this certificate in the future, simply run
   letsencrypt-auto again. To non-interactively renew *all* of your
   certificates, run "letsencrypt-auto renew"
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le

--40 nginx config
server {
    ssl on;
    listen 443;
    server_name  www.abc.com;
        ssl_certificate  /etc/letsencrypt/archive/www.abc.com/fullchain1.pem;
        ssl_certificate_key /etc/letsencrypt/archive/www.abc.com/privkey1.pem;
        ssl_dhparam /etc/ssl/dhparams.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout  10m;
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;

        ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:DES-CBC3-SHA;   
        ssl_prefer_server_ciphers on;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
................
}

--50 wild domain name
$./certbot-auto certonly --manual --preferred-challenges=dns --emai examples@a.com --server https://acme-v02.api.letsencrypt.org/directory --agree-tos -d *.example.com

Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator manual, Installer None
Obtaining a new certificate
Performing the following challenges:
dns-01 challenge for example.com

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NOTE: The IP of this machine will be publicly logged as having requested this
certificate. If you're running certbot in manual mode on a machine that is not
your server, please ensure you're okay with that.

Are you OK with your IP being logged?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(Y)es/(N)o: y

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Please deploy a DNS TXT record under the name
_acme-challenge.example.com with the following value:

9FtZ3snK1Xef1PPvDX2_H8wdzeBl_x_utnBYfbDXRdA

Before continuing, verify the record is deployed.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Press Enter to Continue
Waiting for verification...


######Let’s Encrypt/Certbot CA  



#####trailing slash##########
I come across this question a lot from people. It’s a simple solution really and I’ll tell you how. Some may ask what’s the point (it works as is with or without)? Well, when it comes to Search Engine Optimization, having duplicate may hurt your rankings. Therefore, it’s good practice to have a permanent (301) redirect for one or the other. For me, I prefer adding a trailing slash. And you simply do this by adding a nginx rewrite to your vhost:

# Adds a trailing slash to any urls that is missing a trailing slash
rewrite ^(.*[^/])$ $1/ permanent;

And if you prefer vice versa (urls without trailing slashes), just use the following rewrite instead:

# Remove trailing slash
rewrite ^/(.*)/$ /$1 permanent;

http://www.osbmedia.com/blog/view/adding-a-trailing-slash-to-your-urls-on-nginx
https://www.digrouz.com/mediawiki/index.php/HOWTO_fix_the_trailing_slash_problem_in_Nginx
#####trailing slash##########

#######http auth with htpasswd

--10 install 
$>sudo yum install httpd-tools -y

--20 create auth file and user 
$>sudo htpasswd -c -d /usr/local/nginx/conf/auth_file example
--30 update user 
$>sudo htpasswd htpasswd /usr/local/nginx/conf/auth_file example
--40 nginx conf 
$>sudo vim /usr/local/nginx/conf/nginx.conf


        location /download/ {
            auth_basic "Auth";
            auth_basic_user_file /usr/local/nginx/conf/auth_file;
            autoindex on; 
            autoindex_exact_size on; 
            autoindex_localtime on; 
            root /data/source; 
            index index.html;  
        }  
--50 restart nginx 
$>sudo nginx -s reload
#######http auth with htpasswd


######nginx.conf###########
access_log /usr/local/nginx/logs/proxy.log upstreamlog;
upstream webapi-back-server {
   sticky;
   server 172.16.1.1;
   server 172.16.1.2;
}
upstream web-back-server {
   sticky;
   server 172.16.0.1;
   server 172.16.0.2;
}
server {
    listen 80;
    server_name web.example.com;
    large_client_header_buffers 8 64k;
    rewrite ^(.*)(/web404Img/.*)$ $2 last;
    rewrite ^(.*)(/web404Css/.*)$ $2 last;
    client_max_body_size 100m;
    error_page 401 403 404 501 503  https://www.example.com/error_redirection;
    error_page 500 502 503 504 /50x.html;
    location = /error.html {
         }
    location = / {
          return 404;
         }

    location / {
        return 301 https://web.example.com$request_uri;
    }

}

server {
        ssl on;                                                                                                                                                                              
        listen 443;                                                                                                                                                                                                                                                                                                             
        server_name  web.example.com;    
        add_header X-Frame-Options SAMEORIGIN;                                                                                                                                                                                                                                                                                      
        large_client_header_buffers 8 64k; 
        ssl_certificate /etc/ssl/example.crt;
        ssl_certificate_key /etc/ssl/example.key;
        ssl_dhparam /etc/ssl/dhparams.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout  10m;
        ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:DES-CBC3-SHA;
        ssl_prefer_server_ciphers on; 
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

        location /api/ {
                proxy_pass http://webapi-back-server$request_uri;
                proxy_connect_timeout       900;
                proxy_send_timeout          900;
                proxy_read_timeout          900;
                send_timeout                900;
                proxy_set_header Host $host;
                proxy_buffers   8 64k;
                proxy_buffer_size          128k;
                proxy_busy_buffers_size    256k;   
                proxy_set_header VIA $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-FORWARDED-FOR $remote_addr;
                proxy_redirect ~*(https\://passport.*http\://)anyillegleweb(/.*) $1example.com$2;
        }
        location / {
                proxy_pass http://web-back-server/;
                proxy_connect_timeout       900;
                proxy_send_timeout          900;
                proxy_read_timeout          900;
                send_timeout                900;
                proxy_set_header Host $host;
                proxy_buffers   8 64k;
                proxy_buffer_size          128k;
                proxy_busy_buffers_size    256k;   
                proxy_set_header VIA $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-FORWARDED-FOR $remote_addr;
                proxy_redirect ~*(https\://passport.*http\://)anyillegleweb(/.*) $1example.com$2;
         }
}

######nginx.conf###########
