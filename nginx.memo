######Startmemoof nginx.memo #######
######Start nginx.memo #######
#####trailing slash##########
I come across this question a lot from people. It’s a simple solution really and I’ll tell you how. Some may ask what’s the point (it works as is with or without)? Well, when it comes to Search Engine Optimization, having duplicate may hurt your rankings. Therefore, it’s good practice to have a permanent (301) redirect for one or the other. For me, I prefer adding a trailing slash. And you simply do this by adding a nginx rewrite to your vhost:

# Adds a trailing slash to any urls that is missing a trailing slash
rewrite ^(.*[^/])$ $1/ permanent;

And if you prefer vice versa (urls without trailing slashes), just use the following rewrite instead:

# Remove trailing slash
rewrite ^/(.*)/$ /$1 permanent;

http://www.osbmedia.com/blog/view/adding-a-trailing-slash-to-your-urls-on-nginx
#####trailing slash##########

#######http auth with htpasswd

--10 install 
$>sudo yum install httpd-tools -y

--20 create auth file and user 
$>sudo htpasswd -c -d /usr/local/nginx/conf/auth_file zhang
--30 update user 
$>sudo htpasswd htpasswd /usr/local/nginx/conf/auth_file zhang
--40 nginx conf 
$>sudo vim /usr/local/nginx/conf/nginx.conf


        location /download/ {
            auth_basic "Auth";
            auth_basic_user_file /usr/local/nginx/conf/auth_file;
            autoindex on; 
            autoindex_exact_size on; 
            autoindex_localtime on; 
            root /data/source; 
            index index.html;  
        }  
--50 restart nginx 
$>sudo nginx -s reload
#######http auth with htpasswd


######nginx.conf###########
access_log /usr/local/nginx/logs/proxy.log upstreamlog;
upstream webapi-back-server {
   sticky;
   server 172.16.1.1;
   server 172.16.1.2;
}
upstream web-back-server {
   sticky;
   server 172.16.0.1;
   server 172.16.0.2;
}
server {
    listen 80;
    server_name web.example.com;
    large_client_header_buffers 8 64k;
    rewrite ^(.*)(/web404Img/.*)$ $2 last;
    rewrite ^(.*)(/web404Css/.*)$ $2 last;
    client_max_body_size 100m;
    error_page 401 403 404 501 503  https://www.example.com/error_redirection;
    error_page 500 502 503 504 /50x.html;
    location = /error.html {
         }
    location = / {
          return 404;
         }

    location / {
        return 301 https://web.example.com$request_uri;
    }

}

server {
        ssl on;                                                                                                                                                                              
        listen 443;                                                                                                                                                                                                                                                                                                             
        server_name  web.example.com;    
        add_header X-Frame-Options SAMEORIGIN;                                                                                                                                                                                                                                                                                      
        large_client_header_buffers 8 64k; 
        ssl_certificate /etc/ssl/example.crt;
        ssl_certificate_key /etc/ssl/example.key;
        ssl_dhparam /etc/ssl/dhparams.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout  10m;
        ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:DES-CBC3-SHA;
        ssl_prefer_server_ciphers on; 
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

        location /api/ {
                proxy_pass http://webapi-back-server$request_uri;
                proxy_connect_timeout       900;
                proxy_send_timeout          900;
                proxy_read_timeout          900;
                send_timeout                900;
                proxy_set_header Host $host;
                proxy_buffers   8 64k;
                proxy_buffer_size          128k;
                proxy_busy_buffers_size    256k;   
                proxy_set_header VIA $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-FORWARDED-FOR $remote_addr;
                proxy_redirect ~*(https\://passport.*http\://)anyillegleweb(/.*) $1example.com$2;
        }
        location / {
                proxy_pass http://web-back-server/;
                proxy_connect_timeout       900;
                proxy_send_timeout          900;
                proxy_read_timeout          900;
                send_timeout                900;
                proxy_set_header Host $host;
                proxy_buffers   8 64k;
                proxy_buffer_size          128k;
                proxy_busy_buffers_size    256k;   
                proxy_set_header VIA $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-FORWARDED-FOR $remote_addr;
                proxy_redirect ~*(https\://passport.*http\://)anyillegleweb(/.*) $1example.com$2;
         }
}

######nginx.conf###########
