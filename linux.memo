<<<<<<< HEAD
$ echo 'Oct 27 20:34:08'|awk '{print $1,$2,$3}'|xargs -P 1 -n 3 sh -c 'date --date="$1 $2 $3" +%s' _
1635338048

$ DATE="06/10/2021 00:00:59 EST" && date -d "$DATE" +%s
1623301259
=======

url code/decode  $https://stackoverflow.com/questions/6182356/what-is-2c-in-a-url
https://meyerweb.com/eric/tools/dencoder/ ###online decode/encode

$ echo "http%3A%2F%2Fwww.foo.com%2Findex.php%3Fid%3Dqwerty" | sed -e "s/%\([0-9A-F][0-9A-F]\)/\\\\\x\1/g" | xargs -0 echo -e
http://www.foo.com/index.php?id=qwerty

+----+-----+----+-----+----+-----+----+-----+
| Hx | Chr | Hx | Chr | Hx | Chr | Hx | Chr |
+----+-----+----+-----+----+-----+----+-----+
| 00 | NUL | 20 | SPC | 40 |  @  | 60 |  `  |
| 01 | SOH | 21 |  !  | 41 |  A  | 61 |  a  |
| 02 | STX | 22 |  "  | 42 |  B  | 62 |  b  |
| 03 | ETX | 23 |  #  | 43 |  C  | 63 |  c  |
| 04 | EOT | 24 |  $  | 44 |  D  | 64 |  d  |
| 05 | ENQ | 25 |  %  | 45 |  E  | 65 |  e  |
| 06 | ACK | 26 |  &  | 46 |  F  | 66 |  f  |
| 07 | BEL | 27 |  '  | 47 |  G  | 67 |  g  |
| 08 | BS  | 28 |  (  | 48 |  H  | 68 |  h  |
| 09 | TAB | 29 |  )  | 49 |  I  | 69 |  i  |
| 0A | LF  | 2A |  *  | 4A |  J  | 6A |  j  |
| 0B | VT  | 2B |  +  | 4B |  K  | 6B |  k  |
| 0C | FF  | 2C |  ,  | 4C |  L  | 6C |  l  |
| 0D | CR  | 2D |  -  | 4D |  M  | 6D |  m  |
| 0E | SO  | 2E |  .  | 4E |  N  | 6E |  n  |
| 0F | SI  | 2F |  /  | 4F |  O  | 6F |  o  |
| 10 | DLE | 30 |  0  | 50 |  P  | 70 |  p  |
| 11 | DC1 | 31 |  1  | 51 |  Q  | 71 |  q  |
| 12 | DC2 | 32 |  2  | 52 |  R  | 72 |  r  |
| 13 | DC3 | 33 |  3  | 53 |  S  | 73 |  s  |
| 14 | DC4 | 34 |  4  | 54 |  T  | 74 |  t  |
| 15 | NAK | 35 |  5  | 55 |  U  | 75 |  u  |
| 16 | SYN | 36 |  6  | 56 |  V  | 76 |  v  |
| 17 | ETB | 37 |  7  | 57 |  W  | 77 |  w  |
| 18 | CAN | 38 |  8  | 58 |  X  | 78 |  x  |
| 19 | EM  | 39 |  9  | 59 |  Y  | 79 |  y  |
| 1A | SUB | 3A |  :  | 5A |  Z  | 7A |  z  |
| 1B | ESC | 3B |  ;  | 5B |  [  | 7B |  {  |
| 1C | FS  | 3C |  <  | 5C |  \  | 7C |  |  |
| 1D | GS  | 3D |  =  | 5D |  ]  | 7D |  }  |
| 1E | RS  | 3E |  >  | 5E |  ^  | 7E |  ~  |
| 1F | US  | 3F |  ?  | 5F |  _  | 7F | DEL |
+----+-----+----+-----+----+-----+----+-----+

>>>>>>> b9304e33c602fdfea963aaa9ce177a0a1d7f715d

###xargs sh single quote 
$ echo '10.1.1.3'| xargs -P 1 -n 1 -t sh -c 'echo firewall-cmd --add-rich-rule=+rule family=ipv4 source address=$1/32 service name=ssh drop+ --permanent ' _|sed -e s:+:\':g|sh
sh -c echo firewall-cmd --add-rich-rule=+rule family=ipv4 source address=$1/32 service name=ssh drop+ --permanent  _ 10.1.1.3 
success


$ echo "5601 
9200"|xargs -P 1 -n 1 sh -c 'echo +echo\>/dev/tcp/192.168.2.3/"$1"+' _|sed -e s:+:\':g
'echo>/dev/tcp/192.168.2.3/5601'
'echo>/dev/tcp/192.168.2.3/9200'



=========
https://linuxconfig.org/how-to-retrieve-and-change-partitions-universally-unique-identifier-uuid-on-linux  ####hdd uuid operation
redirect output time to tee
(time echo >/dev/tcp/foo.com/22) 2>&1 |tee -a output

https://www.golinuxcloud.com/kubernetes-autoscaling/
stress memory ,why?
cat <(yes | tr \\n x | head -c $((1024*1024*600))) <(sleep 120) | grep n


https://howto.lintel.in/protect-files-overwriting-noclobber-bash/
$ tar cf - orig | (cd dest && tar xf -)  ###faster copy small file and preserve permision than common cp command

$ mktemp --dry-run /tmp/poc.XXX   ###create temp file,XXX denote length
/tmp/poc.GrW

$ basename /usr/local/zabbix/conf/zabbix.conf                                                                                                                                
zabbix.conf

$ basename index.html .html                                                                                                                                                  
index



$ set -o noclobber  ###set +o noclobber ###revert
$ echo 1 >a.log
$ash: file2: cannot overwrite existing file


xargs replace awk sed

[linux-w0rf ]$ cat nginx-template
upstream APP-back-srv {
        server SERVER;
}
server {
        location APP{
                proxy_pass http://APP-back-srv$request;
        }
}



[linux-w0rf ]$ echo "
web 1:80
db 2:3306"|xargs -P 1 -n 2  sh -c 'cat nginx-template|sed -e 's:APP:\$1:g' -e 's%SERVER%\$2%'' _

upstream web-back-srv {
        server 1:80;
}
server {
        location web{
                proxy_pass http://web-back-srv$request;
        }
}


upstream db-back-srv {
        server 2:3306;
}
server {
        location db{
                proxy_pass http://db-back-srv$request;
        }
}

===========

https://stackoverflow.com/questions/36186394/saving-arguments-passed-from-xargs-to-bash-as-a-variable-for-processing
find . -mindepth 1 -type d | xargs -n 1 -P 20 -i sh -c "v=\"{}\"; echo \"\$v\""
find . -mindepth 1 -type d | xargs -n 1 -P 20 -i sh -c 'v="{}"; echo "$v"'

BLOB_PREFIX="char:22:54Z&st=2019-09-11T02:22:54Z&spr=https&sig=yma13D"  $BLOB_PREFIX have spec char
ls|xargs -P 1 -n 1 -I {} sh -c "echo {} \"$BLOB_PREFIX\"" _    #### $BLOB_PREFIX be quoted by doble sign,double sign escape by \
2021-03-18.Info.txt char:22:54Z&st=2019-09-11T02:22:54Z&spr=https&sig=yma13D
2021-03-19.Info.txt char:22:54Z&st=2019-09-11T02:22:54Z&spr=https&sig=yma13D
2021-03-20.Info.txt char:22:54Z&st=2019-09-11T02:22:54Z&spr=https&sig=yma13D

https://www.metricly.com/linux-memory-leak/
http://blog.thewebsitepeople.org/2011/03/linux-memory-leak-detection/
https://linoxide.com/tools/valgrind-memcheck/
https://perf.wiki.kernel.org/index.php/Tutorial
http://www.brendangregg.com/blog/index.html
http://www.brendangregg.com/perf.html
http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html
https://docs.microsoft.com/en-us/samples/dotnet/samples/diagnostic-scenarios/
https://www.gokhan-gokalp.com/en/overview-of-debugging-and-profiling-net-core-applications-on-linux-1-perf-lttng/
https://www.tessferrandez.com/blog/2021/03/18/debugging-a-netcore-memory-issue-with-dotnet-dump.html
https://www.cnblogs.com/wu_u/p/14263349.html
https://www.cnblogs.com/wu_u/p/14109333.html
https://docs.microsoft.com/en-us/dotnet/core/diagnostics/debug-highcpu?tabs=linue
# git clone https://github.com/brendangregg/FlameGraph  # or download it from github
# cd FlameGraph
# perf record -F 99 -a -g -- sleep 60
# perf script | ./stackcollapse-perf.pl > out.perf-folded
# ./flamegraph.pl out.perf-folded > perf-kernel.svg



https://stackoverflow.com/questions/7124778/how-to-match-anything-up-until-this-sequence-of-characters-in-a-regular-expres/7124976#7124976
When using .+?, instead of matching all at once and going back for other conditions (if any), the engine will match the next characters by step until the subsequent part of the regex is matched (again if any). This is the un-greedy, meaning match the fewest possible to satisfy.

Following that we have (?={contents}), a zero width assertion, a look around. This grouped construction matches its contents, but does not count as characters matched (zero width). It only returns if it is a match or not (assertion).

Thus, in other terms the regex /.+?(?=abc)/ means:
Match any characters as few as possible until a "abc" is found, without counting the "abc".
qwerty qwerty whatever abc match "qwerty qwerty whatever"


https://www.shell-tips.com/linux/how-to-format-date-and-time-in-linux-macos-and-bash/
http://liftoffsoftware.com/Products/GateOne
http://deer-run.com/~hal/linux_passwords_pam.html

https://unix.stackexchange.com/questions/410727/figure-out-which-process-forks-too-many-threads
$ watch -n 1 'ps -eo nlwp,pid,args --sort -nlwp | head'

https://linuxconfig.org/how-to-perform-a-faster-data-compression-with-pbzip2
##compression
$ time tar -c FOOBAR_dir_or_file | pbzip2 -c -p1 -m10 > FOOBAR5.tar.bz2

real    0m20.362s
user    0m19.932s
sys     0m0.704s

##decompression
$ tar xf FOOBAR1.tar.bz2 --use-compress-prog=pbzip2
OR
# pbzip2 -dc FOOBAR1.tar.bz2 | tar x


https://ss64.com/bash/bang.html
https://ss64.com/bash/syntax-keyboard.html
Re-run all or part of a previous command.

Syntax
      !!       Run the last command again

      !foo     Run the most recent command that starts with 'foo' (e.g. !ls)

      !foo:p   Print out the command that !foo would run
               also add it to the command history

      !$       Run the last word of the previous command (same as Alt + .)

      !$:p     Print out the word that !$ would substitute

      !*       Run the previous command except for the last word

      !*:p     Print out the previous command except for the last word

     ^foo^bar  Run the previous command replacing foo with bar
“This is the way the world ends. Not with a bang but a whimper” ~ T.S. Eliot (The Hollow Men)


https://help.sonatype.com/repomanager2/rpm-packages-and-yum-repositories
https://www.fosslinux.com/27838/installing-sonatype-nexus-repository-oss-on-centos-7.htm
https://www.devopsroles.com/install-nexus-repository-oss-on-centos-7/
https://help.sonatype.com/repomanager3/user-interface/browsing-repositories-and-repository-groups
https://hub.docker.com/_/sonatype-nexus#!  

###key point config
$ grep JAVA /path/2/nexus-3.13.0-01/bin/nexus|head -n 2
INSTALL4J_JAVA_HOME_OVERRIDE="/path/2/jdk1.8.0_192"
INSTALL4J_JAVA_PREFIX=""

$ ls  /path/2/jdk1.8.0_192/ -l
total 25976
drwxr-xr-x 2 10 143     4096 Oct  6  2018 bin
-r--r--r-- 1 10 143     3244 Oct  6  2018 COPYRIGHT
drwxr-xr-x 3 10 143      132 Oct  6  2018 include
-rw-r--r-- 1 10 143  5207429 Sep 12  2018 javafx-src.zip
drwxr-xr-x 5 10 143      185 Oct  6  2018 jre
drwxr-xr-x 5 10 143      245 Oct  6  2018 lib
......

$ cat /etc/crontab |grep slee
@reboot         root    sleep 60s;/path/2/nexus-3.13.0-01/bin/nexus start


######Startmemoof linux.memo #######
######Start linux.memo #######
https://alexandrnikitin.github.io/blog/transparent-hugepages-measuring-the-performance-impact/
https://theojulienne.io/2020/07/03/scaling-linux-services-before-accepting-connections.html
https://theojulienne.io/2020/08/21/mtu-mss-why-connections-stall.html
https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/
https://www.coverfire.com/articles/queueing-in-the-linux-network-stack/
https://ovh.github.io/the-bastion/index.html#

###set secondary ip 
#https://ma.ttias.be/how-to-add-secondary-ip-alias-on-network-interface-in-rhel-centos-7/
#https://computingforgeeks.com/adding-a-secondary-ip-address-to-rhel-centos-8-network-interface/
$ ip a add 10.50.100.5/24 dev eth0

###Use Pam_Tally2 to Lock and Unlock SSH Failed Login Attempts
#https://www.tecmint.com/use-pam_tally2-to-lock-and-unlock-ssh-failed-login-attempts/
$> /etc/pam.d/some-auth-file
auth        required      pam_tally2.so  file=/var/log/tallylog deny=3 even_deny_root unlock_time=60 

[root@tecmint ~]# pam_tally2 --user=tecmint
Login           Failures  Latest    failure     From
tecmint              5    04/22/13  21:22:37    172.16.16.52


[root@tecmint pam.d]# pam_tally2 --user=tecmint --reset
Login           Failures  Latest    failure     From
tecmint             5     04/22/13  17:10:42    172.16.16.52


[root@tecmint pam.d]# pam_tally2 --user=tecmint
Login           Failures   Latest   failure     From
tecmint            0

##check memory usage per process
https://www.golinuxcloud.com/check-memory-usage-per-process-linux/        ###check memory leak
$ cat /proc/20506/smaps |  awk '{Total+=$2} END {print Total/1024" MB"}'
22603.1 MB

before=$(date +%s);CMD 2>&1|tee -a LOG;after=$(date +%s);mail -s "CMD spent $(($after-$before)) on $(hostname)" mail_user@your.com <LOG

[root@k8s]# docker images|awk '{print $1,$2,$3}'_
your.domain.com/it/google_containers/kube-proxy v1.16.2 8454cbe08dc9
your.domain.com/it/google_containers/kube-controller-manager v1.16.2 6e4bffa46d70
...
[root@k8s]# docker images|awk '{print $1,$2,$3}'_|xargs -P 1 -n 3 sh -c 'docker save "$3" >"$1"-"$2".tar' _
docker save 8454cbe08dc9 >kube-proxy-v1.16.2.tar
docker save 6e4bffa46d70 >kube-controller-manager-v1.16.2.tar
...

###ubuntu set locale
https://help.ubuntu.com/community/Locale

$ locale -a   ###list
C               # fall-back, ASCII encoding, same as POSIX
de_DE.utf8      # German language,  Germany,     UTF-8 encoding
de_CH.utf8      # German language,  Switzerland, UTF-8 encoding
fr_CH.utf8      # French language,  Switzerland, UTF-8 encoding
fr_CA.utf8      # French language,  Canada,      UTF-8 encoding
en_US.utf8      # English language, USA,         UTF-8 encoding
POSIX           # fall-back, ASCII encoding, same as C

$ locale ##List current settings

$ date
Sat May 14 15:59:12 CEST 2011

$ LC_TIME=zh_CN.UTF-8   ##Changing settings temporarily

$ date
2011年 05月 14日 星期六 16:00:13 CEST 2011


$Changing settings permanently
If you want more fine-grained control, you may manually change your system's locale entries by modifying the file /etc/default/locale (or the user-specific $HOME/.pam_environment, which can be set by gnome-language-selector as well).

For example on a German system, to prevent system messages from being translated, you may use:

LANG=de_DE.UTF-8
LC_MESSAGES=POSIX

###offline yum install
online$> yumdownloader --assumeyes --destdir=<your_rpm_dir> --resolve yum-utils kubeadm-1.18.* kubelet-1.18.* kubectl-1.18.* ebtables
online$> scp <your_rpm_dir> offlien:/path/2/rpm 
offline$> yum install -y --cacheonly --disablerepo=* ./*.rpm

curl -d "@data.json" -X POST http://localhost:3000/data
cat data.json
{
      "key1":"value1",
        "key2":"value2"
}

curl -d "param1=value1&param2=value2" -H "Content-Type: application/x-www-form-urlencoded" -X POST http://localhost:3000/data
curl -d "param1=value1&param2=value2" -X POST http://localhost:3000/data
curl -d '{"key1":"value1", "key2":"value2"}' -H "Content-Type: application/json" -X POST http://localhost:3000/data


https://linuxhint.com/bash-environment-variables/
Special Parameters
We can also have parameters which the shell treats specially which can only be used as references and assigning a value to them is not possible.

￼
$*  Expands to the positional parameters, starting from one. When the expansion occurs within double quotes, it expands to a single word with the value of each parameter separated by the first character of the IFS special variable.
$@  Provides the positional parameters, starting from one. When the expansion occurs within double quotes, each parameter expands to a separate word.
$#  Provides the number of positional parameters in decimal.
$?  Provides the exit status of the most recently executed foreground pipeline.
$-  A hyphen-sign provides the current option flags as specified upon invocation, by the set built-in command, or those set by the shell itself (such as the -i)
$$  Provides the current process ID of the shell
$!  Provides the current process ID of the most recently executed background command
$0  Provides the name of the current shell or shell script


test lan host open 80 status 
for ip in $(seq 3 8);do timeout 1 bash -c "</dev/tcp/10.1.0.$ip/80" && echo Port $ip open. || echo Port $ip closed.; done

findout only files(not dir and socket)
$ find ./ -maxdepth 1 -not -type d -and -not -type s|xargs ls -l
-rw------- 1 Michael users       0 Jan 26 23:57 ./chromium-upload-23a1c99c307d780d
-rw------- 1 Michael users   16729 Feb 10 19:05 ./.com.google.Chrome.3uwnXe
-rw------- 1 Michael users   16729 Nov 11 01:03 ./.com.google.Chrome.4waNE6


[net namespace docker]
https://linoxide.com/linux-command/use-ip-command-linux/
https://www.thegeekdiary.com/linux-ip-command-examples-to-manage-networking/
https://blog.scottlowe.org/2013/09/04/introducing-linux-network-namespaces/


###add netns
[host ~]# ip netns list                                                                                                                                                                                    
[host ~]# ip netns add Blue                                                                                                                                                                                
[host ~]# ip netns add Red                                                                                                                                                                                 
[host ~]# ip netns list                                                                                                                                                                                    
Red                                                                                                                                                                                                               
Blue                                                                                                                                                                                                              
[host ~]# ip netns exec Blue ip link show                                                                                                                                                                  
1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000                                                                                                                            
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00                                                                                                                                                         
[host ~]# ip netns exec Red ip link show                                                                                                                                                                   
1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000                                                                                                                            
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00                                                                                                                                                         


###add veth
[host ~]# ip link add veth0 type veth peer name veth1                                                                                                                                                      
[host ~]# ip link list|grep veth0                                                                                                                                                                          
5: veth1@veth0: <BROADCAST,MULTICAST,M-DOWN> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000                                                                                                  
6: veth0@veth1: <BROADCAST,MULTICAST,M-DOWN> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000                                                                                                  
####assign veth to netns
[host ~]# ip link set veth0 netns Blue                                                                                                                                                                     
[host ~]# ip link set veth1 netns Red                                                                                                                                                                      
[host ~]# ip netns exec Blue ip link show                                                                                                                                                                  
1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000                                                                                                                            
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00                                                                                                                                                         
6: veth0@if5: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000                                                                                                           
    link/ether 5e:ef:3f:d6:78:d4 brd ff:ff:ff:ff:ff:ff link-netnsid 1                                                                                                                                             
[host ~]# ip netns exec Red ip link show                                                                                                                                                                   
1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000                                                                                                                            
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00                                                                                                                                                         
5: veth1@if6: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000                                                                                                           
    link/ether 5a:55:0b:06:6c:6a brd ff:ff:ff:ff:ff:ff link-netnsid 0                                                                                                                                             

###up veth
[host ~]# ip netns exec Blue ip link set veth0 up
[host ~]# ip netns exec Red ip link set veth1 up
[host ~]# ip netns exec Blue ip link show
1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
6: veth0@if5: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000
    link/ether 5e:ef:3f:d6:78:d4 brd ff:ff:ff:ff:ff:ff link-netnsid 1
[host ~]# ip netns exec Red ip link show
1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
5: veth1@if6: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000
    link/ether 5a:55:0b:06:6c:6a brd ff:ff:ff:ff:ff:ff link-netnsid 0

###set ip addr
[host ~]# ip netns exec Blue ip addr add 172.19.99.1/24 dev veth0
[host ~]# ip netns exec Red  ip addr add 172.19.99.2/24 dev veth1
[host ~]# ip netns exec Blue ip addr show
1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
6: veth0@if5: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 5e:ef:3f:d6:78:d4 brd ff:ff:ff:ff:ff:ff link-netnsid 1
    inet 172.19.99.1/24 scope global veth0
       valid_lft forever preferred_lft forever
    inet6 fe80::5cef:3fff:fed6:78d4/64 scope link
       valid_lft forever preferred_lft forever
[host ~]# ip netns exec Red ip addr show
1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
5: veth1@if6: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 5a:55:0b:06:6c:6a brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.19.99.2/24 scope global veth1
       valid_lft forever preferred_lft forever
    inet6 fe80::5855:bff:fe06:6c6a/64 scope link
       valid_lft forever preferred_lft forever

###test connectiong
[host ~]# ip netns exec Red  ping -c 2 172.19.99.2   ###not linked to self
PING 172.19.99.2 (172.19.99.2) 56(84) bytes of data.
^C
--- 172.19.99.2 ping statistics ---
2 packets transmitted, 0 received, 100% packet loss, time 1004ms

[host ~]# ip netns exec Red  ping -c 2 172.19.99.1   ####linked to peer
PING 172.19.99.1 (172.19.99.1) 56(84) bytes of data.
64 bytes from 172.19.99.1: icmp_seq=1 ttl=64 time=0.107 ms
64 bytes from 172.19.99.1: icmp_seq=2 ttl=64 time=0.060 ms

[host ~]# ip netns exec Blue  ping -c 2 172.19.99.1    ###no linked to self
PING 172.19.99.1 (172.19.99.1) 56(84) bytes of data.
^C
--- 172.19.99.1 ping statistics ---
2 packets transmitted, 0 received, 100% packet loss, time 999ms

[host ~]# ip netns exec Blue  ping -c 2 172.19.99.2    ###linked to peer
PING 172.19.99.2 (172.19.99.2) 56(84) bytes of data.
64 bytes from 172.19.99.2: icmp_seq=1 ttl=64 time=0.079 ms
64 bytes from 172.19.99.2: icmp_seq=2 ttl=64 time=0.083 ms

[net namespace docker]


####install keychain
https://www.cyberciti.biz/faq/installing-keychain-manager-for-ssh-agent-on-centos-linux-6-7/
rpm --import http://wiki.psychotic.ninja/RPM-GPG-KEY-psychotic
rpm -ivh http://packages.psychotic.ninja/6/base/i386/RPMS/psychotic-release-1.0.0-1.el6.psychotic.noarch.rpm
yum -y --enablerepo=psychotic install keychain


###ntp operation
yum -y install ntpdate
$ ntpdate  ntp.gwadar.cn
18 Dec 18:05:38 ntpdate[26064]: adjust time server 118.190.21.209 offset 0.033432 sec

###ntp operation

###nmap check TCP/UDP PORT STATUS

$ nmap -sU 10.0.1.134 -p 161   ###UDP

Starting Nmap 6.40 ( http://nmap.org ) at 2019-12-17 17:10 CST
Nmap scan report for 10.0.1.134
Host is up (0.042s latency).
PORT    STATE SERVICE
161/udp open  snmp

Nmap done: 1 IP address (1 host up) scanned in 0.18 seconds

$ nmap -sT 10.0.1.135 -p 22  ###TCP

Starting Nmap 6.40 ( http://nmap.org ) at 2019-12-17 17:10 CST
Nmap scan report for 10.0.1.135
Host is up (0.042s latency).
PORT   STATE SERVICE
22/tcp open  ssh

Nmap done: 1 IP address (1 host up) scanned in 0.14 seconds


https://www.interserver.net/tips/kb/linux-mail-command-usage-examples/
https://www.binarytides.com/linux-mail-command-examples/

$ yum install mailx -y

$ nmap -sU 192.168.2.16 -p 50-55 2>&1 |tee 1.txt ;mail -s "run on $(hostname) $(date) on result  is done" user@abc.com < ./1.txt

$ docker exec conatainer /path/2/file.txt  2>&1|tee log.txt ; mail -s "$(hostname) $(date)" user@abc.com <log.txt

$ echo “Message body” | mail -s “Subject” user@abc.com         ###without redirection

$ mail -s 'Subject' mail_user@50.link <<<"$(hostname) Message"  
###nmap check TCP/UDP PORT STATUS

###add/remove all open port
ss -tlnp|awk '{print $4}'|grep -v -i local|sed -e 's/^.*://g'|sort|uniq|grep -v 22|grep -v 25|xargs -t -I {} -n 1 firewall-cmd --add-port {}/tcp --perm 2>&1 |tee 1.txt
firewall-cmd --reload

ss -tlnp|awk '{print $4}'|grep -v -i local|sed -e 's/^.*://g'|sort|uniq|grep -v 22|grep -v 25|xargs -t -I {} -n 1 firewall-cmd --remove-port {}/tcp --perm 2>&1 |tee 1.txt
firewall-cmd --reload
###disable ipv6
sysctl -w net.ipv6.conf.default.disable_ipv6=1
sysctl -w net.ipv6.conf.all.disable_ipv6=1

$>vim /etc/sysctl.conf
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1

##virtualbox port forward
Creating the rule
Open VirtualBox and select the VM you want to alter. Click Settings and then click on the Network tab. In the Network window expand the Advanced section and click Port Forwarding 
In the Port Forwarding Rules window, click the + button and fill out the new rule as such:

Name - SSH
Protocol - TCP
Host IP - leave blank
Host Port - 2222
Guest IP - leave blank
Guest Port - 22


ssh -p2222 USERNAME@127.0.0.1


https://www.techrepublic.com/article/how-to-use-port-forwarding-in-virtualbox/



===global natnetwork settings

virtual box->tools->preferences->network->add(plus sign)-->select added natnetwork(double click)->port forwarding->
add rule(plus sign)->Name - SSH-to-vm01
Protocol - TCP
Host IP - leave blank
Host Port - 2222
Guest IP - 10.0.2.15(VM LAN IP)
Guest Port - 22


##virtualbox port forward

http://www.codecodex.com/wiki/Generate_a_random_password_or_random_string
https://stackoverflow.com/questions/2793812/generate-a-random-filename-in-unix-shell
https://linuxconfig.org/create-a-random-character-text-file-using-linux-shell$ < /dev/urandom tr -dc "[:alnum:]" | head -c1000 > file.txt
$ cat /dev/urandom | base64 | head -c8 ##/dev/random is better ??
$ </dev/urandom tr -dc A-Za-z0-9_ | head -c8

https://appuals.com/set-bash-variables-random-numbers/
$od -An -N1 -tu1 /dev/urandom  ##1-256

r=$(( $RANDOM % 10 + 10 ))  ###10-19

$(( ( RANDOM % 59 )  + 1 ))

$shuf -i 1-100 -n 3  ###may not exist cmd
5
23
33



https://www.shellscript.sh/escape.html
https://unix.stackexchange.com/questions/347332/what-characters-need-to-be-escaped-in-files-without-quotes

httpsimple solution is to put a single quote (') at the beginning and another single quote at the end, and to replace every ' character inside the file name by the 4-character sequence '\''. All characters lose their special meaning inside a single-quoted string, except ' itself which marks the end of the string. The sequence '\'' ends the single-quoted literal, immediately follows by a quoted single quote, and opens a new single-quoted literal. Thus the file name

This file's name has some weird characters!
Will you manage to escape them?

can be quoted as follows:

somecommand 'This file'\''s name has some weird characters!
Will you manage to escape them?'

Double quotes have more complex escaping rules and don't allow you to include an exclamation mark ! if history substitution is activated, so I won't consider them further.

An alternative approach is to protect characters with backslashes. This works for every character except newlines; for a newline, putting it inside single quotes (or double quotes) is the only solution. If you want to minimize the number of backslashes to present the quoted name to the user, you may restrict it to places where the backslash is needed; however, the more backslashes you omit, the more you risk forgetting one that's needed. Letters, digits and non-ASCII characters are always ok¹. Quote whitespace and punctuation whenever you're unsure.

With a typical shell (ksh, bash or zsh), you need to quote the following characters in at least some circumstances.

    Whitespace (space, tab, newline — remembering that newlines can't be quoted with a backslash).
    ! — history expansion.
    " — shell syntax.
    # — comment start when preceded by whitespace; zsh wildcards.
    $ — shell syntax.
    & — shell syntax.
    ' — shell syntax.
    ( — even in the middle of a word: ksh extended globs (also available in bash and zsh); zsh wildcards.
    ) (see ()
    * — sh wildcard.
    , — only inside brace expansion.
    ; — shell syntax.
    < — shell syntax.
    = — in zsh, when it's at the beginning of a file name (filename expansion with PATH lookup).
    > — shell syntax.
    ? — sh wildcard.
    [ — sh wildcard.
    \ — shell syntax.
    ] — you may get away with leaving it unquoted.
    ^ — history expansion; zsh wildcard.
    ` — shell syntax.
    { — brace expansion.
    | — shell syntax.
    } — needs to be escaped in zsh, other shells are more lenient when there's no matching opening brace.
    ~ — home directory expansion when it's at the beginning of a file name; zsh wildcard; always safe when it's the last character.

A few more characters can require special handling sometimes:

    - isn't special for the shell, but when it's at the beginning of a command argument, it indicates an option. It can't be protected with quotes since the special handling is in the command, not in the shell. To protect a file name that begins with -, you can put ./ before it — this way it's still the same file, but the argument doesn't begin with - anymore.
    . isn't special in itself, but dot files are excluded from * globs by default.
    : isn't special for the shell, but some commands parse it specially, e.g. to indicate a remote file (hostname:filename). Consult the documentation of the command to see how to cope with file nams containing colons.

####BEST##### https//stackoverflow.com/questions/15783701/which-characters-need-to-be-escaped-when-using-bash


There are two easy and safe rules which work not only in sh but also bash.
1. Put the whole string in single quotes

This works for all chars except single quote itself. To escape the single quote, close the quoting before it, insert the single quote, and re-open the quoting.

'I'\''m a s@fe $tring which ends in newline
'
#############very effective way#############
sed command: sed -e "s/'/'\\\\''/g; 1s/^/'/; \$s/\$/'/"



2. Escape every char with a backslash

This works for all characters except newline. For newline characters use single or double quotes. Empty strings must still be handled - replace with ""

\I\'\m\ \a\ \s\@\f\e\ \$\t\r\i\n\g\ \w\h\i\c\h\ \e\n\d\s\ \i\n\ \n\e\w\l\i\n\e"
"

sed command: sed -e 's/./\\&/g; 1{$s/^$/""/}; 1!s/^/"/; $!s/$/"/'.
2b. More readable version of 2

There's an easy safe set of characters, like [a-zA-Z0-9,._+:@%/-], which can be left unescaped to keep it more readable

I\'m\ a\ s@fe\ \$tring\ which\ ends\ in\ newline"
"

sed command: LC_ALL=C sed -e 's/[^a-zA-Z0-9,._+@%/-]/\\&/g; 1{$s/^$/""/}; 1!s/^/"/; $!s/$/"/'.

Note that in a sed program, one can't know whether the last line of input ends with a newline byte (except when it's empty). That's why both above sed commands assume it does not. You can add a quoted newline manually.

Note that shell variables are only defined for text in the POSIX sense. Processing binary data is not defined. For the implementations that matter, binary works with the exception of NUL bytes (because variables are implemented with C strings, and meant to be used as C strings, namely program arguments), but you should switch to a "binary" locale such as latin1.

(You can easily validate the rules by reading the POSIX spec for sh. For bash, check the reference manual linked by @AustinPhillips)




 Check whether a remote server port is open on Linux 
$ echo > /dev/tcp/192.168.56.160/443 && echo "Port is open"
bash: connect: Connection refused
bash: /dev/tcp/192.168.56.160/443: Connection refused

echo > /dev/tcp/[host]/[port] && echo "Port is open"
echo > /dev/udp/[host]/[port] && echo "Port is open"


#cut get last field or excpet last field
https://unix.stackexchange.com/questions/217628/cut-string-on-last-delimiter
$echo "a.b.bat" | rev | cut -d"." -f1  |rev
bat

$ echo "a.b.bat" | rev | cut -d"." -f2-  |rev
a.bt get last field or excpet last field

#cut get last field or excpet last field


https://www.cyberciti.biz/faq/linux-port-redirection-with-iptables/
iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 25 -j REDIRECT --to-port 2525
http://www.ttlsa.com/linux/iptables-port-redirect/
####file transfer with nc

https://www.maketecheasier.com/netcat-transfer-files-between-linux-computers/
https://stackoverflow.com/questions/17797758/using-nc-to-transfer-large-file
https://www.tecmint.com/transfer-files-between-two-linux-machines/

[receiver]# nc -vl sender-port |tar zxv 
Ncat: Version 7.50 ( https://nmap.org/ncat )
Ncat: Listening on :::sender-port
Ncat: Listening on 0.0.0.0:sender-port
Ncat: Connection from sender-ip.
Ncat: Connection from sender-ip:51598.
config/
config/ssh_host_rsa_key
config/ssh_host_rsa_key.pub
config/ssh_host_ecdsa_key
config/ssh_host_ecdsa_key.pub
config/ssh_host_ed25519_key
config/ssh_host_ed25519_key.pub
config/trusted-certs/
config/gitlab.rb-bak
config/gitlab.rb
config/gitlab.rb.bak
config/gitlab-secrets.json
config/git.tar.gz

[sender]# ls config/
git.tar.gz           gitlab.rb      gitlab.rb.bak       ssh_host_ecdsa_key.pub  ssh_host_ed25519_key.pub  ssh_host_rsa_key.pub
gitlab-secrets.json  gitlab.rb-bak  ssh_host_ecdsa_key  ssh_host_ed25519_key    ssh_host_rsa_key          trusted-certs
[sender]# tar czp  config/ |nc --send-only sender-ip sender-port



https://nmap.org/ncat/guide/ncat-file-transfer.html 
These examples show how to transfer inputfile on host1 to outputfile on host2. Here no port number was specified so Ncat will use its default port of 31337. To use a different port just list it on the command line.

Transfer a file, receiver listens

    host2$ ncat -l > outputfile                    ###MUST ncat NOT nc ???
    host1$ ncat --send-only host2 < inputfile      ###MUST ncat NOT nc ??
Transfer a file, sender listens

    host1$ ncat -l --send-only < inputfile
    host2$ ncat host1 > outputfile

 Note the order of the commands. The listener must be started first, regardless
of the direction of transfer, or else the client will not have anything to connect to.

The above technique works fine for sending a single file. One way to send multiple 
files is to bundle them up with tar or zip and send the archive file. But there's an even
easier way. Just pipe the output of tar directly into Ncat on the sending side, and 
pipe Ncat's output into tar on the receiving side. This is especially useful when 
the sending computer doesn't have enough free disk space to hold the archive file.
 Here's how to transfer <files> using the “receiver listens” method, 
though of course the “sender listens” method works just as well.

Transfer a bundle of files
!!!!!!!#########################VERFIED USE NCAT NOT NC!!!!!!!!!!!!!!!!
dst$ ncat -l 9999| tar xzv                                       ###dest,9999 is port,run 1st
src$ tar czv ./* | ncat --send-only dst 9999    ###change dir to be copied on source,run 2nd;cp file give full file name
!!!!!!!#########################VERFIED USE NCAT NOT NC!!!!!!!!!!!!!!!!
Not only tar files but any stream of bytes can be transferred in this way.
 Here is an example of transferring an entire disk image from host1 to host2.
 Naturally, the disk should be unmounted or mounted read-only.

Transfer a disk image

    host2$ ncat -l > host1-hda.image
    host1$ ncat --send-only host2 < /dev/hda

Disk images are typically large files that take a long time to transfer. 
You can compress the image on the fly while sending and decompress it on
 the other end. Whether this makes an improvement depends on the speed of the network and the compression program.

Transfer a disk image with compression

    host2$ ncat -l | bzip2 -d > host1-hda.image
    host1$ cat /dev/hda | bzip2 | ncat --send-only host2

Transfer a file through an intermediary

    host3$ ncat -l --broker
    host2$ ncat host3 > outputfile
    host1$ ncat --send-only host3 < inputfile

Note that it's important for host2 (the receiving host) to connect to the broker before host1 
(the sending host) does. The broker does not buffer received data to send to hosts that connect 
later. After the file is transferred, it is necessary to forcibly disconnect the Ncat on host2
with ctrl+C. The broker never disconnects any of its clients. 



####file transfer with nc

####centos proxy settings
System-wide proxy settings - add the following lines to your /etc/environment file:
# vi /etc/environment
 
http_proxy="http://proxysrv:8080/"
https_proxy="https://proxysrv:8080/"
ftp_proxy="ftp://proxysrv:8080/"
no_proxy=".mylan.local,.domain1.com,host1,host2"

To apply these settings without restarting the machine run the following commands on the bash shell:
	
export http_proxy="http://proxysrv:8080/"
export https_proxy="https://proxysrv:8080/"
export ftp_proxy="ftp://proxysrv:8080/"
export no_proxy=".mylan.local,.domain1.com,host1,host2"

You also need to configure yum:
# vi /etc/yum.conf
 
proxy=http://proxysrv:8080/

####centos proxy settings

####linux ssh change port selinux 
$> semanage port -a -t ssh_port_t -p tcp 60001
ssh_port_t                     tcp      60001, 22  
https://www.rootusers.com/use-selinux-port-labeling-to-allow-services-to-use-non-standard-ports/
survive after reboot?/

$> semanage port -l |grep ssh

####linux ssh change port selinux 

####install netflix vector
https://www.redhat.com/en/blog/getting-started-using-performance-co-pilot-and-vector-browser-based-metric-visualizations
#yum install pcp-webapp-vector pcp-webapi -y
#systemctl start pmcd pmwebd
#systemctl enable pmcd pmwebd

# firewall-cmd --add-port 44323/tcp --perm
success
# firewall-cmd --reload
success

$ pcp
Performance Co-Pilot configuration on toium:

platform: Linux toium 3.10.0-327.el7.x86_64 #1 SMP Thu Oct 29 17:29:29 EDT 2015 x86_64
hardware: 4 cpus, 2 disks, 1 node, 3831MB RAM
timezone: EST+5
services: pmcd pmwebd
pmcd: Version 3.10.6-1, 7 agents, 1 client
pmda: root pmcd proc xfs linux mmv jbd2


http://localhost:44323/vector/index.html#/?host=localhost:44323

http://localhost:44323/vector/index.html#/?host=localhost:44323&hostspec=localhost&widgets=kernel.all.cpu,kernel.percpu.cpu,kernel.all.runnable,kernel.all.load,network.interface.bytes,network.tcpconn,network.interface.packets,network.tcp.retrans,mem,mem.vmstat.pgfault,kernel.all.pswitch,disk.iops,disk.bytes,disk.dev.avactive,disk.dev.latency




####How do I scp a filename with spaces?
Spaces in directories or filenames are the natural enemy of a Linux system but can of course be escaped with due diligence. There are 3 possibilities that you could try:

    scp [remote username]@192.168.1.X:"'/media/remote_username/photos 4/file.jpg'" .
    scp [remote username]@192.168.1.X:"/media/remote_username/photos\ 4/file.jpg" .
    scp [remote username]@192.168.1.X:/media/remote_username/photos\\\ 4/file.jpg .

All should work but some are syntactically easier to understand than others...
#####



###How can I use xargs to copy files that have spaces and quotes in their names?



https://unix.stackexchange.com/questions/401384/pipelined-sed-does-not-work-on-found-filename-inside-bash-command-substitution-w
touch sample.txt
find . -maxdepth 1 -type f -name '*.txt' \
    -exec sh -c 'printf "%s " "$1";sleep 5s;printf "%s \n" "before.txt" "$1" "after.txt" | sed "s/txt/TXT/g"' sh {} ';'
#############tested############
#!/bin/bash
s=$(( $RANDOM % 10 ))  ##generate random number for sleep 
r=$(( $RANDOM % 10 ))  ##generate random number for sleep 
echo 'random='"$r"
find . -maxdepth 1 -type f -name '*.txt' |xargs  -t  sh -c 'sleep '$s'.'$r';cp -v "$1" $(printf "%s\n" "$1" | sed "s/txt/TXT/g")' \;



$  touch a.txt
$  ls a.TXT
ls: cannot access 'a.TXT': No such file or directory

$  find . -maxdepth 1 -type f -name '*.txt' |xargs  -t -p sh -c 'sleep 2s;mv -v "$1" $(printf "%s %s %s\n" "$1" | sed "s/txt/TXT/g")' \;
sh -c sleep 2s;mv -v "$1" $(printf "%s %s %s\n" "$1" | sed "s/txt/TXT/g") ; ./a.txt ?...y
'./a.txt' -> './a.TXT'
$  ls a.TXT
a.TXT



$ find ./ -type f|sed -e 's:./::g' |xargs -P 1 -n 1 -t  sh -c 'sleep 2s;mv -v "$1" $(printf "%s %s %s\n" "$1" | sed "s/bar/foo/g")' \;
sh -c sleep 2s;mv -v "$1" $(printf "%s %s %s\n" "$1" | sed "s/bar/foo/g") ; bar-01 
'bar-01' -> 'foo-01'
sh -c sleep 2s;mv -v "$1" $(printf "%s %s %s\n" "$1" | sed "s/bar/foo/g") ; bar-02 
'bar-02' -> 'foo-02


$ find . -maxdepth 1 -type f|xargs  -P 1 -n 1 sh -c 'sleep 2s;mv -v "$1" $(printf "%s\n" "$1" | sed "s/.txt/.bak-TXT/g")' _;
'./a1.txt' -> './a1.bak-TXT'
'./a1.a2.txt' -> './a1.a2.bak-TXT'


$ echo "a11 a12 a13
a21 a22 a23"|xargs -P 1 -n 3 -t sh -c 'echo  $(printf "%s %s %s \n" "$1" "$2" "$3"|sed "s:a:c:g")' _
sh -c echo  $(printf "%s %s %s \n" "$1" "$2" "$3"|sed "s:a:c:g") _ a11 a12 a13 
c11 c12 c13
sh -c echo  $(printf "%s %s %s \n" "$1" "$2" "$3"|sed "s:a:c:g") _ a21 a22 a23 
c21 c22 c23

#############tested############

#generate multiple var command

> cat curr
aws-redis   12.3.24.11    user        key
aws-db01    12.3.36.12    user        key
aws-db02    12.3.53.13    user        key

> awk '{print $0}' curr|xargs   -n 4   sh -c 'echo az --host $1 --name $1 --ip $2 --key $4' _
az --host aws-redis --name aws-redis --ip 12.3.24.11 --key key
az --host aws-db01 --name aws-db01 --ip 12.3.36.12 --key key
az --host aws-db02 --name aws-db02 --ip 12.3.53.13 --key key

> cat curr|xargs   -n 4   sh -c 'echo az --host $1 --name $1 --ip $2 --key $4' _
az --host aws-redis --name aws-redis --ip 12.3.24.11 --key key
az --host aws-db01 --name aws-db01 --ip 12.3.36.12 --key key
az --host aws-db02 --name aws-db02 --ip 12.3.53.13 --key key

https://stackoverflow.com/questions/41043163/xargs-sh-c-skipping-the-first-argument
https://www.gnu.org/software/findutils/manual/html_node/find_html/Invoking-the-shell-from-xargs.html#Invoking-the-shell-from-xargs
#generate multiple var command



https://stackoverflow.com/questions/143171/how-can-i-use-xargs-to-copy-files-that-have-spaces-and-quotes-in-their-names?rq=1

You can combine all of that into a single find command:

find . -iname "*foobar*" -exec cp -- "{}" ~/foo/bar \;

This will handle filenames and directories with spaces in them. You can use -name to get case-sensitive results.

Note: The -- flag passed to cp prevents it from processing files starting with - as options.
###How can I use xargs to copy files that have spaces and quotes in their names?


###count ip access 
https://stackoverflow.com/questions/18682308/sort-uniq-ip-address-in-from-apache-log

cat access.log | awk '{print $1}' | sort -n | uniq -c | sort -nr | head -20


29877 93.xxx.xxx.xxx
  17538 80.xxx.xxx.xxx
   5895 198.xxx.xxx.xxx
   3042 37.xxx.xxx.xxx
   2956 208.xxx.xxx.xxx
   2613 94.xxx.xxx.xxx
   2572 89.xxx.xxx.xxx
   2268 94.xxx.xxx.xxx
   1896 89.xxx.xxx.xxx
   1584 46.xxx.xxx.xxx
   1402 208.xxx.xxx.xxx
   1273 93.xxx.xxx.xxx
   1054 208.xxx.xxx.xxx
    860 162.xxx.xxx.xxx
    830 208.xxx.xxx.xxx
    606 162.xxx.xxx.xxx
    545 94.xxx.xxx.xxx
    480 37.xxx.xxx.xxx
    446 162.xxx.xxx.xxx
    398 162.xxx.xxx.xxx

###count ip access 

###bash in vi editor mode
--05 view current mode
$ set -o |grep em
emacs           on ####on is emacs,off is you define

--10 set ~/.bashrc or .bash_profile
set -o vi
--20 relogin

--30 input command ,press ESC,press 0

--40 now you entered vi mode,use vim command

--50 restore
clean set -o vi in ~/.bashrc or .bash_profile


--60 enter edit mode
press ESC,press 0,You can use vim editor now

More complex edits

If the implemented commands are not enough to edit your one-liner, you can always request a fully-fledged vim and open the command in a temp file.

To do that, #####press v### while in normal mode. This will open your default editor with a temp file. Write-quit to execute the edited command in the shell.

In case this doesn’t work for you, you might want to check your setting for ######$VISUAL or add this to your .bash_profile: export VISUAL="vim"####

--70 error
https://davidhamann.de/2018/01/28/using-vi-commands-in-your-bash-shell/
###bash in vi editor mode

####Jump to next white space

    Use f and then space. See :help f and :help t for that.//6f space jump 6 words 
    Alternatively use /[[:space:]] or /\s if you want to also match tab.
    otherwise El will do it (capital e and lowercase L).

Following a suggested edit that was rejected, here is how to do it backwards (jump to previous space):

    Use F and then space. See :help F and :help T for that. //7F space return 6 words 
    Alternatively use ?[[:space:]] or ?\s if you want to also match tab.
    otherwise Bh will do it (capital b and lowercase h).




####GREAT##### f+L jump next L of this line,3f+L or fL;;; jump the third L
####GREAT##### F+L jump last L of this line,3F+L or FL;;; jump the last third L

On the same line :

f Space will work.
Generally, f+<char> allows you to jump on the next character on the same line.

See :help f for more information.


####Jump to next white space

####Jumpserver
--05 network top
client-->jumpserver-->dest-server
client-end-->jump-srv------>Real-srv

--08 jump security
yum provides /usr/sbin/semanage
yum whatprovides /usr/sbin/semanage
yum install policycoreutils-python

semanage port -a -t ssh_port_t 2200 -p tcp
firewall-cmd --add-port 2200/tcp --perm
firewall-cmd --reload
firewall-cmd --zone=public --remove-service=ssh --permanent
###permit specfic ip access specfic port
firewall-cmd --permanent --zone=public --add-rich-rule='
  rule family="ipv4"
    source address="1.2.3.4/32"
      port protocol="tcp" port="4567" accept'

firewall-cmd --reload

!!!DO NOT OPEN 4567 ON --add-port list ANY MORE


--10 client .ssh/config 
client$: cat ~/.ssh/config

Host                  jumpserver
Hostname              jump-srv
User                  Foo
IdentityFile          ~/.ssh/private-key-file

Host                  dest-server 
Hostname              Real-srv    ####LAN IP of Real-srv,may need public-key file
User                  Foo         #### on ~/.ssh/authorized_keys,WAN ssh denied for management.
Port                  22  
ProxyCommand          ssh -q -W %h:%p jumpserver
IdentityFile          ~/.ssh/private-key-file

--30 test && resuslt
client$> ssh -i private-key-file dest-server
Enter passphrase for key 'private-key-file': 
dest-server$ who      ####source is jump-server 
Foo  pts/0        2019-04-11 02:57 (jump-srv)




--100 jumpserver with ssh tunnel

$ ssh -A -t -p JMPort -i ~/jumpkey -L 13580:localhost:61183  jump@jump-srv \
ssh -A -t -p RealSrvPort -i srvkey real-srv-user@real-srv -L 61183:localhost:80

Warning: Identity file /home/.ssh/srvkey not accessible: No such file or directory.
Last login: Tue Dec 24 11:41:06 2019 from ......
!!!PATT  -L 13580:localhost:61183 is Client on port 13580 NOT USE real-srv port 80
!!! -L 61183:localhost:80 61183 is jump listen port MUST same as first tunnel 61183, 80 is real-srv need tunnel port
!!! NOT USE NCfqL

https://blog.remibergsma.com/2013/05/28/creating-a-multi-hop-ssh-tunnel-by-chaining-ssh-commands-and-using-a-jump-host/



client $>ssh -v -N -L 3306:Real-srv:3306 Foo@jump-srv
####Real-srv can be server's LAN IP,so can connect to A NAT back server 
#######by ssh tunnel with another jumpserver(Have Internet access) with LAN IP same
#as Real-srv.#####
or slient by 
client $>ssh -i ~/.ssh/private-key -NCfq -L 3306:Real-srv:3306 Foo@jump-srv ###no below output


OpenSSH_7.2p2, OpenSSL 1.0.2j-fips  26 Sep 2016
debug1: Reading configuration data /home/Michael/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 25: Applying options for *
debug1: auto-mux: Trying existing master
debug1: Requesting forwarding of local forward LOCALHOST:3306 -> Real-srv:3306
debug1: mux_client_request_session: master session id: 7


--110 test 
$> mysql -uroot -h127.0.0.1
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 6
Server version: 5.5.60-MariaDB MariaDB Server

Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> \s
--------------
mysql  Ver 15.1 Distrib 10.0.32-MariaDB, for Linux (x86_64) using readline 5.1

Connection id:          6
Current database:
Current user:           root@jump-srv                       #########jumpserver ip 
SSL:                    Not in use
Current pager:          less
Using outfile:          ''
Using delimiter:        ;
Server:                 MariaDB
Server version:         5.5.60-MariaDB MariaDB Server
Protocol version:       10
Connection:             127.0.0.1 via TCP/IP               ######localhost 3306
Server characterset:    latin1
Db     characterset:    latin1
Client characterset:    utf8
Conn.  characterset:    utf8
TCP port:               3306
Uptime:                 10 min 44 sec

Threads: 2  Questions: 46  Slow queries: 0  Opens: 15  Flush tables: 2  Open tables: 41  Queries per second avg: 0.071
--------------


####Jumpserver

####send mail 
echo "My mail body text" >MyText
mail -s "My-subject" rcpt@domain.com <MyText.txt
mail -s "$HOST $OPDATE io replication error "  user@domain.com< /dev/null
while IFS= read -r db;do mysql -e "create database $db" -uroot -pY0urP@wd-h |mail -s "$? $db $(history |tail -n 1) $(hostname) $(date)" user@example.com</dev/null ; done<db_list_file 
cat db_list_file|while IFS= read -r db;do mysql -e "create database $db" -uroot -pY0urP@wd-h |mail -s "$? $db $(history |tail -n 1) $(hostname) $(date)" user@example.com</dev/null ; done
ls log.txt  && mail -s "$(hostname) success ls" user@abc.com </dev/null || mail -s "fail on $(hostname) $(date) on cmd" user@abc.com </dev/null
 shell> time sh cmd ;mail -s "STATUS->$? HOST->$(hostname) DATE->$(date) IP->$(ip a|grep  "inet"|grep global) USER->$(whoami) CMD->$(history|tail -n 1)" user@example.com </dev/null 
 shell> (time sh AutoInstallMysql8v2.sh ) |& tee full-log;tail -n 20 full-log >abstract-log;mail -s "$? $(hostname) $(ip a|grep  "inet"|grep global|head -n 1|awk '{print $2}') $(whoami) $(date) $(history|tail -n 1|awk '{for (i=2; i<=NF; i++) printf $i FS}') " -a full-log user@abc.com <abstract-log;date   #######yes
 shell> time sh AutoInstallMysql8v2.sh |tee 2>&1 full-log;tail -n 20 full-log >abstract-log;mail -s "$? $(hostname) $(ip a|grep  "inet"|grep global|head -n 1|awk '{print $2}') $(whoami) $(date) $(history|tail -n 1|awk '{for (i=2; i<=NF; i++) printf $i FS}') " -a full-log user@abc.com <abstract-log;date
 shell> time sh someth.sh;mail -s "$? $(hostname) $(ip a|grep  "inet"|grep global|head -n 1|awk '{print $2}') $(whoami) $(date) $(history|tail -n 1|awk '{for (i=2; i<=NF; i++) printf $i FS}')" user@abc.com </dev/null;date     ####YES
 shell> time sh cmd ;mail -s "STATUS->$? HOST->$(hostname) DATE->$(date) IP->$(ip a|grep brd|grep global|head -n 1|awk '{print $2}') USER->$(whoami) CMD->$(history|tail -n 1)" user@example.com </dev/null 
 shell> time cmd-here "OK $(hostname) $(date) $(history|tail -n 1)" user@example.com </dev/null || mail -s "WRONG $(hostname) $(date)  $(history|tail -n 1)" user@example.com </dev/null

####send mail 




###per ip port traffic monitor batch mode
##-t batch mode 
##-s delay time
iftop -f "dst port 22" -f "src host 10.0.2.3" -t -s 1800 >log.txt &
###per ip port traffic monitor 

###visudo
User_Alias     OPERATORS = jia
Runas_Alias    OP = root
Host_Alias     OFNET = 10.0.1.0/24,10.0.2.3 #####target host
Cmnd_Alias     OPCMD = /bin/systemctl restart vsftpd,\
/bin/systemctl restart firewalld,\
!/bin/systemctl restart sshd

OPERATORS OFNET = (OP) OPCMD
#Who      Where = AsWho DoWhat
###visudo

###shell cmd on file with dash-start 
[root]# touch -- --example-of-dash-start
[root]# ll --example-of-dash-start
ls: unrecognized option '--example-of-dash-start'
Try 'ls --help' for more information.
[root]# ll -- --example-of-dash-start
-rw-r--r-- 1 root root 0 Mar 25 15:58 --example-of-dash-start
[root]# rm -fv -- '--example-of-dash-start'
removed ‘--example-of-dash-start’
[root]# ls
###shell cmd on file with dash-start 

####tee stdin stdout stderr
https://serverfault.com/questions/201061/capturing-stderr-and-stdout-to-file-using-tee

$>cmd 2>&1 |tee some.log

https://stackoverflow.com/questions/692000/how-do-i-write-stderr-to-a-file-while-using-tee-with-a-pipe
$>command > >(tee -a stdout.log) 2> >(tee -a stderr.log >&2)
>(...) (process substitution) creates a FIFO and lets tee listen on it. Then, it uses > (file redirection) to redirect the STDOUT of command to the FIFO that your first tee is listening on.

####tee stdin stdout stderr


####parted fdisk big than 2TB disk##

# yum install -y parted

# parted -a opt /dev/sdb mkpart primary ext4 0% 100%
or
# parted -a opt /dev/sda mkpart primary ext4 1MB 100%

Information: You may need to update /etc/fstab.

# lsblk
NAME          MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda             8:0    0 111.8G  0 disk
├─sda1          8:1    0   200M  0 part /boot/efi
├─sda2          8:2    0     1G  0 part /boot
sdb             8:16   0   7.3T  0 disk
└─sdb1          8:17   0   7.3T  0 part

#####waring############
###full op
[root@localhost ~]# df -h
Filesystem             Size  Used Avail Use% Mounted on
/dev/mapper/cl00-root   50G  1.3G   49G   3% /
devtmpfs               7.8G     0  7.8G   0% /dev
tmpfs                  7.8G     0  7.8G   0% /dev/shm
tmpfs                  7.8G  8.9M  7.8G   1% /run
tmpfs                  7.8G     0  7.8G   0% /sys/fs/cgroup
/dev/sdb2             1014M  133M  882M  14% /boot
/dev/sdb1              200M  9.5M  191M   5% /boot/efi
/dev/mapper/cl00-home  165G   33M  165G   1% /home
tmpfs                  1.6G     0  1.6G   0% /run/user/0
[root@localhost ~]# parted
GNU Parted 3.1
Using /dev/sda
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) select /dev/sda                          ############input
Using /dev/sda
(parted) print ############input
Model: ATA ST8000NM0055-1RM (scsi)
Disk /dev/sda: 8002GB
Sector size (logical/physical): 512B/4096B
Partition Table: gpt
Disk Flags:

Number  Start  End  Size  File system  Name  Flags

(parted) mktable gpt ############input
Warning: The existing disk label on /dev/sda will be destroyed and all data on this disk will be lost. Do you want to continue?
Yes/No? y ############input
(parted) mkpart  ############input
Partition name?  []? datadisk      ############input                                        
File system type?  [ext2]? ext4                      ############input                      
Start? 20% ############input
End? 100%                    ############input                                              
(parted) print                                 ############input                            
Model: ATA ST8000NM0055-1RM (scsi)
Disk /dev/sda: 8002GB
Sector size (logical/physical): 512B/4096B
Partition Table: gpt
Disk Flags: 

Number  Start   End     Size    File system  Name      Flags
 1      1600GB  8002GB  6401GB               datadisk

(parted) quit                       ############input
Information: You may need to update /etc/fstab.


[root@localhost ~] blkid               #######input  for check                         
/dev/sda1: PARTLABEL="data" PARTUUID="47......686e"

[root@localhost ~]# mkfs.ext4 /dev/sda1 ############input
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
195354624 inodes, 1562805248 blocks
78140262 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=3711959040
47694 block groups
32768 blocks per group, 32768 fragments per group
4096 inodes per group
Superblock backups stored on blocks: 
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
        4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, 
        102400000, 214990848, 512000000, 550731776, 644972544

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information:            
done

[root@localhost ~]# blkid ############input
/dev/sda1: UUID="6aad1477-02f0-4de5-94eb-6ac9b9e06e53" TYPE="ext4" PARTLABEL="datadisk" PARTUUID="132afb98-39df-4c16-b0e1-6f6a79d40349" 

[root@localhost ~]# vim /etc/fstab ###add  ############input
UUID=6aad1477-02f0-4de5-94eb-6ac9b9e06e53   /data                   ext4    defaults        0 0 ############input

[root@localhost ~]# mount -a ############input
[root@localhost ~]# df -h ############input
Filesystem             Sd/dev/mapper/cl00-root   50G  1.3G   49G   3% /
........
/dev/sda1              5.8T   89M  5.5T   1% /data ############input

[root@localhost ~]# ls /data ############input
lost+found

####parted fdisk big than 2TB disk##

###forget reset centos7 password
--10 https://www.unixmen.com/reset-root-password-centos-7/

--20 
1 – In the boot grub menu select option to edit.
2 – Select Option to edit (e).
3 – Go to the line of Linux 16 and change ro with rw init=/sysroot/bin/sh     ####KEY STEP
4 – Now press Control+x to start on single user mode.
5 – Now access the system with this command.
chroot /sysroot
6 – Reset the password.
passwd root
7 – Update selinux information
touch /.autorelabel
8 – Exit chroot
exit
9 – Reboot your system
reboot
###forget reset centos7 password



####kernel harden security audit 
--10
 $ cat /etc/pam.d/system-auth
#%PAM-1.0
# This file is auto-generated.
# User changes will be destroyed the next time authconfig is run.
auth     required       pam_tally2.so deny=5 even_deny_root unlock_time=60  ####HARDEN
auth        required      pam_env.so
auth        sufficient    pam_unix.so nullok try_first_pass
auth        requisite     pam_succeed_if.so uid >= 1000 quiet_success
auth        required      pam_deny.so

account     required      pam_unix.so
account     sufficient    pam_localuser.so
account     sufficient    pam_succeed_if.so uid < 1000 quiet
account     required      pam_permit.so

password required         pam_cracklib.so minclass=3                          ###HARDEN
password    requisite     pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type=
password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok
password    required      pam_deny.so

session     optional      pam_keyinit.so revoke
session     required      pam_limits.so
-session     optional      pam_systemd.so
session     [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uid
session     required      pam_unix.so

--15 sed with insert/append line before(after) match lin
--syntax sed -i "/matched line/operator(a,i,A,I..ETC) newline" FILE
sed -i.bak "/#%PAM-1.0/a auth       substack     system-auth" sshd
sed -i "/account    required     pam_nologin.so/a account    include      system-auth" sshd
sed -i "/password   include      password-auth/a password   include      system-auth" sshd
sed -i "/session    required     pam_selinux.so close/a session    include      system-auth" sshd

sed -i.bak "/# User changes will be destroyed the next time authconfig is run./a auth     required       pam_tally2.so deny=5 even_deny_root unlock_time=60" system-auth
sed -i "/password    requisite     pam_pwquality\.so try_first_pass local_users_only retry=3 authtok_type=/i password required         pam_cracklib\.so minclass=3" system-auth


--20 
# tail -n 3 /etc/bashrc
export HISTTIMEFORMAT="%F %T "                                                                                  
export PROMPT_COMMAND='RETRN_VAL=$?;logger -p local6.debug "$(who am i) [$$]: $(history 1 | sed "s/^[ ]*[0-9]\+[ ]*//" ) [$RETRN_VAL]"'                                              
--25 sed with escaped char insert(insert to last 2 line \$i,double quote as delimit char)
==PATT FIRST \$i represent insert in last line
==char $ \ / ' "  . ( [ MUST escaped by \,other special char not need 

sed -i "\$iexport PROMPT_COMMAND=\'RETRN_VAL=\$?;logger -p local6\.debug \"\$\(who am i\) \[\$\$]: \$\(history 1 | sed \"s/^\[ ]\*\[0-9]\+\[ ]\*//\" \) \[\$RETRN_VAL]\"\' " /etc/bashrc
# vim:ts=4:sw=4


--30
tail -n 1 /etc/profile
export TMOUT=1800

--40 
# cat /etc/rsyslog.conf |grep local6
local6.*                                                 /var/log/bash_history.log

--45       logrotate 
# cat /etc/logrotate.d/syslog 
......                                       ####omit staff 
/var/log/bash_history.log                    ####add log file here
{
missingok
sharedscripts
postrotate
/bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true
endscript
}

--50
# cat /etc/pam.d/sshd 
#%PAM-1.0
auth       substack     system-auth                 ###HARDEN
auth       required     pam_sepermit.so
auth       substack     password-auth
auth       include      postlogin
# Used with polkit to reauthorize users in remote sessions
-auth      optional     pam_reauthorize.so prepare
account    required     pam_nologin.so
account    include      system-auth                 ###HARDEN

account    include      password-auth
password   include      password-auth
password   include      system-auth                 ###HARDEN
# pam_selinux.so close should be the first session rule
session    required     pam_selinux.so close
session    include      system-auth                ###HARDEN
session    required     pam_loginuid.so
# pam_selinux.so open should only be followed by sessions to be executed in the user context
session    required     pam_selinux.so open env_params
session    required     pam_namespace.so
session    optional     pam_keyinit.so force revoke
session    include      password-auth
session    include      postlogin
# Used with polkit to reauthorize users in remote sessions
-session   optional     pam_reauthorize.so prepare



--60 all-in-one command collection

sed -i.bak "/#PermitRootLogin yes/a PermitRootLogin no" /etc/ssh/sshd_config
systemctl restart sshd
sed -i.bak "$ i export TMOUT=1800" /etc/profile
sed -i.bak "/#%PAM-1.0/a auth       substack     system-auth" /etc/pam.d/sshd
sed -i "/account    required     pam_nologin.so/a account    include      system-auth" /etc/pam.d/sshd
sed -i "/password   include      password-auth/a password   include      system-auth" /etc/pam.d/sshd
sed -i "/session    required     pam_selinux.so close/a session    include      system-auth" /etc/pam.d/sshd
sed -i.bak "/# User changes will be destroyed the next time authconfig is run./a auth     required       pam_tally2.so deny=5 even_deny_root unlock_time=60" /etc/pam.d/system-auth
sed -i "/password    requisite     pam_pwquality\.so try_first_pass local_users_only retry=3 authtok_type=/i password required         pam_cracklib.so minclass=3" /etc/pam.d/system-auth
sed -i "\$i export HISTTIMEFORMAT=\"%F %T \""  /etc/bashrc
sed -i "\$iexport PROMPT_COMMAND=\'RETRN_VAL=\$?;logger -p local6\.debug \"\$\(who am i\) \[\$\$]: \$\(history 1 | sed \"s/^\[ ]\*\[0-9]\+\[ ]\*//\" \) \[\$RETRN_VAL]\"\' "  /etc/bashrc
source /etc/bashrc
echo "local6.*    /var/log/bash_history.log" >/etc/rsyslog.d/bash.conf
sed -i.bak "/{/i/var/log/bash_history.log" /etc/logrotate.d/syslog
chmod 600 /var/log/cron
chmod 600 /var/log/message
chmod 600 /var/log/secure
systemctl restart rsyslog


####kernel harden

find file operation time in minute

find . -mmin -5 ###files created in 5 minutes
####find with  xargs echo empty to multiple  logfile
# find ./ -type f |grep -E '^./s.*.sh'|xargs -t -I {} bash -c 'echo  > {}'
bash -c echo  > ./security.sh 
bash -c echo  > ./s1.sh 
bash -c echo  > ./s2.sh 
bash -c echo  > ./s3.sh 

or 
find . -type d -name "*log*" | xargs -I {} sh -c "echo {}; ls -la {} | tail -2"


https://serverfault.com/questions/722287/why-use-bash-c-in-supervisor-instead-of-calling-script-directly

Shell features such as pathname expansion (*, ?), command lists (;, &&, ||), redirection (<, >, |,) are not implemented by supervisord that only splits the command into an array of argument strings.

The bash -c may be just a help for novice user who might be tempted to use such features in the command. For example it avoids the surprise that

command=echo foo > /tmp/bar

outputs foo > /tmp/bar instead of writing foo to /tmp/bar.

-c has little to do with variables. Any additional arguments to the bash would only be available as script arguments $0, $1, etc. in the command, but that feature has seldom any use. For example bash -c 'echo $0 $0' foo outputs foo foo.

####



####security audit
--00 check,interactive,improve url function

--10 install 
git clone https://github.com/CISOfy/lynis
or https://downloads.cisofy.com/lynis/lynis-2.6.9.tar.gz

--20 run on console
./lynis audit system

--30 logs
cat /var/log/lynis.log

--40 redirect to file 
./lynis audit system >result

--50 view result 
cat result|more
cat /var/log/lynis-report.dat

--55 interactive test 
sudo ./lynis audit system --wait

--58 help
sudo ./lynis 

--60
https://www.linuxtechi.com/lynis-security-auditing-tool-linux-servers/
https://github.com/CISOfy/lynis
####security audit

######
#tar some file find filter pick up 
==tested
find ./ -maxdepth 1 -type f -name "*.txt"|xargs -p -t tar vzcf txt.tar.gz  ###not work!!!
==tested

--10 xargs process 
find ./ -mtime -77 -type f -print0 |xargs -0 -P 1 -n 1 -I {} tar vzcf a.tar.gz {}
find ./ -regextype posix-extended -iregex "./an.*$|./au.*$" -print0|xargs -t -0 -I {} tar vrf a.tar {} && tar vzcf a.tar.gz a.tar && rm -fv rm a.tar
--20 pipe process --null -T read relative  find print0 generated output 
--/dev/stdin or - receive find output 
find ./ -mmin -3 -print0| tar -czvf a.tar.gz  --null -T /dev/stdin ##no xargs
find ./ -mmin -3 -print0| tar -czvf a.tar.gz  --null -T -   ##no xargs;--null -T,null as delimiter;last - is /dev/stdin from find
######


###ubuntu basic
10 nano meta key 
^ represent Ctrl
^+O save
^+X exit
...

20 set ip
$ cat /etc/network/interfaces
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto enp0s3
#iface enp0s3 inet dhcp
iface enp0s3 inet static
address 10.0.0.9
netmask 255.255.255.0
gateway 10.0.0.1
dns-nameserver 8.8.8.8

$sudo ip flush enp0s3 && sudo systemctl restart networking.service


30 ssh
sudo apt-get install openssh-server

sudo service ssh restart

sudo service ssh status


40 firewall


sudo ufw allow 22
sudo ufw allow 6000:6007/tcp
sudo ufw allow from 15.15.15.51
sudo ufw allow from 15.15.15.51 to any port 22
sudo ufw allow from 15.15.15.0/24 to any port 22

sudo ufw status numbered
Status: active

To                         Action      From
--                         ------      ----
[ 1] 22                         ALLOW IN    15.15.15.0/24
[ 2] 80                         ALLOW IN    Anywhere
sudo ufw delete 2

sudo ufw delete allow http
sudo ufw delete allow 80

sudo ufw status verbose
sudo ufw disable
sudo ufw enable 

sudo ufw reset ####danger
This will disable UFW and delete any rules that were previously defined. Keep in mind that the default policies won't change to their original settings, if you modified them at any point. This should give you a fresh start with UFW.

50 install docker
https://phoenixnap.com/kb/how-to-install-docker-on-ubuntu-18-04

$> sudo apt-get update
$> sudo apt-get remove docker docker-engine docker.io
$> sudo apt install docker.io
$> sudo systemctl start docker
$> sudo systemctl enable docker
$> sudo mv /home/user/docker-compose /bin/docker-compose

60 install zabbix agentd
https://computingforgeeks.com/install-and-configure-zabbix-agent-on-ubuntu/

$> wget https://repo.zabbix.com/zabbix/4.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_4.0-3+xenial_all.de 
$> sudo dpkg -i zabbix-release_4.0-3+xenial_all.deb
$> sudo apt update
$> sudo apt install zabbix-agent
$> sudo vim /etc/zabbix/zabbix_agentd.conf
$> sudo systemctl restart zabbix-agent
$> sudo ufw allow 10050/tcp


70 download package
https://ostechnix.com/download-packages-dependencies-locally-ubuntu/
https://fabianlee.org/2016/07/27/ubuntu-installing-packages-without-public-internet-access/
http://manpages.ubuntu.com/manpages/bionic/man8/apt-offline.8.html
 
$> apt-get install --download-only pppoe ##online vm
$> ls /var/cache/apt/archives/        ###saved path
$> cp to offline vm path /var/cache/apt/archives/
$> cd /var/cache/apt/archives/ && sudo  dpkg -i *

or--
dpkg -l | grep "^ii"|grep vim| xargs sudo apt-get -y --force-yes install --reinstall --download-only


###ubuntu basic


#crontab problem log 
cat /var/spool/mail/root    #######command
From root@serverName.localdomain  Fri Jul 20 05:00:02 2018
Return-Path: <root@serverName.localdomain>
X-Original-To: root
Delivered-To: root@serverName.localdomain
Received: by serverName.localdomain (Postfix, from userid 0)
id 009313073AAB; Fri, 20 Jul 2018 05:00:01 +0800 (CST)
From: "(Cron Daemon)" <root@serverName.localdomain>
To: root@serverName.localdomain
Subject: Cron <root@serverName>       /path/2/script.sh
Content-Type: text/plain; charset=UTF-8
Auto-Submitted: auto-generated
Precedence: bulk
X-Cron-Env: <XDG_SESSION_ID=33852>
X-Cron-Env: <XDG_RUNTIME_DIR=/run/user/0>
X-Cron-Env: <LANG=en_US.UTF-8>
X-Cron-Env: <SHELL=/bin/bash>
X-Cron-Env: <PATH=/sbin:/bin:/usr/sbin:/usr/bin>
X-Cron-Env: <MAILTO=root>
X-Cron-Env: <HOME=/root>
X-Cron-Env: <LOGNAME=root>
X-Cron-Env: <USER=root>
Message-Id: <20180719210002.009313073AAB@serverName.localdomain>
Date: Fri, 20 Jul 2018 05:00:01 +0800 (CST)
               #####error message 
/bin/bash: /path/2/script.sh: bin/bash: bad interpreter: No such file or directory
#crontab problem log 

##########centos install iftop####
$>yum install -y epel-release
$>yum install -y iftop

$>iftop -n -P -o 10 ##-o 10 IntervalBy 10s,-P pid -n no-dns-lookup
##########centos install iftop####
####php nginx opt###
$>cat /usr/local/nginx/conf/nginx.conf
......
location ~ \.php$ {
    root           html;
    proxy_set_header Host $host;
    proxy_set_header            X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP $remote_addr;
    fastcgi_pass   127.0.0.1:9000;
    fastcgi_index  index.php;
    fastcgi_param  SCRIPT_FILENAME  /path/2/$fastcgi_script_name;
    include        fastcgi_params;
    fastcgi_connect_timeout 60;    #####from here to end
    fastcgi_send_timeout 180;
    fastcgi_read_timeout 180;
    fastcgi_buffer_size 128k;
    fastcgi_buffers 256 16k;
    client_body_buffer_size 1024k;    
}
......

$> cat php.ini 
memory_limit = 512M  ####default is 128M,assign as much as you need

####php nginx opt###



#####cggroup resource restrict###########
$>  cat /usr/lib/systemd/system/mongod.service
[Unit]
......

[Service]
CPUShares=2048            ####default is 1024
MemoryLimit=1G
BlockIOWeight=500        ####valid from 10 to 1000?
......

#####cggroup resource restrict###########

ln -s /usr/local/mongod/bin/* /bin 

#####lsof##########
##list Michael's bash command 
$> lsof -c bash -u Michael -a
COMMAND   PID    USER   FD   TYPE DEVICE  SIZE/OFF      NODE NAME
bash    34695 Michael  cwd    DIR  253,0      4096  67549910 /home/Michael
bash    34695 Michael  rtd    DIR  253,0      4096       192 /
bash    34695 Michael  txt    REG  253,0    960472  34538199 /usr/bin/bash
bash    34695 Michael  mem    REG  253,0 106070960  67169099 /usr/lib/locale/locale-archive
bash    34695 Michael  mem    REG  253,0     62184  67881687 /usr/lib64/libnss_files-2.17.so

##list Michael's or bash command
$> lsof -c bash -u Michael

##list TCP listen 
$> lsof -i :22
COMMAND   PID    USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME
sshd    34686    root    3u  IPv4 12012985      0t0  TCP Srv:22->client:59416 (ESTABLISHED)
sshd    34691    root    3u  IPv4 12014314      0t0  TCP Srv:22->client:59426 (ESTABLISHED)
sshd    34694 Michael    3u  IPv4 12012985      0t0  TCP Srv:22->client:59416 (ESTABLISHED)
sshd    34721 Michael    3u  IPv4 12014314      0t0  TCP Srv:22->client:59426 (ESTABLISHED)
sshd    52535    root    3u  IPv4 14630580      0t0  TCP *:ssh (LISTEN)
sshd    52535    root    4u  IPv6 14630582      0t0  TCP *:ssh (LISTEN)

$> lsof -i @client-ip-address(i.e 10.0.1.3)
COMMAND   PID    USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME
sshd    34686    root    3u  IPv4 12012985      0t0  TCP Srv:22->client:59416 (ESTABLISHED)
sshd    34691    root    3u  IPv4 12014314      0t0  TCP Srv:22->client:59426 (ESTABLISHED)
sshd    34694 Michael    3u  IPv4 12012985      0t0  TCP Srv:22->client:59416 (ESTABLISHED)
sshd    34721 Michael    3u  IPv4 12014314      0t0  TCP Srv:22->client:59426 (ESTABLISHED)
#####lsof##########

sed insert somethin into a file from before-last-three-lines
tac anaconda-ks.cfg |sed -e '3i3rdNEW LINE!' |tac >>index.php && mv -fv index.php anaconda-ks.cfg 
#####strace##########
strace -f -r -s 30 -o debug.log  -e trace=file \
/path/2/cmd -f /path/2/conf --args 

-f follow forks
-r relative time 
-s char number 
-e trace filter
-o save to file 

PATT:exec native cmd instead service or systemctl
to get more exactly info
#####strace##########

###Centos 7 opt####
--10 set somaxconn
#> sysctl -a|grep somaxconn
net.core.somaxconn = 32768

#> grep -v '#' /etc/sysctl.conf 
net.core.somaxconn=32768
net.ipv4.tcp_tw_recycle=1
net.ipv4.tcp_tw_reuse=1 

--20 set open files
#> cat /etc/security/limits.conf |grep -v '#'

*              hard     nofile        4096
*              soft     nofile        4096

###Centos 7 opt####

####sed and vim regex#####
--05 sed cmd  
sed -En 's/(12|34|56)(abc){1,3}[a-d]/num/p' 
()represented group
[]represented list
{}represented repeat

vim extended regex mode
--10 vim cmd

:%s:\v(12|34)(abc){1}[a-d]:NumB:g
key is \v represented extended mode 
--20
orgin
1 12abcd1
2 34abcabce2
3 56abcabcabcd3
4 34abcabce4
5 56abcabcabc1    
--30
processed
1 NumB1
2 NumBbce2
3 56abcabcabcd3
4 NumBbce4                                                                                                                
5 56abcabcabc1


vim zero-width assertions
:help \@
\@=     Matches the preceding atom with zero width. {not in Vi}
Like "(?=pattern)" in Perl.
Example                 matches  
foo\(bar\)\@=           "foo" in "foobar"
foo\(bar\)\@=foo        nothing

---link: https://quickteckiteasy.blogspot.com.au/2011/06/vim-search-with-zero-width.html
\@=   Zero-width positive look ahead assertion 
\@!   Zero-width negative look ahead assertion
\@<=  Zero-width positive look behind assertion
\@<!  Zero-width negative look behind assertion

--100 orgin
7 xxxyyy                                                                                                                  
8 yyyxxx
9 xxx yyy
10 yyy xxx
11 xxxyyyxxx
12 yyyxxxyyy

--110   
vim-cmd  %s:xxx\(yyy\)\@=:3x-Followed-3y:g

Result:

7 3x-Followed-3y-yyy
8 yyyxxx
9 xxx yyy
10 yyy xxx
11 3x-Followed-3y-yyyxxx
12 yyy-3x-Followed-3y-yyy  

--120
vim-cmd  %s:xxx\(yyy\)\@!:3x-not-Followed-3y:g

Result:

7 xxxyyy
8 yyy-3x-not-Followed-3y
9 3x-not-Followed-3y yyy
10 yyy 3x-not-Followed-3y
11 xxxyyy-3x-not-Followed-3y                                                                                            
12 yyyxxxyyy


--100 orgin
7 xxxyyy                                                                                                                  
8 yyyxxx
9 xxx yyy
10 yyy xxx
11 xxxyyyxxx
12 yyyxxxyyy

--130 
vim-cmd  %s:\(yyy\)\@<!xxx:3x-NotPrecededWith-3y:g

Result:

7 3x-NotPrecededWith-3y-yyy
8 yyyxxx
9 3x-NotPrecededWith-3y yyy
10 yyy 3x-NotPrecededWith-3y
11 3x-NotPrecededWith-3y-yyyxxx                                                                                                 
12 yyyxxxyyy

--140
vim-cmd  %s:\(yyy\)\@<=xxx:3x-PrecededWith-3y:g

Result:

7 xxxyyy
8 yyy-3x-PrecededWith-3y
9 xxx yyy
10 yyy xxx
11 xxxyyy-3x-PrecededWith-3y
12 yyy-3x-PrecededWith-3y-yyy    

####sed and vim regex#####

######去掉windows下的回车符（^M 写法 ^M 是回车换行符,先CTRL+v,松开v,按m)
1)sed -i 's/^M//g' filename

2) 在vim下类似(probably not take effect yet)

:%s/^M//g
######去掉windows下的回车符（^M 写法 ^M 是回车换行符,先CTRL+v,松开v,按m)



#######linux add to Windows AD#######
--05 set dns server
at /etc/resolv.conf 
nameserver 172.16.1.1   ###172.16.1.1 is your AD DNS server 
nameserver 8.8.8.8      ###public DNS server

--10 install package
#>yum -y install adcli sssd authconfig

--20 setup logon auth to AD
#>authconfig --enablesssd \
--enablesssdauth \
--enablemkhomedir \
--update

--30 add to domain (MUST domain Admin user) ##Your_password can used by "$x" in shell script  
echo -n 'Your_passw0$d'|adcli join --login-user=domain_admin domain.name --stdin-password

--40 vim /etc/sssd/sssd.con
[sssd]
domains = domain.name 
config_file_version = 2
services = nss, pam
[domain/domain.name]
ad_domain = domain.name
krb5_realm = domain.name
realmd_tags = manages-system joined-with-samba
cache_credentials = True
id_provider = ad
krb5_store_password_if_offline = True
default_shell = /bin/bash
ldap_id_mapping = True
use_fully_qualified_names = False
fallback_homedir = /home/%d/%u
access_provider = ad

--50 setup sssd.conf permissions
#>chmod 600 /etc/sssd/sssd.conf 

--60 start sssd
service sssd start /systemctl start sssd
chkconfig --add sssd && chkconfig sssd on /systemctl enable sssd

--70 check 
#>id domain\\user

uid=985001104(user) gid=985000513(domain users) groups=985000513(domain users),985000512(domain admins)

#######linux add to Windows AD#######


####here documented in bash script#######
--10 bash script  
#> cat change-user-password.sh 
#!/bin/bash
cat <<eof|passwd $1
$2
$2
eof

--20 call 
#> sh -x change-user-password.sh zhang bcd-pa
+ cat
+ passwd zhang
Changing password for user zhang.
New password: BAD PASSWORD: The password is shorter than 7 characters
Retype new password: passwd: all authentication tokens updated successfully.

####here documented in bash script#######


########How to create and format a partition using a bash script?
Similar to the previous suggestions, piping commands to fidsk, I've found 
this approach useful to leave details for subsequent maintainers. The sed
bits strip off all the comments before fdisk gets the input.

# to create the partitions programatically (rather than manually)
# we're going to simulate the manual input to fdisk
# The sed script strips off all the comments so that we can 
# document what we're doing in-line with the actual commands
# Note that a blank line (commented as "defualt" will send a empty
# line terminated with a newline to take the fdisk default.
sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk ${TGTDEV} ###here documented 
o # clear the in memory partition table
n # new partition
p # primary partition
1 # partition number 1
# default - start at beginning of disk 
+100M # 100 MB boot parttion
n # new partition
p # primary partition
2 # partion number 2
# default, start immediately after preceding partition
# default, extend partition to end of disk
a # make a partition bootable
1 # bootable partition is partition 1 -- /dev/sda1
p # print the in-memory partition table
w # write the partition table
q # and we're done
EOF

############https://superuser.com/questions/332252/how-to-create-and-format-a-partition-using-a-bash-script

############Linux script with curl to check webservice is up 
link:https://stackoverflow.com/questions/12747929/linux-script-with-curl-to-check-webservice-is-up
curl -sL -w "%{url_effective} %{remote_ip} %{http_code}\\n" "http://www.google.com/" -o /dev/null

-s = Silent cURL's output
-L = Follow redirects
-w = Custom output format
-o = Redirects the HTML output to /dev/null

Example:

[~]$ curl -sL -w "%{url_effective} %{remote_ip} %{http_code}\\n" "http://www.google.com/" -o /dev/null
https://www.google.com 1.2.3.4 200

I would probably remove the \\n if I were to capture the output.



Also of note: the \\n (escaped backslash) is only required if you're using bash as your shell interactively, but
if you put this in a script OR you use tcsh you should use \n instead. This is a quoting issue; the command line 
works the same in both shells, interactively and in scripts if you use single quotes instead, 
à la: '%{http_code}\n' Probably best for consistency to use that instead.



############Linux script with curl to check webservice is up 


#####non-greedy and backreference in vim ########
--10 orgin text 
%network-add %network-mask 
%public-interface% and mask                                                                                                                                                          

--20 processed text      
%network-add% %network-mask% 
%public-interface% and mask                                                                                                                                                               

--30 vim command 
1,2s:\(%.\{-}\)\s:\1% :g


--40 explain 
1,2 Execute lines 
s:replace meta char

\(%.\{-}\)\s:\1%  replace begin with % after some char with first space to those staff add % 
\(\)  is backreference define \1 is reference
.\{-} is non-greedy match 

#####non-greedy and backreference in vim ########

####sed append newline after some pattern
#---10 here append set -u AFTER #!/bin/bash
sed -i 's:#!/bin/bash:#!/bin/bash\nset -u:g' somefile
####sed append newline after some pattern

####bash shell safe 
set -u  ###Meaning if some undefine while being call will exit shell
####that protect some accident 
####bash shell safe


####sed tip
replace all abc to def of files in current path 
$>find ./ -type f|xargs -t -P 1 -n 1 -i sed -i 's:abc:def:g'

append multiple line after pattern
$>sed -i "/abc/aI-add-three\nline\n\'s" files

insert multiple line before pattern
$>sed -i "/abc/iI-add-three\nline\n\'s" files
####sed tip


#######install crontab on centos 6/7
Link:https://stackoverflow.com/questions/21802223/how-to-install-crontab-on-centos
As seen in Install crontab on CentOS, the crontab package in CentOS is vixie-cron. Hence, do install it with:

yum install vixie-cron
And then start it with:

service crond start
To make it persistent, so that it starts on boot, use:

chkconfig crond on
On CentOS 7 you need to use cronie:

yum install cronie
On CentOS 6 you can install vixie-cron, but the real package is cronie:

yum install vixie-cron
and

yum install cronie
In both cases you get the same output:

.../...
==================================================================
Package         Arch       Version         Repository      Size
==================================================================
Installing:
cronie          x86_64     1.4.4-12.el6    base             73 k
Installing for dependencies:
cronie-anacron  x86_64     1.4.4-12.el6    base             30 k
crontabs        noarch     1.10-33.el6     base             10 k
exim            x86_64     4.72-6.el6      epel            1.2 M

Transaction Summary
==================================================================
Install       4 Package(s)
As seen in Install crontab on CentOS, the crontab package in CentOS is vixie-cron. Hence, do install it with:

$>yum install vixie-cron
And then start it with:

service crond start
To make it persistent, so that it starts on boot, use:

$>chkconfig crond on
On CentOS 7 you need to use cronie:

$>yum install cronie
On CentOS 6 you can install vixie-cron, but the real package is cronie:

$>yum install vixie-cron
and

$>yum install cronie
In both cases you get the same output:

.../...
==================================================================
Package         Arch       Version         Repository      Size
==================================================================
Installing:
cronie          x86_64     1.4.4-12.el6    base             73 k
Installing for dependencies:
cronie-anacron  x86_64     1.4.4-12.el6    base             30 k
crontabs        noarch     1.10-33.el6     base             10 k
exim            x86_64     4.72-6.el6      epel            1.2 M

Transaction Summary
==================================================================
Install       4 Package(s)

#######install crontab on centos 6/7






###find out the biggest file in current folder (exclude .snapshots)
find . -name .snapshots -prune -o -type f -print0 2>/dev/null |xargs -0 du 2>/dev/null |sort -nr|head -n 1
###find out the biggest file in current folder

#####grep or#####
1 grep -E 'condition1|condition2' some-text
2 grep 'condition1\|condition2' some-text
#####grep or#####

####detect ssh tunnel failed restart ssh shell

#!/bin/bash
if  curl -IL hostname.example.com|grep "Bad Gateway"
then
ssh -R external-port:internal-ip:internal-port -N -q -f -C -i rsa-key ssh-tunnel-user@external-ip-or-domain
fi

####detect ssh tunnel failed restart ssh shell


####get date from timestamp
# date -d @1267619929
Wed Mar  3 07:38:49 EST 2010
####get timestamp from date
> date -d '2012-03-22 22:00:05 EDT' +%s
1332468005
> date +%s
1519889699



####get endpoint automated
$>cat vm.txt
1 vm1
2 vm2

$>awk '{print $2}' vm.txt |xargs -t -P 1 -n 1 -i  azure vm endpoint list {} &>endpoint
####get endpoint automated





####find out Linux: Most recent file in a directory
It seems that ls doesn't sort the files correctly when doing a recursive call:
$>ls -Art | tail -n 1

or

https://stackoverflow.com/questions/4561895/how-to-recursively-find-the-latest-modified-file-in-a-directory
$>find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "

For a huge tree, it might be hard for sort to keep everything in memory.
%T@ gives you the modification time like a unix timestamp, sort -n sorts numerically, tail -1 takes the last line (highest timestamp), cut -f2 -d" " cuts away the first field (the timestamp) from the output.
Edit: Just as -printf is probably GNU-only, ajreals usage of stat -c is too. Although it is possible to do the same on BSD, the options for formatting is different (-f "%m %N" it would seem)
And I missed the part of plural; if you want more then the latest file, just bump up the tail argument.
####find out Linux: Most recent file in a directory





####ssh tunnel with security
1 add user without sudo
2 ssh_config AllowUser sombody@some_specific_IP and other user AllowUser otheruser@*
3 client upload  rsa key to this user/ssh-copy-id -i someRSA somebody@server 
4 usermod -s /sbin/nologin
5 systemctl restart sshd/service sshd restart

6
AutoRestart on Crontab
# cat /path/2/auto-restart-ssh-tunnel.sh 
#!/bin/bash
if ! ps -ef |grep [5]618 2>&1 >/dev/null
##PATT 5618 MUST THE WHOLE FIELD,IF USE [5]61,WILL GET WRONG RESULT??
then

ssh -p 5618 -i .ssh/your-rsa -NCfqL 23306:localhost:3306 somebody@server
fi

7
verify on centos 6.5

####ssh tunnel with security


####route persist
持久化：（自定义路由出接口时172.16.0.11，172.16.0.12）
Option 1, include the below in /etc/sysconfig/network-scripts/route-eth0 file: –

GATEWAY0=172.16.0.11
NETMASK0=255.255.255.0
ADDRESS0=10.0.1.0

GATEWAY1=172.16.0.12
NETMASK1=255.255.255.0
ADDRESS1=10.20.30.0

下面这个更简单
Option 2, include the below in /etc/sysconfig/network-scripts/route-eth0 file: –
10.0.1.0/24 via 172.16.0.11 dev eth0
10.20.30.0/24 via 172.16.0.12 dev eth0

####route persist



###########OpenSSH Change a Passphrase With ssh-keygen command
https://www.unixtutorial.org/changing-passphrase-to-your-ssh-private-key
#No Way To Recover Forgotten Passphrase

ssh-keygen -f id_dsa -p

###########OpenSSH Change a Passphrase With ssh-keygen command


#############################
#stress test memory cpu disk#
#############################
##############################
1) yum install stress

2) stress-ng --cpu 4 --io 2 --vm 1 --vm-bytes 1G --timeout 60s




#############################
#stress test memory cpu disk#
#############################



#####ssh/config example######
ForwardAgent yes                                                                          
ControlMaster auto
ControlPath /tmp/ssh_mux_%h_%p_%r

Host                  prefix-hostname1
Hostname              4.19.14.4
User                  username
Port                  6001
IdentityFile          ~/privity-key

Host                  prefix2-hostname2
Hostname              10.0.2.16
User                  username  
IdentityFile          ~/privity-key-2

Host                  prefix-hostname3
Hostname              example.cn  
Port                  3021
User                  username
IdentityFile          ~/privity-key


connect example:
$>ssh prefix-hostname1
##############################
#####.ssh/config example######

###Linux inital install
install and config tmux
install and config screen
instll gcc gcc++ autoconf automake 
install and config zabbix_client
install and config lsyncd
config timezone
config backup
config opt file-system tcp stack
config python ansible lib
config vimrc
config bashrc
config sshd_config
config ssh_key
config yum repo
yum update
install nc
reboot

###Linux inital install

####top tips
3. Display Specific User Process  
$ top -u tecmint
5. Display All CPUs / Cores in the Top Output – Press 1 (one)Top output by default shows CPU line for all the CPUs combined together as shown below

6. Refresh Unix Top Command Output On demand (or) Change Refresh IntervalBy default, linux top command updates the output every 3.0 seconds. When you want to update the output on-demand, press space bar.

7. Highlight Running Processes in the Linux Top Command Output – Press z or bPress z or b, which will highlight all running process as shown below.

13. Decrease Number of Processes Displayed in Top Output – Press nPress n in the Interactive mode, which prompts for a number and shows only that. Following example will display only 2 process as a time.



To display the top 15 processes sorted by memory use in descending order, do:
$ top -b -o +%MEM | head -n 22
As opposed to the previous tip, here you have to use +%MEM (note the plus sign) to sort the output in descending order:
From the command above, the option:

1. -b : runs top in batch mode
2. -o : used to specify fields for sorting processes
3. head utility displays the first few lines of a file and
4. the -n option is used to specify the number of lines to be displayed.


####top tips








############server opt 优化 系统 TCP/IP栈 内存 文件
From here https://tweaked.io/guide/kernel/
Practice https://www.researchgate.net/publication/267253313_Tuning_the_Linux_Kernel

File Handle LimitsWhen you're serving a lot of traffic it is usually the case that the traffic you're serving is coming from a large number of local files.
The kernel has built-in limits on the number of files that a process can open, and raising these limits, at a cost of some system memory, is usually a sane thing to attempt.
You can view the current limit on the number of open-files by running:
cat /proc/sys/fs/file-max

The limit can be raised interactively by running, as root:
# sysctl -w fs.file-max=100000

If you wish that change to be made persistently you should append to the file /etc/sysctl.conf the line:
fs.file-max = 100000

Then run the following command to make your change take effect:
# sysctl -p

Socket TuningFor servers which are handling large numbers of concurent sessions, there are some TCP options that should probabaly be tweaked.
With a large number of clients comnunicating with your server it wouldn't be unusual to have a 20,000 open sockets or more. To increase that range you append the following to the bottom of /etc/sysctl.conf:
# Use the full range of ports.
net.ipv4.ip_local_port_range = 1024 65535

You can also increase the recycling time of sockets, avoiding large numbers of them staying in the TIME_WAIT status by adding these values to /etc/sysctl.conf:
# Enables fast recycling of TIME_WAIT sockets.
# (Use with caution according to the kernel documentation!)
net.ipv4.tcp_tw_recycle = 1

# Allow reuse of sockets in TIME_WAIT state for new connections
# only when it is safe from the network stack’s perspective.
net.ipv4.tcp_tw_reuse = 1

Finally one problem you'll find is that if a socket is listening and busy a connection-backlog will pile up. The kernel will keep pending connections in a buffer before failing. You can tweak several values to increase the size of the backlog:
#
# 16MB per socket - which sounds like a lot, but will virtually never
# consume that much.
#
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216

# Increase the number of outstanding syn requests allowed.
# c.f. The use of syncookies.
net.ipv4.tcp_max_syn_backlog = 4096
net.ipv4.tcp_syncookies = 1

# The maximum number of "backlogged sockets".  Default is 128.
net.core.somaxconn = 1024

The trade-off here is that a connecting client will see a slow connection, but this is almost certainly better than a Connection Refused error.
Once you've made those additions you can cause them to be loaded by running:
# sysctl -p

Finally if you've changed these limits you will need to restart the associated daemons. (For example "service nginx restart".)
Process SchedulerIf you're running a recent ( newer than approx 2.6.32) you've got the 'Completely Fair Scheduler' (CFS) For modern systems serving lots of connections on lots of cores, you may hit issues with process migration.
There's a kernel parameter that determines how long a migrated process has to be running before the kernel will consider migrating it again to another core. The sysctl name is sched_migration_cost_ns, default value 50000 (that's ns so 0.5 ms):
$ cat /proc/sys/kernel/sched_migration_cost_ns

(It was renamed from sched_migration_cost at some point between 3.5 and 3.8)
Forking servers, like PostgreSQL or Apache, scale to much higher levels of concurrent connections if this is made larger, by at least an order of magnitude:
The limit can be raised interactively by running, as root:
# sysctl -w kernel.sched_migration_cost_ns=5000000

If you wish that change to be made persistently you should append to the file /etc/sysctl.conf the line:
kernel.sched_migration_cost_ns = 5000000

Another parameter that can dramatically impact forking servers is sched_autogroup_enabled. This setting groups tasks by TTY, to improve perceived responsiveness on an interactive system. On a server with a long running forking daemon, this will tend to keep child processes from migrating away as soon as they should. It can be disabled like so:
# sysctl -w kernel.sched_autogroup_enabled=0

Various PostgreSQL users have reported (on the postgresql performance mailing list) gains up to 30% on highly concurrent workloads on multi-core systems.
If you wish that change to be made persistently you should append to the file /etc/sysctl.conf the line:
kernel.sched_autogroup_enabled = 0

Then run the following command to make your change take effect:
# sysctl -p

Filesystem TuningYou almost certainly want to disable the "atime" option on your filesystems.
With this disabled that the last time a file was accessed won't be constantly updated every time you read a file, since this information isn't generally useful inand causes extra disk hits, its typically disabled.
To do this, just edit /etc/fstab and add "notime" as a mount option for the filesystem. For example:
/dev/rd/c0d0p3          /test                    ext3    noatime        1 2


###before adjust
##use noop or deadline io scheduler 
# cat /sys/block/sda/queue/scheduler 
noop [deadline] cfq 
# cat /sys/block/sdc/queue/scheduler 
noop [deadline] cfq 
# cat /sys/block/sdd/queue/scheduler 
noop [deadline] cfq 
# cat /sys/block/sdd/queue/nr_requests 
128

DO NOT USE cfq scheduler 

###After adjust
# echo noop >/sys/block/sdc/queue/scheduler
# cat /sys/block/sdc/queue/scheduler
# [noop] deadline cfq 
# echo 10000 >/sys/block/sdd/queue/nr_requests
# echo 10000 >/sys/block/sdc/queue/nr_requests
# echo 10000 >/sys/block/sda/queue/nr_requests

############server opt



##########
echo "your-password" | passwd "your-user" --stdin

How to avoid being prompted for a password by sudo? [duplicate]


Note that this will produce an error if your sudo access token is active, if you don't need to enter your password because you've already done so recently. To get around that, you could use -k to reset the access token:

#######
echo 'password' | sudo -kS ls


　　使用 HISTCONTROL 强制 history 不记住特定的命令

　　将 HISTCONTROL 设置为 ignorespace，并在不想被记住的命令前面输入一个空格：

　　# export HISTCONTROL=ignorespace  可以使用ansible处理，处理后下次登录到服务器就生效  
ansible Grp -m lineinfile -a "dest=/etc/profile line='HISTCONTROL=ignorespace'" \
-f your-fork-number -u your-user --become --ask-pass --ask-sudo-pass

####set bash mode 设置bash模式
set -o vi
set -o emacs


########xargs 替换参数位置start##########
#>cat ip.txt
1
201
3
11
#> cat ip.txt |xargs -t -P 1 -n 1 -i  ping -c 1 10.0.1.{}

PING 10.0.1.1 (10.0.1.1)
PING 10.0.1.201 (10.0.1.201)
。。。。。。
########xargs 替换参数位置End######




#######################################
#######################################
###使用parallel并行处理######
-k后面的’与end后面的’之间直接可以运行多个命令，这些命令使用；区格；这些命令使用-k强制执行顺序相同
To force the output in the same order as the arguments use --keep-order/-k:
parallel -j64 -k 'printf "%s-start\n%s" {} {};
sleep {};printf "%s\n" -middle;echo {}-end' ::: 4 2 1
Output:
4-start
4-middle
4-end
2-start
2-middle
2-end
1-start
1-middle
1-end

--{} represented variables,after ::: the value of the variables list here--
$>time parallel -j8 -k 'ping -c 1 172.16.1.{}' ::: 10 20 118 136

$> time ll |grep 2020|awk '{print $9}'|parallel  -j 4 --keep-order  sha512sum {}  :::

Academic tradition requires you to cite works you base your article on.
......
To silence the citation notice: run 'parallel --bibtex'.

PING 172.16.1.10 (172.16.1.10) 56(84) bytes of data.

--- 172.16.1.10 ping statistics ---
1 packets transmitted, 0 received, 100% packet loss, time 0ms

PING 172.16.1.20 (172.16.1.20) 56(84) bytes of data.
From 172.16.1.156 icmp_seq=1 Destination Host Unreachable

--- 172.16.1.20 ping statistics ---
1 packets transmitted, 0 received, +1 errors, 100% packet loss, time 0ms

PING 172.16.1.118 (172.16.1.118) 56(84) bytes of data.
64 bytes from 172.16.1.118: icmp_seq=1 ttl=128 time=0.585 ms

--- 172.16.1.118 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.585/0.585/0.585/0.000 ms
PING 172.16.1.136 (172.16.1.136) 56(84) bytes of data.
64 bytes from 172.16.1.136: icmp_seq=1 ttl=128 time=1.13 ms

--- 172.16.1.136 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 1.138/1.138/1.138/0.000 ms

real    0m10.346s
user    0m0.294s
sys     0m0.139s



重定向错误到/dev/null
# time cat pl.txt |parallel -j 8 2>/dev/null 'echo -n "{} " ;curl -X GET -IL {}|grep HTTP'







####ping 172.16.21.1--11 success return 0;Failure return 1 
seq 1 11 | parallel -j 32 -k 'ping -c 1 172.16.21.{} &>/dev/null && echo 0 || ech
o 1'
Academic tradition requires you to cite works you base your article on.
When using programs that use GNU Parallel to process data for publication
please cite:

O. Tange (2011): GNU Parallel - The Command-Line Power Tool,
;login: The USENIX Magazine, February 2011:42-47.

This helps funding further development; and it won't cost you a cent.
If you pay 10000 EUR you should feel free to use GNU Parallel without citing.

To silence the citation notice: run 'parallel --bibtex'.

0
1
0
1
1
0
1
1
0
0
1

####ping 172.16.21.1--11 success return 0;Failure return 1 


GNU Parallel tutorial 精华 验证

man parallel_tutorial 手册

###使用parallel并行处理######
#######################################
######################################



#### ping youSite 端口80 直到成功才退出 #######

cat continue-test.sh
while true
do
nc -vz youSite.com 80 >/dev/null 2>&1 && break;
done

====##command line run
while true ;do echo>/dev/tcp/10.0.0.1/80 >/dev/null 2>&1 && break;done     ###successful exit
while true; do nc -vz ip-or-domain port >/dev/null 2>&1 && break; done
====###exit until failed
while true ;do echo>/dev/tcp/10.0.0.1/80 >/dev/null 2>&1 || break;done     ###fail exit
while true; do nc -vz ip-or-domain port >/dev/null 2>&1 || break; done

#### ping youSite 直到成功才退出 #######

#########vimrc###########
###########
$ cat .vimrc
set smartindent
set pastetoggle=<f5>
syntax enable
set tabstop=4
set softtabstop=4
set expandtab
set number
set showcmd
set cursorline
filetype indent on
set wildmenu
set showmatch
######

.vimrc 黏贴时先按F5
set pastetoggle=<f5>

or
:set paste
in vim

黏贴不自动indent
#########vimrc end########

##############SED 区间操作START############
##delete between #start and #stop
shell> sed -i '/#start/,/#stop/ d' someScript

##BEFORE DELETE
shell> cat someScript
#!/bin/bash
export
PATH=/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/bin
yum -y install ncurses-devel gcc gcc++ autoconf automake
/bin/mkdir -p /usr/local/screen
#start
/bin/tar zxf /tmp/screen.tar.gz -C /usr/local/screen
cd /usr/local/screen/v.4.3.1/src
./autogen.sh
./configure
make
#stop
rm /usr/bin/screen -f
ln -s /usr/local/screen/v.4.3.1/src/screen /usr/bin/screen

###AFTER DELETE
shell> cat someScript
#!/bin/bash
export
PATH=/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/bin
yum -y install ncurses-devel gcc gcc++ autoconf automake
/bin/mkdir -p /usr/local/screen
##############SED 区间操作END##############

侦测新网卡/虚拟机迁移后网卡变化解决处理
https://superuser.com/questions/332593/how-do-you-automatically-detect-a-new-network-card-in-centos-6-redhat

With CentOS 6 everthing is handled by udev now. Go into /etc/udev/rules.d and delete the 70-persistent-net.rules file and reboot. If you open it berfore hand you will most likey see the original NIC MAC listed as eth0 and the new one as eth1.

Now you need to edit /etc/sysconfig/network-scripts/ifcfg-eth0 and manually update to the MAC of your new NIC card.

Deleting the file forces the detection process to run again at boot with no baggage left over from the cloning process, namely the old NIC MAC address(es).

I have to do it with my CentOS 6 clones on VMware ESXi 4.1 all the time. It's a pain kudzu would just handle it in the past with previous versions.
编辑 /etc/udev/rules.d/70-persistent-net.rules 这个文件符合实际情况，然后重启。CentOS6.5验证成功。

CentOS6.5

####audit input审计键盘输入####
前提需要保证auditd服务处于运行状态
/etc/pam.d/system-auth添加下面这行
session required pam_tty_audit.so enable=*
在/etc/audit/audit.rules中加入
In /etc/audit/audit.rules we need to ensure that the following exists.

-a exit,always -F arch=b64 -S execve
-a exit,always -F arch=b32 -S execve
使用下面的方式查看
ausearch  -ui 502 -i    ##502是用户ID
ausearch -ui 501  -i |grep EXECVE -A 2 -B 2 --color

重新登录使用下面的方式查看
ausearch -m tty -i  ###过时？
azure centos 6.X成功
####audit input审计键盘输入####

########selinux排除故障#####
#安装文件
$yum -y install setroubleshooot setools
$yum -y install  yum -y install setroubleshoot-server ###centos 7.5 on azure ?
#分析得到的结果
$sealert -a /var/log/audit/audit.log

给selinux权限，持久化？
$semanage fcontext -a -t

#还原上面给的权限
$ restorecon -v

########selinux排除故障END#####

#########selinux持久化####

- Run the semanage fcontext -a options file-name|directory-name command, remembering to use the full path to the file or directory.  ##新增

- Run the restorecon -v file-name|directory-name command to apply the context changes.  ##生效

-  semanage fcontext -d "/web(/.*)?"  删除

semanage未安装 not found centos 6.x
yum install policycoreutils-python
系统安装sealter
yum install setroubleshoot setools
#########selinux持久化####

#########bash and expect###########
#!/bin/bash
Scp_ip()
{
cat /root/app.txt | while read line
do
(
/usr/bin/expect << EOF
set time 20
spawn scp /root/apache-tomcat-7.0.75.tar.gz root@$line:/root/
expect {
"*yes/no*"
  { send "yes\r";exp_continue }
"*password:"
  { send "Lh##U1H9Q"{}()\r"}
}
expect eof
EOF
) &>/dev/null

if [ $? -eq 0 ]
then
echo "复制文件到$line成功！"
else
echo "复制文件到$line失败！"
fi
done
}
Scp_ip

#########bash and expectEND#####

###AWK在bash script中调用bash变量#######
variable="line one\nline two"
awk -v var="$variable" 'BEGIN {print var}'
line one
line two
###AWK在bash script中调用bash变量END####

文本操作关键命令

Get-ChildItem -Recurse .\ |Where-Object {$_.Mode -eq "-a---"}|%{certutil -hashfile $_.FullName md5}|Select-String -Pattern "CertUtil: -hashfile
命令成功完成" -NotMatch

sed -e 's/^CertUtil:.*$//g' -e ':a;N;$!ba;s/\n/ /g' -e 's/MD5 哈希(文件 /\n/g' -e 's/ CertUtil: -hashfile 命令成功完成。//g' -e 's/): /\n):/g' 1.txt|sed -r '/^\):/ s/\ //g' |sed -e 's/)://g' -e 's/^/"/' -e 's/$/"/' |sed -e ':a;N;$!ba;s/\n/ /g' -e 's/"C:/\n"C:/g'|awk '-F " {print $4,$2}
###注意Linux中使用双引号（”）作为文件名 的包含符号
###awk -F ‘"’使用双引号作为分隔符号
###sed的条件操作
###sed的正则操作-r
###sed -e 有时会出错，只能使用多级管道？？？？
处理前：
MD5 哈希(文件 C:\yoursite\d2b-8057-5df9269e072b-包装有.txt):
c7 c5 46 f3 a0 e7 38 d1 bd d9 cb bb fc b3 d6 5b
CertUtil: -hashfile 命令成功完成。
MD5 哈希(文件 C:\yoursite\2af-bc7d-55c0bdb189c3-Scan.pdf):
3c 66 ed 12 42 49 8c 90 80 d3 c3 56 35 e1 56 5b
CertUtil: -hashfile 命令成功完成。
MD5 哈希(文件 C:\yoursite\e0975c3d22f-Scan1.pdf):
fd ef cf fb 3b 04 9c ae 43 33 77 3b 96 12 fe d9
CertUtil: -hashfile 命令成功完成。

处理后：
c7c546f3a0e738d1bdd9cbbbfcb3d65b C:\yoursite\d2b-8057-5df9269e072b-包装有.txt
3c66ed1242498c9080d3c35635e1565b C:\yoursite\2af-bc7d-55c0bdb189c3-Scan.pdf
fdefcffb3b049cae4333773b9612fed9 C:\yoursite\e0975c3d22f-Scan1.pdf

###条件SED,注意s操作符号前面的空格 condition
sed '/conditional_pattern/ s/pattern/replacement/g'

####sed反向引用，需要新建SED管道，不能使用-e
####注意正则表达方式
cat 1.txt |sed -r
's/(^.*)(\): )(.*)(CertUtil.*)$/\1\3/g'

########awk系统调用system###########
###后面的命令和参数都需要使用双引号包含;
###只有AWK中的$n不需要使用双引号包含;
###下面的正常命令是grep $1 20.txt在awk中的调用方式;
###其中$1是awk中一行 的第一个字段。
awk '{md5[$2]++} END{ for (var in md5) print var,md5[var]}' 20.txt |awk
'$2!=2{system("grep " $1 " " "20.txt")}'

###操作文件的调用方法
awk '{system("mv -R " $1 " " $2)}' file.cfg
########awk系统调用system END###########

find + exec + mv 兼容空格
find . -type f -iname '*.cpp' -exec mv -t ./test/ {} \+
http://stackoverflow.com/questions/5607542/why-does-find-exec-mv-target-not-work-on-cygwin

-exec command ;

Execute command; true if 0 status is returned. All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered. The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find. Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell. See the EXAMPLES section for examples of the use of the -exec option. The specified command is run once for each matched file. The command is executed in the starting directory. There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

-exec command {} +

This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files. The command line is built in much the same way that xargs builds its command lines. Only one instance of `{}' is allowed within the command. The command is executed in the starting directory.

这两个待测试
find ./ -name '*article*' -exec mv {}  ../backup  \;
find ./ -name '*article*' -exec mv {}  ../backup  \;

对于有特殊字符的情况，xargs不能正确处理，而find+exec可以 ，如下
#touch "ab c\\ \"'.txt"
注意后边有分号
# find ./ -maxdepth 1 -type f -exec rm -fv {} \;
已删除"./ab c\\ \"'.txt"
# touch "ab c\\ \"'.txt"
# find ./ -maxdepth 1 -type f -exec rm -fv {} \+
已删除"./ab c\\ \"'.txt"
# touch "ab c\\ \"'.txt"
# find ./ -maxdepth 1 -type f | xargs  rm -fv {} \+
xargs: 未匹配的 双 引用；默认情况下，引用是针对 xargs 的，除非您使用了 -0 选项

##########linux回车替换为空格############
$  echo "$string" | tr '\n' ' '
as others had pointed.
But if you want to convert new lines into spaces on a file using sed, then you
can use:
$ sed -i ':a;N;$!ba;s/\n/\t/g' file_with_line_breaks
or even awk:
$ awk '$1=$1' ORS=' ' file_with_line_breaks > new_file_with_spaces
e this solution with GNU sed:
sed ':a;N;$!ba;s/\n/ /g'
This will read the whole file in a loop, then replaces the newline(s) with a
space.

Explanation:
Create a label via :a.
Append the current and next line to the pattern space via N.
If we are before the last line, branch to the created label $!ba ($! means
not to do it on the last line as there should be one final newline).
Finally the substitution replaces every newline with a space on the pattern
space (which is the whole file).

Here is cross-platform compatible syntax which works with BSD sed (as per
@Benjie comment)
##tr的替换目标只能是单个字符？？
#########linux回车替换为空格END#########

###zabbixAgent with ssh Tunnel####
ssh -NCfqL 1000:localhost:10051 someone@ZbxServer -p 3000 -i ca
##上面1000Agent所在的本机端口，10051是zbxServer端口;
##someone@ZbxServer是登录到Server的用户和服务器地址;
##-p端口，-i证书
##ssh的参数和值之间只有一个空格，坑的很？
##为为避免和ZabbixServer的Agnet冲突，需要修改Agent的监听的端口到10060
##并且要在ZbxSrv端ssh Tunnel回到10060
ssh -NCfqL 10060:localhost:10060 someone@ZbxClinet -p 3000 -i ca1
##完成后修改zabbix_agentd.conf,ServerActive=127.0.0.1:1000
##然后启动zabbix_agentd就可以在服务端监控这台远程的Agent了
###zabbixAgent with ssh Tunnel End####

Zabbix磁盘监控指标:{Adan Linux CentOS 6:vfs.fs.size[{#FSNAME},pfree].last(0)}<20 and {Adan Linux CentOS 6:vfs.fs.size[{#FSNAME},free].last(0)}<4294967296

##########3.在以普通用户打开的VIM当中保存一个ROOT用户文件,VIM保存没有权限的文件##########

:w !sudo tee %

这题目读起来纠结，其实是很常见的，常常忘记了sudo就直接用vim编辑/etc内的文件，
（不过也不一定，vim发现保存的文件无法保存时候会提示）等编辑好了，保存时候才发现没权限。
曲线方法是先保存个临时文件，退出后再sudo cp回去。不过实际上在vim里面可以直接完成这个过程的，命令就是如此。

查阅vim的文档（输入:help :w），会提到命令:w!{cmd}，让vim执行一个外部命令{cmd}，然后把当前缓冲区的内容从stdin传入。

tee是一个把stdin保存到文件的小工具。

而%，是vim当中一个只读寄存器的名字，总保存着当前编辑文件的文件路径。

所以执行这个命令，就相当于从vim外部修改了当前编辑的文件，好完工。
###################END################################################

##########后项引用变量替换##################
:%s:\($[a-zA-Z]\+\):"\1":g 变量替换，由$var换为"$var"
:%s:"\($[a-zA-Z0-9]\+\)":\1:g   变量替换，由“$var”换为$var
##########后项引用变量替换END###############

##########detecv port status V4####################
cat /path/2/backup/detectServiceStatusV4.mon01.sh
#!/bin/bash
PATH="/usr/local/bin:/usr/bin:/bin"
export PATH
managedServiceFile="/path/2/backup/managedServiceListMon01"
logFile="/var/log/serviceStatusLogs/serviceStatusLog"
operationDate=$(date +%Y%m%d-%H%M)
echo -n "$operationDate:">"$logFile"
###每次的操作输入到一个文件，多个错误拼接到一行
while IFS= read -r managedServiceItem
do(
if echo "$managedServiceItem"|grep '#' &>/dev/null
then
   continue
fi

host=$(echo "$managedServiceItem"|awk '{print $1}')
port=$(echo "$managedServiceItem"|awk '{print $2}')
name=$(echo "$managedServiceItem"|awk '{print $3}')
if ！ nc -w 2 "$host" "$port" < /dev/null &>/dev/null   #####nc 6.40/7.50 not need -w parameter

#https://stackoverflow.com/questions/19955260/what-is-dev-null-in-bash
#Redirecting /dev/null to stdin will give an immediate EOF to any read call from that process. This is typically useful to detach a process from a tty (such a process is called a daemon). For example, when starting a background process remotely over ssh, you must redirect stdin to prevent the process waiting for local input.
#
#Another reason to redirect to /dev/null is to prevent an unused file descriptor being created for stdin. This can minimize the total open file handles when you have many long running processes.


#if [ $? != 0 ];then
        echo -n "WRONG $name ">>"$logFile"
        mail -s "FWJ $HOST $PORT NOT OPEN" user@example.com </dev/null  ####need only standard smtp mail server
fi)&
done <"$managedServiceFile"
wait
echo "">>"$logFile" ##打印换行
sed -i 's# WRONG##g' "$logFile"  ##删除多余的WRONG字符

##输出格式：2017xxxx：WRONG HOST1 HOST2  .....
##########detecv port status V4 END侦测端口开启状态 ####################

##########detecv port status V3侦测端口开启状态####################
##程序,变量做了双引号包含，避免意外的扩展，并把状态打印在第一个位置，方便阅读
#!/bin/bash
PATH="/home/Michael/bin:/usr/local/bin:/usr/bin:/bin:/usr/bin/X11:/usr/games"
export PATH
managedServiceFile="/path/2/backup/managedServiceListMon01"
logFile="/var/log/serviceStatusLogs/serviceStatusLog"
operationDate=$(date +%Y%m%d-%H%M)

echo "">>"$logFile"
echo "$operationDate">>"$logFile"

while IFS= read -r managedServiceItem
do(
if echo "$managedServiceItem"|grep '#' &>/dev/null
then
   continue
fi  ###如果配置行中有#，忽略该行

host=$(echo "$managedServiceItem"|awk '{print $1}')
port=$(echo "$managedServiceItem"|awk '{print $2}')
name=$(echo "$managedServiceItem"|awk '{print $3}')
nc -w 2 "$host" "$port" < /dev/null &>/dev/null
if [ $? == 0 ];then
        echo OK "$name" "$operationDate">>"$logFile"
else
        echo !!WRONG!! "$name" "$operationDate">>"$logFile"
fi)&
done <"$managedServiceFile"
wait
##########detecv port status V3 END####################

######################detect port status V2####################
####程序文件
#!/bin/bash
managedServiceFile="mg.txt"
logFile="sb.txt"
operationDate=$(date +%Y%m%d-%H%M)

echo "">>"$logFile"
echo "$operationDate">>"$logFile"

while IFS= read -r managedServiceItem ##逐行读入处理
do(
host=$(echo "$managedServiceItem"|awk '{print $1}')
port=$(echo "$managedServiceItem"|awk '{print $2}')
name=$(echo "$managedServiceItem"|awk '{print $3}')
if  nc -w 2 "$host" "$port" < /dev/null &>/dev/null
then
        echo "$name" is OK at "$operationDate">>"$logFile"
else
        echo "$name" is Wrong at "$operationDate">>"$logFile"
fi)&   ####后台处理，等待所有进程完成后才退出
done <"$managedServiceFile"
wait ####后台处理，等待所有进程完成后才退出

####配置文件
$cat mg.txt
172.16.10.156 22 bak01ssh
172.16.10.156 3306 bak01Mysql
172.16.10.156 80 bak01Nginx
172.16.10.156 8030 bak01Tomcat156-8080
172.16.10.13 3389 cdDC01RDP13-3389
41.1.24.41 5682 cloud-ssh-5682

####输出结果
$cat sb.txt

20170315-1049
bak01Mysql is OK at 20170315-1049
bak01Nginx is OK at 20170315-1049
bak01Tomcat156-8080 Wrong at 20170315-1049
bak01ssh is OK at 20170315-1049
Redis-ssh-56183 is OK at 20170315-1049
cdDC01RDP13-3389 is OK at 20170315-1049

20170315-1050
bak01Tomcat156-8080 Wrong at 20170315-1050
bak01Mysql is OK at 20170315-1050
bak01Nginx is OK at 20170315-1050
bak01ssh is OK at 20170315-1050
cloud-ssh-56183 is OK at 20170315-1050
cdDC01RDP13-3389 is OK at 20170315-1050
######################detect port status V2 END####################

######################detect port status探测端口状态#######################
$>cat detectServiceStatus.sh

#!/bin/bash
########变量值定义为ip，端口，服务描述,用于此后调用时候方便分离
Srv-ssh="172.16.10.156 22 bak01ssh"
Srv-db="172.16.10.156 3306 bak01Mysql"
Srv-web="172.16.10.156 80 bak01Nginx"
Srv-web2="172.16.10.156 8030 bak01Tomcat156-8080"
cddc01rdp="172.16.10.13 3389 cdDC01RDP13-3389"
log_file="sb.txt"
op_date=$(date +%Y%m%d-%H%M)
####注意引号的使用，特别是变量处理的时候
#######nc要使用 nc-1.84-24.el6.x86_64.rpm这个版本，CentOS7 yum自动安装的
#######对Windows的端口兼容性不好，坑货Windows

for managedService in "$Srv-ssh" "$Srv-db" "$Srv-web" "$Srv-web2" "$cddc01rdp"
do

####使用eval来逐层的剥离变量名字，得到实际的值
####$managedServic-->$jumpserverssh-->"172.16.10.156 22 bak01ssh" 。。。。。。

host=$(eval eval echo "$managedService" |awk '{print $1}')
#echo host=$host
port=$(eval eval echo "$managedService" |awk '{print $2}')
name=$(eval eval echo "$managedService" |awk '{print $3}')
#echo port=$port
#echo name=$name

nc -w 2 $host $port < /dev/null &>/dev/null
if [ $? == 0 ];then
        #echo $name is OK at $op_date
        echo $name is OK at $op_date>>$log_file
else
        echo $name Wrong at $op_date>>$log_file
        #echo $name Wrong at $op_date
fi
done
###############探测端口状态 detect port status End######################

##############文档去除重复段落#########################
对于空格，可以将空格替换为文档中不存在的字符
比如在vim中，%s:^$:abcdefghijklmnopq1234567890:g
然后使用awk 'BEGIN {RS="abcdefghijklmnopq1234567890"} !seen[$0]++' file.txt >file-processed.txt

http://stackoverflow.com/questions/1444406/how-can-i-delete-duplicate-lines-in-a-file-in-unix

awk '!seen[$0]++' file.txt

seen is an associative-array that Awk will pass every line of the file to. If a line isn't in the array then seen[$0] will evaluate to false. The ! is a logical NOT operator and will invert the false to true. Awk will print the lines where the expression evaluates to true. The ++ increments seen so that seen[$0] == 1 after the first time a line is found and then seen[$0] == 2, and so on.
Awk evaluates everything but 0 and "" (empty string) to true. If a duplicate line is placed in seen then !seen[$0] will evaluate to false and the line will not be written to the output.

##############文档去除重复段落END######################

##########nc centos 7 探测开放端口#####################
$ nc -w 2 172.16.20.11 22 < /dev/null &>/dev/null && echo Success || echo Failure
Success
$ nc -w 2 172.16.20.11 25 < /dev/null &>/dev/null && echo Success || echo Failure
Failure
##########nc centos 7 探测开放端口END#################

#########UPGRADE升级SSH#####
https://gist.github.com/faishal/add912b9b4c3899ec26c488a91446a84

#!/bin/bash
# Copyright © 2016 Faishal Saiyed
cd
timestamp=$(date +%s)
if [ ! -f openssh-7.3.zip ]; then wget https://github.com/faishal/openssh-portable/releases/download/cent.os.6.7.openssh.7.3p1/openssh-7.3.zip; fi;
unzip -o openssh-7.3.zip -d openssh-7.3p1
cd openssh-7.3p1/
cp /etc/pam.d/sshd pam-ssh-conf-$timestamp
rpm -U *.rpm
yes | cp pam-ssh-conf-$timestamp /etc/pam.d/sshd
/etc/init.d/sshd restart
#########升级SSH END######

###########并行处理############
#/bin/bash
#filename: generate_checksums.sh
PIDARRAY=()
for file in File1.iso File2.iso
do md5sum $file & PIDARRAY+=("$!") done
wait ${PIDARRAY[@]}
###########并行处理end############

####stdin stdout with -#############

$ tar cvf - files/ | ssh user@example.com "tar xv -C Documents/"
In the preceding example, the directory files/ is added to a tar archive which is output to stdout (denoted by '-')

####stdin stdout with - end#############

##########delete n days before files and directory##########
$ cat del_before_10days_backup_mon01_v2.sh
#!/bin/bash
PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin"
####find -ctime +10 表示10天以前的所有时间
####find -ctime 10 表示只是前第10天的文件
####注意rm所操作的目录
mallimage_path="/path/2/backup/mall/attachement/"
mallattache_path="/path/2/backup/mall/image/pictures/"
dbbak_path="/path/2/backup/db/"
if [ -d $mallimage_path ];then
find $mallimage_path  -ctime +10 |xargs rm  -rf
else
echo "Error,Directory not exist!"
fi

if [ -d $mallattache_path ];then
find $mallattache_path -ctime +10 |xargs rm  -rf
else
echo "Error,Directory not exist!"
fi

if [ -d $dbbak_path ];then
find $dbbak_path -name "*.sql" -ctime +10 |xargs rm  -f
else
echo "Error,Directory not exist!"
fi
##########delete n days before files and directory END########

删除N天以前的文件
#!/bin/bash
find /usr/local/nginx/logs/ -mtime +15 -type f -name *.log | xargs rm -f
“find: paths must precede expression:” How do I specify a recursive search that also finds files in the current directory?
find /usr/local/nginx/logs/ -mtime +15 -type f -name "*.log" | xargs rm -f
仅找出当前目录的文件
find ./ -maxdepth 1 -name "*.conf"

#!/bin/bash
find /usr/local/nginx/logs/ -mtime +15 -type f -name *.log | xargs rm -f
##################################################

http://kodango.com/ linux 运维开发
https://my.oschina.net/leejun2005/blog

ssh tunnel 隧道
###########mall###########
ssh -R 28000:172.16.10.118:80 -p 30023 -N -q -f -C -i you-privity-ssh-key user@www.example.com
ssh -R 28080:172.16.10.118:8080 -p 30023 -N -q -f -C -i you-privity-ssh-key user@www.example.com
###########shunfeng waas#################
ssh -R 30080:10.0.0.99:80 -p 30023 -N -q -f -C -i you-privity-ssh-key user@www.example.com
ssh -R 30180:172.16.10.124:9010 -p 30023 -N -q -f -C -i you-privity-ssh-key user@www.example.com

#############################
#############split view#########
http://unix.stackexchange.com/questions/7453/how-to-split-the-terminal-into-more-than-one-view
You can do it in screen the terminal multiplexer.
here ctrla is press Ctrl + a
To split vertically: ctrla then |.
To split horizontally: ctrla then S (uppercase one).
To unsplit: ctrla then Q (uppercase one).
To switch from one to the other: ctrla then tab
Note: After splitting, you need to go into the new region and start a new session via ctrla then c before you can use that area.

EDIT, basic screen usage:

New terminal: ctrla then c.
Next terminal: ctrla then space.
Previous terminal: ctrla then backspace.
N'th terminal ctrla then [n]. (works for n∈{0,1…9})
Switch between terminals using list: ctrla then " (useful when more than 10 terminals)
Send ctrla to the underlying terminal ctrla then a.

#############################
###split view end###

########screen config 20170320######

hardstatus on

hardstatus alwayslastline

hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H

%{..Y} %m/%d %C%a "

##scroll 2048 line

defscrollback 2048

##bind shorcut Fn to switch screen

##f10-->k; select 0

##f11-->F1 monitor

##f12-->F2 kill

##f7--->k7 new screen

##f8--->k8 title screen

bindkey -k k1 select 1

bindkey -k k2 select 2

bindkey -k k3 select 3

bindkey -k k4 select 4

bindkey -k k5 select 5

bindkey -k k6 select 6

bindkey -k k7 screen

bindkey -k k8 title

bindkey -k k9 time

bindkey -k k;  select 0

bindkey -k F1  monitor

bindkey -k F2  kill

##initial named session

screen -t config 1 bash

screen -t debug 1 bash

screen -t test 1 bash

screen -t misc 1 bash

##initail screen from 1

bind c screen 1

bind ^c screen 1

bind 0 select 10

screen 1
########screen config 20170320 END######

########config 20170215 #######
hardstatus on
hardstatus alwayslastline
hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %C%a "
##scroll 2048 line
defscrollback 2048
##bind shorcut Fn to switch screen
bindkey -k k1 select 1
bindkey -k k2 select 2
bindkey -k k3 select 3
bindkey -k k4 select 4
bindkey -k k5 select 5
##initial named session
screen -t config 1 bash
screen -t debug 1 bash
screen -t test 1 bash
screen -t misc 1 bash
##initail screen from 1
bind c screen 1
bind ^c screen 1
bind 0 select 10
screen 1
termcapinfo xterm* ti@:te@
########config 20170215 #######
############end###############

632 down vote accepted
"kill" will only kill one screen window. To "kill" the complete session, use quit.

Example 删除已经deteatch的sockets
$ screen -X -S [session # you want to kill] quit

+++++++inital centos 6 start++++++++
++++++only run once ++++++++++

#!/bin/bash
PATH=/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
export PATH
personBashCfg=/root/.bashrc
personScreenCfg=/root/.screenrc
mv /etc/localtime /tmp
ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
if [ `grep AlreadyInitiald $personBashCfg | wc -l` -eq 0 ];then
echo "alias hg='history |egrep -i --color'">>$personBashCfg
echo "alias h='history'">>$personBashCfg
echo "alias fcn='find ./ -name'">>$personBashCfg
echo "alias frn='find / -name'">>$personBashCfg
echo "alias lc='locate / | grep -i -E --color'">>$personBashCfg
echo "alias les='less -I'">>$personBashCfg
echo "alias ng='netstat -tlanp | grep -Ei --color'">>$personBashCfg
echo "alias pg='ps aux | grep -E -i --color'">>$personBashCfg
echo "alias ud='updatedb'">>$personBashCfg
echo "alias yuml='yum --disablerepo=\* --enablerepo=c6-media install'">>$personBashCfg
echo "alias gre='grep -E -i --color'">>$personBashCfg
echo "alias yumm='yum --enablerepo=c6-media install'">>$personBashCfg
echo "alias mc='mount /dev/cdrom /mnt/cdrom -t iso9660'">>$personBashCfg
echo "alias la='ls -Al'">>$personBashCfg
echo "alias lh='ls -hAl'">>$personBashCfg
echo "alias h='history'">>$personBashCfg
echo "alias lrd='locate / | grep -Ei'">>$personBashCfg
echo "alias scs='screen -S'">>$personBashCfg
echo "alias scl='screen -li'">>$personBashCfg
echo "alias scd='screen -d'">>$personBashCfg
echo "alias scr='screen -r'">>$personBashCfg
echo "alias lrd='locate / | grep -Ei'">>$personBashCfg
echo "alias gre='grep -i --color -A 3 -B 3 -n'">>$personBashCfg
source ~/.bashrc
rm -f $personScreenCfg
touch $personScreenCfg
echo  "hardstatus on ">$personScreenCfg
echo "hardstatus alwayslastline" >>$personScreenCfg
echo 'hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %C%a "'>>$personScreenCfg
echo "defscrollback 2048 " >>$personScreenCfg
echo "termcapinfo xterm* ti@:te@ ">>$personScreenCfg
##bind shorcut Fn to switch screen
echo "bindkey -k k1 select 1 ">>$personScreenCfg
echo "bindkey -k k2 select 2 ">>$personScreenCfg
echo "bindkey -k k3 select 3 ">>$personScreenCfg
echo "bindkey -k k4 select 4 ">>$personScreenCfg
echo "bindkey -k k5 select 5 ">>$personScreenCfg
echo "##initail screen from 1 ">>$personScreenCfg
echo "bind c screen 1 ">>$personScreenCfg
echo "bind ^c screen 1 ">>$personScreenCfg
echo "bind 0 select 10 ">>$personScreenCfg
echo "screen 1 ">>$personScreenCfg

yum install -y epel-release.noarch  mlocate vim  gcc gcc++ gcc-c++ cmake screen
yum update -y
echo "#TheVMhasAlreadyInitialed">>$personBashCfg
else
echo "AlreadyInitialed"
fi

++++++inital centos 6++++++
+++++++end++++++++++++

=======screen op ===========
=======start==============
for centos 7 title 不是期待的设置
I am using bash and GNU screen on centos7. I notice that if I ssh to another server, change the title (via ctrl+a+A), and log out of the server that my new title gets overwritten by USER@HOST:~. How can I stop it from doing this?

As documented in the man page, screen looks for a null title-escape-sequence. bash sends this sequence via the PROMPT_COMMAND environment variable (for example, mine defaults to printf "\033k%s@%s:%s\033\\" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}".

To disable this feature for a particular window, I just run unset PROMPT_COMMAND from that window. Of course, one could just add this to their ~/.bashrc or to a specific environment file to make it more persistent.
shareimprove this answer

If $PROMPT_COMMAND is empty, check $PS1. – choroba Oct 22 '14 at 22:44
http://unix.stackexchange.com/questions/163691/how-do-i-stop-screen-from-clobbering-my-titles

vim %userHome%/.screenrc
hardstatus on
hardstatus alwayslastline
hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %C%a "
##scroll 2048 line
defscrollback 2048
##bind shorcut Fn to switch screen
bindkey -k k1 select 1
bindkey -k k2 select 2
bindkey -k k3 select 3
bindkey -k k4 select 4
bindkey -k k5 select 5
##initail screen from 1
bind c screen 1
bind ^c screen 1
bind 0 select 10
screen 1
termcapinfo xterm* ti@:te@

screen -S sharing -t one 创建带名称的screen

alias scd='screen -d'
alias scl='screen -li'
alias scr='screen -r'
alias scs='screen -S'
=======screen op ===========
=======end==============

====bash shell 并行后台ping========
====start===================
#!/bin/bash
#Filename: fast_ping.sh
# Change base address 10.0.0 according to your network.
for ip in 10.0.0.{1..255} ;
do   (ping $ip -c2 &> /dev/null ;
if [ $? -eq 0 ];
then
echo $ip is alive
fi)&
done
wait
====bash shell 并行后台ping========
====end===================

====vim编辑替换时候的转意字符元字符meta char start===========
必须转意：～ [ ] $ / \
(口诀：心 有一点邪，关门 撑伞 造美元,太浪，危险要转移（转义）,怎么转移，不走斜路(MS 是反斜路) 
         --> * .  /\ [ ^ $ ~  ==> \* \. \/ \\ \[ \^ \$ \~)

不必转意：@ > : - （) {
随意：/ } ] space 

成功的示意:
:%s:now\=:\=:g 转意=
:%s#Michael@linux-gzbl:\~>##g            //仅仅转意～
:%s:\[root@RD-CD-SVN-BAK-1\ xml\]::g  //-没有转意
====vim编辑替换时候的转意字符end===========

===from http://vim.wikia.com/wiki/Search_and_replace start==============================
When searching:

., *, \, [, ^, and $ are metacharacters.
+, ?, |, &, {, (, and ) must be escaped to use their special function.
\/ is / (use backslash + forward slash to search for forward slash)
\t is tab, \s is whitespace
\n is newline, \r is CR (carriage return = Ctrl-M = ^M)
After an opening [, everything until the next closing ] specifies a /collection. Character ranges can be represented with a -; for example a letter a, b, c, or the number 1 can be matched with [1a-c]. Negate the collection with [^ instead of [; for example [^1a-c] matches any character except a, b, c, or 1.
\{#\} is used for repetition. /foo.\{2\} will match foo and the two following characters. The \ is not required on the closing } so /foo.\{2} will do the same thing.
\(foo\) makes a backreference to foo. Parenthesis without escapes are literally matched. Here the \ is required for the closing \).
When replacing:

\r is newline, \n is a null byte (0x00).
\& is ampersand (& is the text that matches the search pattern).
\0 inserts the text matched by the entire pattern
\1 inserts the text of the first backreference. \2 inserts the second backreference, and so on.
=============from http://vim.wikia.com/wiki/Search_and_replace end=============

###tcpdump
#tcpdump -nNxXi eth0 -s 0 proto TCP and port 25 -w mail.txt
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
^C14 packets captured
14 packets received by filter
0 packets dropped by kernel
# strings mail.txt
>220 163.com Anti-spam GT for Coremail System (163com[20141201])
ehlo [10.21.100.4]
N250-mail
250-PIPELINING
250-AUTH LOGIN PLAIN
250-AUTH=LOGIN PLAIN
250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2UrNWAAgUCa0xDrUUUUj
250-STARTTLS
250 8BITMIME
AUTH PLAIN AHh0ODMzYQBtaW1haW1hOSk=
535 Error: authentication failed

#tcpdump -nNxXi eth0 -s 0 proto TCP and host 10.0.1.0 -w mail.txt
#tcpdump -nNxXi eth0 -s 0 proto TCP and host 10.0.1.5 -w mail.txt   
#VIM 空格高亮黄色  显示所有隐藏的字符
set nohls取消搜索的高亮关键字。

set list 显示所有隐藏的字符

hlsearch 是高亮选择搜索的关键字。

原来我此前搜索替换了空格，所以就把所有空格染色了。

而set nohls，则以后的搜索都不会高亮所有搜索的关键字。所以空格也不会有颜色了

当然这个方面只是一次性开关，下次打开时又会出现黄色空格。如果想以后打开所有的文件里的黄色空格都不要的话，就打开用户主目录下的.vimrc文件，（如果没有，就新建一个），在后面输入set nohls，保存。以后再打开所有的文件都不会有烦人的黄色空格了。

######映射L到End键######
xmodmap -e "keycode 115 = End NoSymbol End"        #restore End key
xmodmap -e "keycode 115 = l"                                    #remap End key to l
报什么display错误时，
添加如下语句到.bashrc,然后source .bashrc
if [ -n “${DISPLAY+x}”];then       #x是小写？
xmodmap -e "keycode 115 = l" #最后的字符时字母L的小写
fi

xmodmap -pke #显示所有键盘映射

###### 映射L到End键######

+++++读取文件到数组的shell script++++
++++++start++++++++++++++++
====vim编辑替换时候的转意字符start===========
必须转意：～空格 [ ]= $(字符，非结尾标志) \
不必转意：@ > : - （) {
随意：/}
成功的示意:
:%s:now\=:\=:g 转意=
:%s#Michael@linux-gzbl:\~>##g            //仅仅转意～
:%s:\[root@RD-CD-SVN-BAK-1\ xml\]::g  //-没有转意
====vim编辑替换时候的转意字符end===========

+++++读取文件到数组的shell script++++
++++++start++++++++++++++++
#!/bin/bash
declare -a myarray

# Load file into array.
mapfile myarray < /tmp/file.txt
#readarray myarray < /tmp/file.txt

# Explicitly report array content.
let i=0
while (( ${#myarray[@]} > i )); do
printf "${myarray[i++]}"
done
+++++读取文件到数组的shell script++++
++++++end++++++++++++++++

++++++rsync with ssh++++++
+++++++start+++++++++++++
#first upload CA to remoteHost
rsync -avz -e ssh remoteuser@remoteHost:/remotefiles /localDir
+++++++++rsync with ssh++++
++++++++end++++++++++++++

rsync +inotify
Server 源端 10.0.1.91
> sudo yum install inotify-tools
[leo@linux-vps~]$ vim inotify-example
while true$>run indefinitely
do
inotifywait -r -e modify,attrib,close_write,move,create,delete \
/path/2/dir && /bin/bash backup-script
done
$>cat backup-script
#!/bin/bash
rsync -avz /source/dir 10.0.1.92::website --delete
[root@www ~]# yum -y install rsync

Backup目的端
[root@dlp ~]# yum -y install rsync xinetd
[root@dlp ~]# vi /etc/xinetd.d/rsync
# default: off
# description: The rsync server is a good addition to an ftp server, as it \
# allows crc checksumming etc.
service rsync
{
disable= n$> change
flags= IPv6
socket_type= stream
wait= no
user= root
server= /usr/bin/rsync
server_args= --daemon
log_on_failure+= USERID
}
[root@dlp ~]# /etc/rc.d/init.d/xinetd start
Starting xinetd:[ OK ]
[root@dlp ~]# chkconfig xinetd on
[root@dlp ~]# mkdir /home/backup
[root@dlp ~]# vi /etc/rsyncd.conf
# any name you like
[website]
# destination directory
path = /home/backup
# Hosts you allow to copy (specify source Host)
hosts allow = 10.0.1.91
hosts deny = *
list = true
uid = root
gid = root
read only = false

执行
[root@ha1 home]# ./inotify_trigger.sh &
[1] 3935
[root@ha1 home]# Setting up watches. Beware: since -r was given, this may take a while!
Watches established.

通过监控某一文件的值做对应的操作，
用于系统第一次启动按照软件;之后不在安装
shell> cat getVar.sh
#!/bin/bash
isFstBt=$(cat c.txt)
case $isFstBt in
1)
echo "Install something"
isFstBt=0
echo "$isFstBt" >c.txt #用0覆盖c.txt中的1
;;
0)
echo "Done"
;;
*)
echo "something worong"
esac

shell> echo 1 >c.txt
shell> ./getVar.sh
Install something
shell> cat c.txt
0
shell> echo e >c.txt
shell> ./getVar.sh
something worong

LVM相关
1 fdisk /dev/sdb /dev/sdc -->logical partition-->type 8e
2 vgcreate vg_web /dev/sd{b5,c5}
3 vcreate -L 8G -n lv_web vg_web
4 mkfs.ext4 /dev/vg_web/lv_web
5 mkdir -p /data
6 mount -t ext4 /dev/vg_web/lv_web /data
7 echo "/dev/mapper/vg_web-lv_web ext4 defaults 1 1" >>/etc/fstab
8 lvresize -L +500M /dev/vg_web/lv_web
9 ## display correct partion info on df -hT command
10 umount /db
11 e2fsck -f /dev/mapper/vg_web-lv_web
12 resize2fs /dev/mapper/vg_web-lv_web
13 mount -t ext4 e2fsck -f /dev/mapper/vg_web-lv_web /data

####iptables-save centos6

iptables-save | sudo tee /etc/sysconfig/iptables

The iptables configuration file on CentOS is located at /etc/sysconfig/iptables. The above command saved the rules we created into that file. Just to make sure everything works, we can restart the firewall:

service iptables restart

####iptables-save centos6

####firewalld centos7
# firewall-cmd --list-ports
1235/tcp

# firewall-cmd --get-active-zone
public
interfaces: enp0s3

# firewall-cmd --add-port 1236/tcp --permanent
success

# firewall-cmd --add-service https
success

# firewall-cmd --list-services
dhcpv6-client ssh https

# systemctl enable firewalld
# systemctl restart firewalld

[root@localhost ~]# firewall-cmd --add-service telnet
success
[root@localhost ~]# firewall-cmd --list-service
dhcpv6-client ssh http telnet
[root@localhost ~]# firewall-cmd --add-service https
success
[root@localhost ~]# firewall-cmd --list-service
dhcpv6-client ssh http telnet https
[root@localhost ~]# firewall-cmd --add-service dns
success
[root@localhost ~]# firewall-cmd --list-service
dhcpv6-client ssh http telnet https dns
[root@localhost ~]# firewall-cmd --reload
success
[root@localhost ~]# firewall-cmd --zone=public --remove-service=http --permanent
Warning: NOT_ENABLED: http
success

firewall-cmd --permanent --zone=public --add-rich-rule='
  rule family="ipv4"
    source address="1.2.3.4/32"
      port protocol="tcp" port="3306" accept' && firewall-cmd \
      remove-port 3306/tcp --perm && firewall-cmd --reload
####firewalld centos7

DNAT
iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT \
--to 172.31.0.23:80
iptables -A FORWARD -i eth0 -p tcp --dport 80 -d \
172.31.0.23 -j ACCEPT #开启Forward允许策略

端口重定向 port forward
iptables -t nat -I PREROUTING -i eth0 -p tcp \
--dport 88 -j REDIRECT --to-ports 3306
[root@lnmp ~]# mysql -uroot -P 88 -p #注意端口是88


CentOS7 
  #>   firewall-cmd --permanent --add-forward-port=port=3000:proto=tcp:toport=22
  #>   firewall-cmd --remove-service=ssh --perm    ####?
  #>   firewall-cmd --reload

  #>    firewall-cmd --list-all
public (active)
  target: default
  icmp-block-inversion: no
  interfaces: enp0s3
  sources: 
  services: dhcpv6-client  ####no ssh here
  ports:                   ####no 3000 here
  protocols: 
  masquerade: no
  forward-ports: port=3000:proto=tcp:toport=22:toaddr=    ###forward port here
  sourceports: 
  icmp-blocks: 
  rich rules: 

# ss -tlnp|grep ssh    ####only port 22 listening
LISTEN     0      128          *:22                       *:*                   users:(("sshd",pid=1445,fd=3))
LISTEN     0      128         :::22                      :::*                   users:(("sshd",pid=1445,fd=4))

#client ssh root@server -p 3000 



ssh自动输入密码 StrictHostKeyChecking=no 不要求输入yes
sshpass -p "PASS" ssh -o StrictHostKeyChecking=no USER@host:[port]
没有sshpass就yum
sshpass -p You_Pwd ssh-copy-id -i Your_Pub_key user@host    ##互信设置
####selinux allow ssh with rsa key (azure centos 7.5)
allow this access for now by executing:
# ausearch -c 'sshd' --raw | audit2allow -M my-sshd
# semodule -i my-sshd.pp


find正则类型 posix-awk, posix-basic, posix-egrep and posix-extended
#命令执行方法，-regex区分大小写，-iregex不区分大小写
# find / -regextype posix-extended -regex ".*\.conf$"
/etc/latrace.d/libio.conf
/etc/latrace.d/mman.conf
/etc/latrace.d/stdlib.conf
/etc/latrace.d/inet.conf
/etc/latrace.d/typedefs.conf
find . -regextype sed -regex ".*/[a-f0-9\-]\{36\}\.jpg"
Note that you need to specify .*/ in the beginning because find matches the whole path.

Example:

susam@nifty:~/so$ find . -name "*.jpg"
./foo-111.jpg
./test/81397018-b84a-11e0-9d2a-001b77dc0bed.jpg
./81397018-b84a-11e0-9d2a-001b77dc0bed.jpg
susam@nifty:~/so$ 
susam@nifty:~/so$ find . -regextype sed -regex ".*/[a-f0-9\-]\{36\}\.jpg"
./test/81397018-b84a-11e0-9d2a-001b77dc0bed.jpg
./81397018-b84a-11e0-9d2a-001b77dc0bed.jpg
https://stackoverflow.com/questions/6844785/how-to-use-regex-with-find-command



去掉windows下的回车符 （注意^M 在linux 下写法 按^M 是回车换行符,输入方法是按住CTRL+v,松开v,按m)
sed -i 's/^M//g' filename

2) 在vim下类似

:%s/^M//g

$ find /home -name test > list_right 2>&1

$ cat local2 >>/dev/null
cat: local2: 是一个目录 //有错误信息显示
$ cat local2 >>/dev/null 2>&1  #也可以使用>>/dev/null &>
//错误信息也被丢弃了

2 $ locate i18n|grep i18n$|xargs grep -nvH '\#' 2>/dev/null | grep -v "匹配"
找出所有的i18n文件，打印其文件名字行号及内容，丢弃错误信息，并去掉有“匹配”字样的行

3 $ grep .* `locate -r '^/etc.*conf$'` 2>/dev/null |grep nameserver |grep -v '\#'
/etc/resolv.conf:nameserver 121.40.144.82
/etc/resolv.conf:nameserver 123.56.46.123

达到2一样的效果，注意2>/dev/null的位置要放在产生错误的语句的后面而不是最后面

4 $ grep -Hn .* `locate -r '^/etc.*conf$'` 2>/dev/null |grep nameserver |grep -v '\#' | sed 's/^.*ver//'
121.40.144.82
123.56.46.123

从3中只取IP，注意sed的用法

5 GREP 或 or 操作
$ netstat -np|grep -E 'PID|mysql'
Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name
tcp 0 0 10.0.1.104:38635 10.0.1.104:3306 ESTABLISHED 3420/mysql
tcp 0 0 10.0.1.104:3306 10.0.1.104:38635 ESTABLISHED 2342/mysqld
Proto RefCnt Flags Type State I-Node PID/Program name Path

6 HowTo: Flush nscd dns cache

Nscd caches libc-issued requests to the Name Service. If retrieving NSS data is fairly expensive, nscd is able to speed up consecutive access to the same data dramatically and increase overall system performance. Just restart nscd:
$ sudo /etc/init.d/nscd restart
OR
# service nscd restart
OR
# service nscd reload

7 目录hard link
#cat /etc/fstab |grep bind
/dst                     /boot/src              none    bind            0 0

# ll /boot/src/
total 0

# mount |grep src
/dev/mapper/centos-root on /boot/src type xfs (rw,relatime,seclabel,attr2,inode64,noquota)

# df -h
Filesystem               Size  Used Avail Use% Mounted on
/dev/mapper/centos-root   29G   18G   11G  64% /
/dev/sda1                494M  170M  325M  35% /boot

#mount -a

# mount|grep src
/dev/mapper/centos-root on /boot/src type xfs (rw,relatime,seclabel,attr2,inode64,noquota)

#cp File23-0218.tar.gz /boot/src

# ll /boot/src/  ###src have files,but save to /dst persistently

total 90080
-rwxr--r--. 1 root root 30743190 Apr  6 08:02 File23-0218.tar.gz

# ll /dst
total 90080
-rwxr--r--. 1 root root 30743190 Apr  6 08:02 File23-0218.tar.gz


##bind /boot/src dir to /dst dir,file write in /boot/src to /dst,not use /boot/src's partition
##https://backdrift.org/how-to-use-bind-mounts-in-linux


shel $ mount --bind /home /tmp
shel $ ls -lid /home /tmp
64 drwxr-xr-x 4 root root 36 3月 25 12:28 /home
64 drwxr-xr-x 4 root root 36 3月 25 12:28 /tmp
shel $ umount /tmp
shel $ ls -lid /home /tmp
64 drwxr-xr-x 4 root root 36 3月 25 12:28 /home
256 drwxrwxrwt 1 root root 12656 6月 6 18:03 /tmp

8 nc探测主机开放的端口（同时nc是一个简单的网络通信程序，man中有例子）
shel $ nc -vz 10.0.1.1 80
Connection to 10.0.1.1 80 port [tcp/http] succeeded!
shel $ nc -vuz 10.0.1.1 53

$ cat ep
Iraq fight

awk RS 匹配正则表达式，record seperate？

9 $ cat ep
Iraq fight

oextuse mma
exque cctv
exqtes mmd
occ eec

mmd mt
lsct

qqtvm
cmde
wo
flortt
$ awk 'BEGIN {RS = ""} {print $3}' ep

exque
lsct
wo

$ awk '$2 ~ /mmd/' ep
exqtes mmd
$ awk 'BEGIN {RS = ""} {print $3}' ep //注意这个$3的结果

exque
lsct
wo
$ awk 'BEGIN {RS = ""} {print $2}' ep
fight
mma
mt
cmde

$ awk '/mmd/' ep
exqtes mmd
mmd mt

10 awk 统计 分类汇总

$ cat courty
asia china 140000
american usa 30000
europe uk 6000
asia japan 20000
american mexcia 5000
europe french 7000
asia india 130000

$ cat prep3
pass == 1{
pop[$1]+=$3
}
pass == 2{
print $1 " " pop[$1]| "sort | uniq" /调用系统命令的方法/
}

$ awk -f prep3 pass=1 courty pass=2 courty /传入变量值的方法
american 35000
asia 290000
europe 13000

11 AWK实现EXCEL vlookup的方法

$ cat f1.txt f2.txt
ls 34 b4
zs 23 a3
yq 57 f7
we 62 e2
mz 85 d5
zs 3 3333
ls 4 4444
we 2 2222
yq 6 7777
mz 5 5555
# awk 'FNR==NR{map[$1]=$3;map2[$1]=$2;next}{print $1,$2,$3 "," map[$1] ","map2[$1]}' f2.txt f1.txt /理解数组的表示的含义，数组中不仅可以用下标表示，还可以表示为别名，如map[ls]等
ls 34 b4,4444,4
zs 23 a3,3333,3
yq 57 f7,7777,6
we 62 e2,2222,2
mz 85 d5,5555,5

12 sed替换特殊字符的方法，注意sed后面的表示方法

处理前

$ find .
.
./.bash_history
./bin
./.gnupg
./.dbus
./.dbus/session-bus
./.dbus/session-bus/4ed603cd18304c8d9216b69334cdeb3a-0
。。。。。。

处理后

# find . | sed -r s/"^\."/"\/root"/g
/root
/root/.bash_history
/root/bin
/root/.gnupg
/root/.dbus
/root/.dbus/session-bus
/root/.dbus/session-bus/4ed603cd18304c8d9216b69334cdeb3a-0
。。。。。。

13 在SED中处理包含特殊字符的变量的应用

$ echo $PWD
/root

本是用sed s///g,因为$PWD中含有\字符，所以替换为;

（实际上可以替换为$PWD中不含的任意特殊字符，

比如 $！等都可以哦）

$ find .|sed -r "s;^\.;$PWD;g"
/root
/root/.bash_history
/root/bin
.路径被/root替换了
..............

14 find & exec

This command moves a set of files into an archive directory:

find /foo -maxdepth 1 -atime +366 -exec mv {} /archive \;

However, this will only move one file at a time. We cannot in this
case use `-exec ... +' because the matched file names are added at the
end of the command line, while the destination directory would need to
be specified last. We also can't use `xargs' in the obvious way for
the same reason. One way of working around this problem is to make use
of the special properties of GNU `mv'; it has a `-t' option that allows
the target directory to be specified before the list of files to be
moved. However, while this technique works for GNU `mv', it doesn't
solve the more general problem.

15 info 指令

s 向前搜索指定的字符串。
{ 查找上一个出现点。
} 查找下一个出现点。

[ 上一个节点

] 下一个节点

h 打开帮助文档

16 find exec 安全问题

cd /var/tmp && find stuff -mtime +90 -exec /bin/rm {} \+

might actually issue the command:

/bin/rm stuff/A stuff/B stuff/passwd

If an attacker can rename `stuff' to something else (making use of
their write permissions in `/var/tmp') they can replace it with a
symbolic link to `/etc'. That means that the `/bin/rm' command will be
invoked on `/etc/passwd'. If you are running your `find' command as
root, the attacker has just managed to delete a vital file. All they
needed to do to achieve this was replace a subdirectory with a symbolic
link at the vital moment.

There is however, a simple solution to the problem. This is an
action which works a lot like `-exec' but doesn't need to traverse a
chain of directories to reach the file that it needs to work on. This
is the `-execdir' action, which was introduced by the BSD family of
operating systems. The command,

find /var/tmp/stuff -mtime +90 -execdir /bin/rm {} \+
这样才好？

might delete a set of files by performing these actions:

1. Change directory to /var/tmp/stuff/foo

2. Invoke `/bin/rm ./file1 ./file2 ./file3'

3. Change directory to /var/tmp/stuff/bar

4. Invoke `/bin/rm ./file99 ./file100 ./file101'

This is a much more secure method. We are no longer exposed to a
race condition. For many typical uses of `find', this is the best
strategy. It's reasonably efficient, but the length of the command
line is limited not just by the operating system limits, but also by
how many files we actually need to delete from each directory.

Is it possible to do any better? In the case of general file
processing, no. However, in the specific case of deleting files it is
indeed possible to do better.

17 awk替换和条件判断

# cat f1.txt
ls 34 b4
zs 23 a3
yq 57 f7
we 62 e2
mz 85 d5
19899951
223667
abc12345
19230815a
5561826
511121193303032551
510122192308152652
510671201209011952
610311199009192512
要求是把上面的文本中每一列包含7个到结尾的数字，替换最3个数字为-xxx
# awk '$0 ~/[0-9]{7}$/{sub(/[0-9]{3}$/,"-xxx");print $0;next}{print $0}' f1.txt
ls 34 b4
zs 23 a3
yq 57 f7
we 62 e2
mz 85 d5
19899-xxx
223667
abc12345
19230815a
5561-xxx
511121193303032-xxx
510122192308152-xxx
510671201209011-xxx
610311199009192-xxx

18 lsblk -o +uuid 显示设备名，挂载点与uuid

19 mysql -e "select * ..." Dbname 在shell执行sql语句

20 centOS 安装完成后ifconfig只有lo网卡

A ifup eth0 试试是否可以看到eth0，
B lsmod 查找网卡的mod，再用modinfo确认是否是正确的网卡

以上确认后编辑ifcfg-eth0这个配置文件，使网卡启动时自动加载
下面是这个配置文件的正确方式

shel $ cat /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
HWADDR=08:00:27:B9:B3:5C
TYPE=Ethernet
UUID=0179cbdb-4c64-4ecb-a9ff-d331baf1a178
ONBOOT=yes
NM_CONTROLLED=yes
IPADDR=10.0.1.2
GATEWAY=10.0.1.1
PREFIX=24
NETMASK=255.255.255.0
DNS=61.139.2.69

21
nginx SSL配置
生成证书
$ cd /usr/local/nginx/conf
$ openssl genrsa -des3 -out server.key 1024
$ openssl req -new -key server.key -out server.csr
$ cp server.key server.key.org
$ openssl rsa -in server.key.org -out server.key
$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
编辑 nginx.conf
server {
server_name YOUR_DOMAINNAME_HERE;
listen 443;
ssl on;
ssl_certificate /usr/local/nginx/conf/server.crt;
ssl_certificate_key /usr/local/nginx/conf/server.key;
}

22 svn多目录配置
[root@localhost conf]# grep -v ^# authz
[aliases]
[groups]
[/] $这里只能是根路径，不然授权出错
uw = rw

[root@localhost conf]# grep -v ^# passwd
[users]
uw=uwmima

[root@localhost conf]# grep -v ^# svnserve.conf
[general]
anon-access = read
auth-access = write
password-db = passwd
authz-db = authz
realm = www

23 LVS 配置 Server
[root@localhost ~]# cat dr.sh
service iptables stop
ifconfig eth0:0 10.0.1.10 broadcast 10.0.1.10 netmask 255.255.255.255 up
route add -host 10.0.1.10 dev eth0:0
ipvsadm -C
ipvsadm -A -t 10.0.1.10:80 -s rr
ipvsadm -agt 10.0.1.10:80 -r 10.0.1.11:80
ipvsadm -agt 10.0.1.10:80 -r 10.0.1.12:80

[root@localhost ~]# cat tunl.sh
service iptables stop
ifconfig tunl0 10.0.1.10 netmask 255.255.255.255 up
route add -host 10.0.1.10 dev tunl0
ipvsadm -C
ipvsadm -A -t 10.0.1.10:80 -s rr
ipvsadm -a -t 10.0.1.10:80 -r 10.0.1.11:80 -i
ipvsadm -a -t 10.0.1.10:80 -r 10.0.1.12:80 -i

CLIENT
anaconda-ks.cfg dr.sh install.log install.log.syslog start.sh
[root@localhost ~]# cat dr.sh
service httpd start
service iptables stop
ifconfig lo:0 10.0.1.10 broadcast 10.0.1.10 netmask 255.255.255.255 up
route add -host 10.0.1.10 dev lo:0
echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore
echo 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore
echo 1 > /proc/sys/net/ipv4/conf/all/arp_announce
echo 2 > /proc/sys/net/ipv4/conf/lo/arp_announce

[root@localhost ~]# cat start.sh
service httpd start
service iptables stop
ifconfig tunl0 10.0.1.10 netmask 255.255.255.255 up
route add -host 10.0.1.10 dev tunl0
echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore
echo 1 > /proc/sys/net/ipv4/conf/tunl0/arp_ignore
echo 1 > /proc/sys/net/ipv4/conf/all/arp_announce
echo 2 > /proc/sys/net/ipv4/conf/tunl0/arp_announce

24
rsync配置

rsyncd.conf rsyncd.secrets
[root@localhost rsyncd]# cat rsyncd.conf
uid = root
gid = root
use chroot = no
read only = no
write only = no
host allow =10.0.1.0/255.255.255.0
max connection = 3
pid file = /var/run/syncd.pid
log file = /var/log/rsyncd.log
secrets file = /etc/rsyncd/rsyscd.secrets
log format = %t %a %m %f %b
time out = 300
strict mode = false

[shares]
path = /home/rsync
list = yes

start
# rsync --daemon --config=/etc/rsyncd/rsyncd.conf

客户端
list
$>rsync -avzP root@10.0.1.2::shares

sync
$>rsync -v ./* root@10.0.1.2::shares

26
tar.bz 安装时注意./configure 后面的参数，有时候错了不会有提示，但会失败;用 ./configure --help|grep 查找需要的参数，仔细核对输入，注意大小写，横线，单字的拼写;libdir 和includedir的值一定要正确，如果使用yum等自动安装找不到include和lib，使用tar源码手动安装

coreseek 段错误是词典路径不正确

coreseek 一定使用UTF8编码

27
diff
26c26
左边文件的26行与又边26行不同

26d
26行删除了

#空格高亮黄色
set nohls取消搜索的高亮关键字。
######End linux.memo #######
######Endmemoof linux.memo #######
