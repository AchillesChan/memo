apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "my-db.fullname" . }}
  labels:
    {{- include "my-db.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "my-db.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "my-db.selectorLabels" . | nindent 8 }}
    spec:
#      {{- with .Values.imagePullSecrets }}
#      imagePullSecrets:
#        {{- toYaml . | nindent 8 }}
#      {{- end }}
      imagePullSecrets:
        - name: {{ .Release.Name }}-imagepullsecrets
      serviceAccountName: {{ include "my-db.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
              - name: DB_SERVER_HOST
                value: {{ .Release.Name }}-my-db
              - name: MYSQL_DATABAS
                value: zabbix
              - name: MYSQL_USER
                value: zabbix
              - name: MYSQL_PASSWORD
                value: zabbix
              - name: MYSQL_ROOT_PASSWORD 
                valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-my-db 
                    key: ROOT_PASSWORD 
          ports:
            - name: my-db 
              containerPort: 3306
              protocol: TCP
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - "mysqladmin ping -u root -pmy-super-secret-password"
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
          livenessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 30
            periodSeconds: 10
          volumeMounts:
          - name: my-db-data
            mountPath: /var/lib/mysql
          - name: {{ .Release.Name }}-my-db-cnf
            mountPath: /etc/mysql/conf.d 
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: {{ .Release.Name }}-my-db-cnf
          configMap:
            name: {{ .Release.Name }}-configmap 
        {{- if and .Values.allowOverrideNone .Values.customHTAccessCM }}
        - name: custom-htaccess
          configMap:
            name: {{ template "my-db.customHTAccessCM" . }}
            items:
              - key: my-db-htaccess.conf
                path: my-db-htaccess.conf
        {{- end }}
        - name: my-db-data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "my-db.fullname" .) }}
          {{- else }}
          emptyDir: {}
          {{ end }}
        {{- if .Values.extraVolumes }}
        {{- include "my-db.tplValue" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}

