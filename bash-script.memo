######Startmemoof bash-script.memo #######
######Start bash-script.memo #######


###condition and or with command online
#!/bin/bash
ls wlyd/scwldyd &>/dev/null
opa=$?
#echo "$opa"
ls wlyd/sfwm &>/dev/null
opb=$?
#echo "$opb"
#if [ "$opa" = 0 -o "$opb" = 0 ]

if ping 192.168.1.169 -c 1 &>/dev/null || ping 192.168.1.159 -c 1 &>/dev/null 
if ping 192.168.1.169 -c 1 &>/dev/null && ping 192.168.1.159 -c 1 &>/dev/null 
####but if command is curl && MUST USE -a |||||WHY?
###if ! curl -IL 192.168.169:80 |grep 200 -a curl 192.168.1.11 |grep 404
then
        echo "OK"
else
        echo "Not"
fi

###condition and or with command online

#####iftop over traffic send mail
--10 script
#!/bin/bash

#iftop -f "dst port 22" -f "src host 10.0.2.3" -t -s 1800 >log.txt &
LOG_NAME=traffic_log_$(hostname)_$(date +%Y%m%d-%H%M).txt
iftop -t -s 360 > "$LOG_NAME"                                                                                                                                                             
MiB=$(grep Cumulative $LOG_NAME |grep MB|awk '{print $3}'|sed  's/\..*//g')
GiB=$(grep Cumulative $LOG_NAME |grep GB|awk '{print $3}'|sed  's/\..*//g')
TiB=$(grep Cumulative $LOG_NAME |grep TB|awk '{print $3}'|sed  's/\..*//g')

if [[ "$MiB" -gt 0 ||  "$GiB" -gt 0  ||  "$TiB" -gt 0 ]]
then
    mail -s "$(hostname)_$(date) Traffic overload" user@domain.com < "$LOG_NAME" 
fi

--20 traffic log
Listening on eth0
   # Host name (port/service if enabled)            last 2s   last 10s   last 40s cumulative
--------------------------------------------------------------------------------------------
   1 APP-01                         =>      199Kb      201Kb      194Kb     1.53MB
     192.168.1.45                             <=     89.3Kb     32.1.b     41.1.b      334KB
   2 APP-01                         =>     7.09Kb     4.25Kb     4.25Kb     21.3KB
     40.73.81.68                              <=     14.2Kb     8.55Kb     8.55Kb     42.7KB
   3 APP-01                         =>     2.57Kb     1.77Kb     1.60Kb     8.00KB
     18.3.12.16                            <=     10.0Kb     6.03Kb     6.03Kb     30.1KB
   4 APP-01                         =>         0b     1.65Kb       422b     2.06KB
     220.194.237.1.                           <=         0b     1.18Kb       303b     1.1.KB
   5 APP-01                         =>         0b       590b     2.58Kb     12.9KB
     192.168.1.4                              <=         0b       537b     2.69Kb     13.1.B
   6 APP-01                         =>         0b         0b     3.16Kb     30.2KB
     3.20.11.22  <=         0b         0b       807b     9.66KB
--------------------------------------------------------------------------------------------
Total send rate:                                      209Kb      209Kb      206Kb
Total receive rate:                                   114Kb     48.7Kb     59.7Kb
Total send and receive rate:                          322Kb      258Kb      266Kb
--------------------------------------------------------------------------------------------
Peak rate (sent/received/total):                      553Kb      169Kb      614Kb
Cumulative (sent/received/total):                    1.67MB      536KB     2.20MB
============================================================================================

#####iftop over traffic send mail


=====vim command in bash script==========
--10
$> cat dummy.out
old sen
old2sen
old-3sen
old-old2-old3
old3-old2-old

--20
$> cat viminbash.sh 
#!/bin/bash
OPERATION_FILE=dummy.out
vim -E -s $"OPERATION_FILE" <<-EOF
:%s/old/new/g
:%s/old2/new2/g
:%s/old3/new3/g
:update
:quit
EOF

--30
$> sh viminbash.sh 

--40
$> cat dummy.out
new sen
new2sen
new-3sen
new-new2-new3
new3-new2-new

=====vim command in bash script==========



###qutoes and doller variable reference or not in bash script 
--10
# cat quote.sh

#!/bin/bash
db=dbName
dboption='exec mysql -e "show databases;" -p"$MYSQL_ROOT_PASSWORD"'     ####double quote is same output in single quote
echo db="$dboption"
dumpoption="exec  mysqldump  --databases $db  -p\$MYSQL_ROOT_PASSWORD"  ####dollar is same output behind backslash \
echo dump="$dumpoption"

--20
# sh  quote.sh 
db=exec mysql -e "show databases;" -p"$MYSQL_ROOT_PASSWORD"
dump=exec  mysqldump   --databases dbName   -p$MYSQL_ROOT_PASSWORD

###qutoes and doller variable reference or not in bash script 


####source in same process and set default var##
--10 script
$> cat var-in-same-process.sh 
#!/bin/bash
set -u            ##if var not exist ,exit
result_old=${result_old:=0}  ##if not exist,set to 0,or keep orgin
result_new=${result_new:=0}  ##if not exist,set to 0,or keep orgin
while(true)
sleep 1s
do
        echo "result_old is $result_old"
        printf "result_new is $result_new"
        printf "\n"
        
        if ! ls f2 &>/dev/null
        then
                result_new=1
        else
                result_new=0
        fi

        if [[ "$result_new" -ne "$result_old" ]]
        then  
               echo "result change from $result_old to $result_new"
               result_old="$result_new"
        fi
done

--20 initial and call
$> unset result_old
$> unset result_new
$> echo $result_old
-bash: result_old: unbound variable
$> echo $result_new
-bash: result_new: unbound variable   ###initial completely
$> source var-in-same-process.sh
result_old is 0                      ###var value from ${result_old:=0}
result_new is 0                      ###var value from ${result_new:=0}  
result change from 0 to 1            ###f2 not exist,status change to 1
result_old is 1
result_new is 1
......

Ctrl+c                              ####end it 


--25 view vars,result saved in vars
$> echo $result_old                                                                                   
1
$> echo $result_new
1


--30 swith 
$> mv f3 f2                       ###f2 exist now

--40 swith result
$> source var-in-same-process.sh
result_old is 1
result_new is 1                 ####last saved vars
result change from 1 to 0       ###status changed,so result change
result_old is 0
result_new is 0

####source in same process and set default var##



####calculate how many days no data####

--10 script
$> cat calculate-how-many-days-backup-file-not-received.sh 
#!bin/bash
bak_path_list_file=backup_list
while IFS= read -r backup_item
do
        if echo "$backup_item"|grep '#' &>/dev/null
        then
           continue
        fi
        
        item_name=$(echo "$backup_item" |awk '{print $1}')
        item_path=$(echo "$backup_item" |awk '{print $2}')
        item_max_days=$(echo "$backup_item" |awk '{print $3}')

        file_timestamp=$(find "$item_path" -type f -printf '%T@ %p\n' | sort -nr |head -1| cut -f1- -d" "|awk '{print $1}'|awk -F. '{print $1}')
        current_timestamp=$(date +%s)
        diff_timestamp_in_days=$((($current_timestamp-$file_timestamp)/86400))
        if (("$diff_timestamp_in_days" > "item_max_days"))
        then
            echo "$item_name" has "$diff_timestamp_in_days" days no date.
        fi
done <"$bak_path_list_file"

--20 config file
$> cat backup_list 
###name         path               max-days########
web-db         /backup/web             3
web-image      /backup/image/          3
app22-db       /backup/app22db         2
app2-mong      /backup/app2            2
App2-db        /backup/App2db          2
App2-mongo     /backup/App2mongo       2
App-mongo      /backup/App             2
App-db         /backup/App             2

--30 running result 
$> sh calculate-how-many-days-backup-file-not-received.sh 
App-mongo has 16 days no date.
App-db has 16 days no date.

####calculate how many days no data####


#########calculate#########
--10 code
#> cat calculate.sh 
#!/bin/bash
varA=10
varB=20
varC=4
result=""
result=$((($varA+$varB)/$varC))
echo $result

--20 result 
#> sh calculate.sh 
7

#########calculate#########


######detect web status###########
--10 script-A.sh      ###use temp file save mid values
set -u
var_orgin=""
var_new="new_var"
saved_var_file="saved_var"
[ -e "$saved_var_file" ] || touch "$saved_var_file" 
[ -e "$var_new" ] || touch "$var_new" 
while(true)
do
var_orgin=$(cat "$saved_var_file")    
parallel -a websites -j 4 -k 'curl -sL --connect-timeout 2 \ 
        -w "%{url_effective} %{http_code}\n"  \ 
        {} -o  /dev/null' >"$var_new" 
awk -v af="new_var" -v bf="saved_var" 'FNR==NR{temp[$1]=$2}
     FNR!=NR{
     if(temp[$1]!=$2)
             {system("cp new_var saved_var")}
     }' "$var_new" "$saved_var_file"      
done

--or script-B    ####use variables save mid values,call by issue source script-B 

#!/bin/bash
set -u
result_old=${result_old:=""}
result_new=${result_new:=""}

while(true)
do
        result_new=$(parallel -a websites -j 4 -k \
        'curl -sL --connect-timeout 2 \
        -w "%{url_effective} %{http_code}\n"  \
        {} -o  /dev/null')

                
        awk 'FNR==NR{
        temp[$1]=$2
            }

        FNR!=NR{
        if(temp[$1]!=$2)
             {
               print strftime("%H:%M-%m%d-%Y",systime()),"FATAL ERROR:",$1,"status changed from",$2,"to",temp[$1] >"/path/2/log/file"
             }
        }' <(echo -e "$result_new") <(echo -e "$result_old")               


        if [[ "$result_new" != "$result_old" ]]
        then
            result_old="$result_new"
        fi

        sleep 2s
done

--20 websites content
www.abc.com
www.abc.com:8080


--30 call
sh script.sh
or 
source script.sh ####use var save mid values

--40 result
12:18-0215-2012 FATAL ERROR: HTTP://www.abc.com/ status changed from 404 to 200
######detect web status###########


######auto create data partition###################
#> cat auto-partition.sh 
--10 requirement
--1 1GB disk in /dev/sdc,fdisk to ext4,mount on /data

--20 bash script
#!/bin/bash
set -u
devicePath="/dev/sdc"
filePath="/data"
devicePartition="/dev/sdc5"
fstabFile="/etc/fstab"
fileType=ext4
sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' <<eof |fdisk "$devicePath"    ####fdisk operation
n #new
e #extend
  # space
  # space
  # space
n #logical
l #logical
  # space
  # space
w #
eof


[[ -d "$filePath" ]] || mkdir -p "$filePath"
mkfs."$fileType" "$devicePartition"
deviceUUID=$(blkid|grep "$devicePartition"|awk '{print $2}'|sed  's:"::g')

cp "$fstabFile" /tmp/                                          ###backup && write to fstab             
echo "$deviceUUID    $filePath    "$fileType"     defaults       0 0" >>"$fstabFile"

mount -a

######auto create data partition###################



##########detecv port status V4####################
----10 main prog
#cat /data/backup/detectServiceStatusV4.mon01.sh

#!/bin/bash
PATH="/usr/local/bin:/usr/bin:/bin"
export PATH
managedServiceFile="/data/backup/managedServiceListMon01"
logFile="/var/log/serviceStatusLogs/serviceStatusLog"
operationDate=$(date +%Y%m%d-%H%M)
echo -n "$operationDate:">"$logFile"
###每次的操作输入到一个文件，多个错误拼接到一行
while IFS= read -r managedServiceItem
do(
        if echo "$managedServiceItem"|grep '#' &>/dev/null
        then
           continue
        fi

        host=$(echo "$managedServiceItem"|awk '{print $1}')
        port=$(echo "$managedServiceItem"|awk '{print $2}')
        name=$(echo "$managedServiceItem"|awk '{print $3}')
        if ！ nc -w 2 "$host" "$port" < /dev/null &>/dev/null
                echo -n "WRONG $name ">>"$logFile"
        fi)&
done <"$managedServiceFile"
wait
echo "">>"$logFile"              ##打印换行
sed -i 's# WRONG##g' "$logFile"  ##删除多余的WRONG字符

----20 cfg
# cat managedServiceListMon01
192.168.2.56        3307        haproxy1
192.168.2.57        3307        haproyx2
192.168.2.56        3306        mysql2

----30 output
##输出格式：2017xxxx：WRONG HOST1 HOST2  .....
##########detecv port status V4 END侦测端口开启状态 ####################


####here document var expand and not in same line
$> cat here-with-para.sh 
--10
#!/bin/bash
NAME=ZHANGSAN
cat <<-ENDOFMESSAGE
        \$NAME=$NAME
ENDOFMESSAGE



--20
$> sh here-with-para.sh
  $NAME=ZHANGSAN

####here document var expand and not in same line
############install vsftpd and nfs
#!/bin/bash
####10 variables set
set -u
PROJECT_BASE=prj_item
FTP_USER_NAME="$PROJECT_BASE"-ftpuser
FTP_USER_PASSWORD=79-dc1e
FTP_USER_HOME=/data/"$PROJECT_BASE"
FTP_CONTROL=21
FTP_WAN_CONTROL=5021
FTP_PORT_START=5021
FTP_PORT_END=5030
FTP_GROUP=ftp_group
FTP_CFG_FILE=/etc/vsftpd/vsftpd.conf
PERMIT_NFS_LAN='172.16.48.*'
SSH_CFG_FILE=/etc/ssh/sshd_config
PUBLIC_IP=$(curl -L cindy.example.com/ip.php)
NFS_CFG_FILE=/etc/exports
SELINUX_CFG_FILE=/etc/selinux/config
MNT_BASE=/mnt/nfs/
LOCAL_SUBNET="172.16"
LOCAL_IP=$(ip addr show|grep "$LOCAL_SUBNET"|awk '{print $2}'|sed -e 's:/.*$::g')
AZURE_HOST_NAME=B-SFWM-FILE8
DEVICE_PATH="/dev/sdd"
FILE_PATH="/data/$PROJECT_BASE"
DEVICE_PARTITION="/dev/sdd5"
FSTAB_FILE="/etc/fstab"
FILE_TYPE=ext4
OPERATIONVM=$(hostname)
SCRIPTERRORLOG=/root/t.txt
ESP_NFS_DEBUG_FILE=/ect/custom-scripts/esp-detect.sh
####20 function set
INSTALL_VSFTPD(){
sed -i 's:SELINUX=enforcing:SELINUX=disabled:g' "$SELINUX_CFG_FILE"
yum install -y vsftpd
mv "$FTP_CFG_FILE" /tmp

echo "
anonymous_enable=NO
local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
xferlog_enable=YES
connect_from_port_20=NO
xferlog_std_format=YES
ascii_upload_enable=YES
ascii_download_enable=YES
chroot_local_user=YES
listen=YES
listen_ipv6=NO
allow_writeable_chroot=YES
tcp_wrappers=YES
use_localtime=YES
pam_service_name=vsftpd
userlist_enable=YES
tcp_wrappers=YES
use_localtime=YES
pasv_enable=Yes
pasv_address=your_public_ip
pasv_min_port="$FTP_PORT_START"
pasv_max_port="$FTP_PORT_END"
port_enable=YES
xferlog_enable=YES
xferlog_file=/var/log/xferlog
vsftpd_log_file=/var/log/vsftpd.log
" >"$FTP_CFG_FILE"


sed -i "s:your_public_ip:$PUBLIC_IP:g" "$FTP_CFG_FILE"

firewall-cmd --add-port="$FTP_CONTROL"/tcp --permanent

seq "$FTP_PORT_START" "$FTP_PORT_END"|xargs -t -P 1 -n 1 -I {} firewall-cmd --add-port={}/tcp --permanent

firewall-cmd --reload

systemctl restart vsftpd
systemctl enable vsftpd
}

CREATE_FTP_USER(){

if ! ls "$FTP_USER_HOME"/Image
then
	mkdir -p "$FTP_USER_HOME"/Image
fi


if ! cat /etc/group |grep "$FTP_GROUP"
then
	groupadd "$FTP_GROUP"
fi

if ! cat /etc/passwd |grep "$FTP_USER_NAME"
then
	useradd -d "$FTP_USER_HOME" "$FTP_USER_NAME" -g "$FTP_GROUP"
fi

echo "$FTP_USER_PASSWORD"| passwd "$FTP_USER_NAME" --stdin

chown -R "$FTP_USER_NAME"."$FTP_GROUP" "$FTP_USER_HOME"

if ! grep "$FTP_GROUP" "$SSH_CFG_FILE"
then
	sed -i -e "\$aDenygroups "$FTP_GROUP"" "$SSH_CFG_FILE"  && systemctl restart sshd
fi
}
INSTALL_NFS_SERVER(){
yum install -y nfs-utils
systemctl enable nfs-server
systemctl enable nfs-lock
systemctl enable nfs-idmap
systemctl restart rpcbind
systemctl restart nfs-server
systemctl restart nfs-lock
systemctl restart nfs-idmap

echo ""$FTP_USER_HOME" "$PERMIT_NFS_LAN"(rw,sync,no_root_squash,no_all_squash)" >>"$NFS_CFG_FILE"

firewall-cmd --permanent --zone=public --add-service=nfs
firewall-cmd --add-port 111/tcp --permanent
firewall-cmd --add-port 2049/tcp --permanent
firewall-cmd --reload

}

SET_NFS_CLIENT(){
if systemctl status nfs-server|grep ' active' &>/dev/null && systemctl status vsftpd |grep ' active' &>/dev/null
then
echo ""
echo "==========running ON ESP1=========" 
echo "mkdir -p "$MNT_BASE$FTP_USER_NAME" && mount -t nfs "$LOCAL_IP":"$FTP_USER_HOME" "$MNT_BASE$FTP_USER_NAME""
cat <<Endofmessage
echo "if ! ls $MNT_BASE$FTP_USER_NAME/Image 
then 
        echo "WRONG $MNT_BASE$FTP_USER_NAME nfs ON $OPERATIONVM" >>$SCRIPTERRORLOG
fi" >>$ESP_NFS_DEBUG_FILE
Endofmessage
	echo "==========running ON ESP1=========" 
	echo ""
fi
}

SET_DISK_PARTITION(){
sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' <<eof |fdisk "$DEVICE_PATH"
n #new
e #extend
  # space
  # space
  # space
n #logical
l #logical
  # space
  # space
w #
eof


[[ -d "$FILE_PATH" ]] || mkdir -p "$FILE_PATH"
mkfs."$FILE_TYPE" "$DEVICE_PARTITION"
DEVICE_UUID=$(blkid|grep "$DEVICE_PARTITION"|awk '{print $2}'|sed  's:"::g')

cp "$FSTAB_FILE" /tmp/                                         
echo "$DEVICE_UUID    $FILE_PATH    "$FILE_TYPE"     defaults       0 0" >>"$FSTAB_FILE"

mount -a

}

SET_AZURE_ENDPOINT(){
if systemctl status nfs-server|grep ' active' &>/dev/null && systemctl status vsftpd |grep ' active' &>/dev/null
then
echo ""
cat <<Endofmessage

echo "==========running ON azure-CLI=========" 
echo "azure vm endpoint create "$AZURE_HOST_NAME" "$FTP_WAN_CONTROL" "$FTP_CONTROL""
echo "seq "$FTP_PORT_START" "$FTP_PORT_END"|xargs -P 1 -n 1 -t -I {} azure vm endpoint create "$AZURE_HOST_NAME" {} {}"
echo "==========running ON azure-CLI=========" 

Endofmessage

fi
}


####30 main section

SET_DISK_PARTITION
CREATE_FTP_USER
INSTALL_VSFTPD
INSTALL_NFS_SERVER
SET_NFS_CLIENT
SET_AZURE_ENDPOINT
######End bash-script.memo #######
######Endmemoof bash-script.memo #######
