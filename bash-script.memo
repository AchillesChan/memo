######Startmemoof bash-script.memo #######
######Start bash-script.memo #######


####source in same process and set default var##
--10 script
$> cat var-in-same-process.sh 
#!/bin/bash
set -u            ##if var not exist ,exit
result_old=${result_old:=0}  ##if not exist,set to 0,or keep orgin
result_new=${result_new:=0}  ##if not exist,set to 0,or keep orgin
while(true)
sleep 1s
do
        echo "result_old is $result_old"
        printf "result_new is $result_new"
        printf "\n"
        
        if ! ls f2 &>/dev/null
        then
                result_new=1
        else
                result_new=0
        fi

        if [[ "$result_new" -ne "$result_old" ]]
        then  
               echo "result change from $result_old to $result_new"
               result_old="$result_new"
        fi
done

--20 initial and call
$> unset result_old
$> unset result_new
$> echo $result_old
-bash: result_old: unbound variable
$> echo $result_new
-bash: result_new: unbound variable   ###initial completely
$> source var-in-same-process.sh
result_old is 0                      ###var value from ${result_old:=0}
result_new is 0                      ###var value from ${result_new:=0}  
result change from 0 to 1            ###f2 not exist,status change to 1
result_old is 1
result_new is 1
......

Ctrl+c                              ####end it 


--25 view vars,result saved in vars
$> echo $result_old                                                                                   
1
$> echo $result_new
1


--30 swith 
$> mv f3 f2                       ###f2 exist now

--40 swith result
$> source var-in-same-process.sh
result_old is 1
result_new is 1                 ####last saved vars
result change from 1 to 0       ###status changed,so result change
result_old is 0
result_new is 0

####source in same process and set default var##



####calculate how many days no data####

--10 script
$> cat calculate-how-many-days-backup-file-not-received.sh 
#!bin/bash
bak_path_list_file=backup_list
while IFS= read -r backup_item
do
        if echo "$backup_item"|grep '#' &>/dev/null
        then
           continue
        fi
        
        item_name=$(echo "$backup_item" |awk '{print $1}')
        item_path=$(echo "$backup_item" |awk '{print $2}')
        item_max_days=$(echo "$backup_item" |awk '{print $3}')

        file_timestamp=$(find "$item_path" -type f -printf '%T@ %p\n' | sort -nr |head -1| cut -f1- -d" "|awk '{print $1}'|awk -F. '{print $1}')
        current_timestamp=$(date +%s)
        diff_timestamp_in_days=$((($current_timestamp-$file_timestamp)/86400))
        if (("$diff_timestamp_in_days" > "item_max_days"))
        then
            echo "$item_name" has "$diff_timestamp_in_days" days no date.
        fi
done <"$bak_path_list_file"

--20 config file
$> cat backup_list 
###name         path               max-days########
web-db         /backup/web             3
web-image      /backup/image/          3
app22-db       /backup/app22db         2
app2-mong      /backup/app2            2
App2-db        /backup/App2db          2
App2-mongo     /backup/App2mongo       2
App-mongo      /backup/App             2
App-db         /backup/App             2

--30 running result 
$> sh calculate-how-many-days-backup-file-not-received.sh 
App-mongo has 16 days no date.
App-db has 16 days no date.

####calculate how many days no data####


#########calculate#########
--10 code
#> cat calculate.sh 
#!/bin/bash
varA=10
varB=20
varC=4
result=""
result=$((($varA+$varB)/$varC))
echo $result

--20 result 
#> sh calculate.sh 
7

#########calculate#########


######detect web status###########
--10 script-A.sh      ###use temp file save mid values
set -u
var_orgin=""
var_new="new_var"
saved_var_file="saved_var"
[ -e "$saved_var_file" ] || touch "$saved_var_file" 
[ -e "$var_new" ] || touch "$var_new" 
while(true)
do
var_orgin=$(cat "$saved_var_file")    
parallel -a websites -j 4 -k 'curl -sL --connect-timeout 2 \ 
        -w "%{url_effective} %{http_code}\n"  \ 
        {} -o  /dev/null' >"$var_new" 
awk -v af="new_var" -v bf="saved_var" 'FNR==NR{temp[$1]=$2}
     FNR!=NR{
     if(temp[$1]!=$2)
             {system("cp new_var saved_var")}
     }' "$var_new" "$saved_var_file"      
done

--or script-B    ####use variables save mid values,call by issue source script-B 

#!/bin/bash
set -u
result_old=${result_old:=""}
result_new=${result_new:=""}

while(true)
do
        result_new=$(parallel -a websites -j 4 -k \
        'curl -sL --connect-timeout 2 \
        -w "%{url_effective} %{http_code}\n"  \
        {} -o  /dev/null')

                
        awk 'FNR==NR{
        temp[$1]=$2
            }

        FNR!=NR{
        if(temp[$1]!=$2)
             {
                     print $1,"status changed from",$2,"to",temp[$1]
             }
        }' <(echo -e "$result_new") <(echo -e "$result_old")               


        if [[ "$result_new" != "$result_old" ]]
        then
            result_old="$result_new"
        fi

        sleep 2s
done

--20 websites content
www.abc.com
www.abc.com:8080


--30 call
sh script.sh
or 
source script.sh ####use var save mid values

--40 result
www.abc.com status changed from 200 to 000
######detect web status###########


######auto create data partition###################
#> cat auto-partition.sh 
--10 requirement
--1 1GB disk in /dev/sdc,fdisk to ext4,mount on /data

--20 bash script
#!/bin/bash
set -u
devicePath="/dev/sdc"
filePath="/data"
devicePartition="/dev/sdc5"
fstabFile="/etc/fstab"
fileType=ext4
sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' <<eof |fdisk "$devicePath"    ####fdisk operation
n #new
e #extend
  # space
  # space
  # space
n #logical
l #logical
  # space
  # space
w #
eof


[[ -d "$filePath" ]] || mkdir -p "$filePath"
mkfs."$fileType" "$devicePartition"
deviceUUID=$(blkid|grep "$devicePartition"|awk '{print $2}'|sed  's:"::g')

cp "$fstabFile" /tmp/                                          ###backup && write to fstab             
echo "$deviceUUID    $filePath    "$fileType"     defaults       0 0" >>"$fstabFile"

mount -a

######auto create data partition###################



##########detecv port status V4####################
----10 main prog
#cat /data/backup/detectServiceStatusV4.mon01.sh

#!/bin/bash
PATH="/usr/local/bin:/usr/bin:/bin"
export PATH
managedServiceFile="/data/backup/managedServiceListMon01"
logFile="/var/log/serviceStatusLogs/serviceStatusLog"
operationDate=$(date +%Y%m%d-%H%M)
echo -n "$operationDate:">"$logFile"
###每次的操作输入到一个文件，多个错误拼接到一行
while IFS= read -r managedServiceItem
do(
        if echo "$managedServiceItem"|grep '#' &>/dev/null
        then
           continue
        fi

        host=$(echo "$managedServiceItem"|awk '{print $1}')
        port=$(echo "$managedServiceItem"|awk '{print $2}')
        name=$(echo "$managedServiceItem"|awk '{print $3}')
        if ！ nc -w 2 "$host" "$port" < /dev/null &>/dev/null
                echo -n "WRONG $name ">>"$logFile"
        fi)&
done <"$managedServiceFile"
wait
echo "">>"$logFile"              ##打印换行
sed -i 's# WRONG##g' "$logFile"  ##删除多余的WRONG字符

----20 cfg
# cat managedServiceListMon01
192.168.2.56        3307        haproxy1
192.168.2.57        3307        haproyx2
192.168.2.56        3306        mysql2

----30 output
##输出格式：2017xxxx：WRONG HOST1 HOST2  .....
##########detecv port status V4 END侦测端口开启状态 ####################
######End bash-script.memo #######
######Endmemoof bash-script.memo #######
