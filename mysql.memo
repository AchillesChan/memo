######Startmemoof mysql.memo #######
######Start mysql.memo #######
###disable binlog####
[mysqld]
skip-log-bin

###disable binlog####



#####view binlog status
mysql> select @@log_bin;
+-----------+
| @@log_bin |
+-----------+
|         0 |
+-----------+
1 row in set (0.00 sec)


mysql> show master status;

#####view binlog status
####int(n) storage size and display style
https://stackoverflow.com/questions/5634104/what-is-the-size-of-column-of-int11-in-mysql-in-bytes


###compute innodb buffer hit rate
The efficiency measure that determines how well a key cache is operating is its hit rate:
the rate at which key requests are satisfied from the cache without reading keys from
disk. If a key is in the cache, it’s a hit; if not, it’s a miss. The following expression computes
the hit rate, where reads and requests indicate the number of disk reads and number
of requests, respectively:
1 - (reads / requests)
To apply the expression to InnoDB or MyISAM, plug in the appropriate status variables:
1 - (Innodb_buffer_pool_reads / Innodb_buffer_pool_read_requests)
1 - (Key_reads / Key_read_requests)

====below is clase

USE INFORMATION_SCHEMA;

SET @reads = (SELECT VARIABLE_VALUE FROM GLOBAL_STATUS
WHERE VARIABLE_NAME = 'INNODB_BUFFER_POOL_READS');
SET @requests = (SELECT VARIABLE_VALUE FROM GLOBAL_STATUS
WHERE VARIABLE_NAME = 'INNODB_BUFFER_POOL_READ_REQUESTS');
SET @hit_rate = TRUNCATE(IFNULL(1 - (@reads/@requests), 0), 4);
SELECT 'InnoDB key cache hit rate' AS Message,
@reads, @requests, @hit_rate;

###compute innodb buffer hit rate


###select tips 
--10 regexp
mysql> select user from user where user REGEXP 'z.*x$';
+--------+
| user   |
+--------+
| zabbix |
| zabbix |
| zabbix |
+--------+
3 rows in set (0.00 sec)

--20 wild code
mysql> select user from user where user like 'z_bix';
Empty set (0.00 sec)

mysql> select user from user where user like 'z__bix';
+--------+
| user   |
+--------+
| zabbix |
| zabbix |
| zabbix |
+--------+
3 rows in set (0.00 sec)

mysql> select user from user where user like 'z%bix';
+--------+
| user   |
+--------+
| zabbix |
| zabbix |
| zabbix |
+--------+
3 rows in set (0.00 sec)



###select tips
####special char
mysql> create  table `test table` (id int,name char(10)); ###use ` as delimiter 
Query OK, 0 rows affected (0.09 sec)
mysql> \P /usr/bin/more
PAGER set to '/usr/bin/more'
mysql> help insert

mysql> show tables;
+--------------------+
| Tables_in_test dbs |
+--------------------+
| test table         |
+--------------------+
1 row in set (0.00 sec)

mysql> insert into `test table` values (1,'zhang'),(2,'wang');
Query OK, 2 rows affected (0.01 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> select * from 'test table';
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''test table'' at line 1
mysql> select * from `test table`;
+------+-------+
| id   | name  |
+------+-------+
|    1 | zhang |
|    2 | wang  |
+------+-------+
2 rows in set (0.00 sec)

mysql> insert into `test table` values (3,`zhang'san`),(4,`wang' 'er`);
ERROR 1054 (42S22): Unknown column 'zhang'san' in 'field list'
mysql> insert into `test table` values (3,'zhang\'san'),(4,'wang' 'er');
Query OK, 2 rows affected (0.02 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> select * from `test table`;
+------+-----------+
| id   | name      |
+------+-----------+
|    1 | zhang     |
|    2 | wang      |
|    3 | zhang'san |
|    4 | wanger    |
+------+-----------+
4 rows in set (0.00 sec)

mysql> insert into `test table` values (5,'zhao\ si'); ##use ' and \ as esc char
Query OK, 1 row affected (0.01 sec)

mysql> select * from `test table`;

+------+-----------+
| id   | name      |
+------+-----------+
|    1 | zhang     |
|    2 | wang      |
|    3 | zhang'san |
|    4 | wanger    |
|    5 | zhao si   |
+------+-----------+
5 rows in set (0.00 sec)

####run mysql command on shell
--10
echo "select user,host,password from user where user='db-name'"|mysql --skip-column-names -B -uroot -h127.0.0.1 -p mysql;
Enter password: 
db-name  127.0.0.1       *encrypted-password
db-name  localhost       *encrypted-password

--20
mysql --skip-column-names -B -uroot -h127.0.0.1 -p -e "select user,host,password from user where user='db-name'" mysql
Enter password: 
db-name  127.0.0.1       *encrypted-password
db-name  localhost       *encrypted-password

--30 
-B batch mode;--skip-column-names purge title

!!!!An INT will always be 4 bytes no matter what length is specified.

    TINYINT = 1 byte (8 bit)
    SMALLINT = 2 bytes (16 bit)
    MEDIUMINT = 3 bytes (24 bit)
    INT = 4 bytes (32 bit)
    BIGINT = 8 bytes (64 bit).

!!!!The length just specifies how many characters to display when selecting data with the mysql command line client.

... and the maximum value will be 2147483647 (Signed) or 4294967295 (Unsigned)



    if the value has less digit than 'somenumber', ZEROFILL will prepend zeros.

        INT(5) ZEROFILL with the stored value of 32 will show 00032
        INT(5) with the stored value of 32 will show 32
        INT with the stored value of 32 will show 32

    if the value has more digit than 'somenumber', the stored value will be shown.

        INT(3) ZEROFILL with the stored value of 250000 will show 250000
        INT(3) with the stored value of 250000 will show 250000
        INT with the stored value of 250000 will show 250000

The similar applies to BIGINT, MEDIUMINT, SMALLINT, and TINYINT as well.

!!!!The length does absolutely nothing unless you use ZEROFILL.

####int(n) storage size and display style



###backup windows mysql with powershell exclude specfic files###
$MySQLPath = "D:\mysql\bin"
$Hostname = "localhost"
$Username = "root"
$Password = "my-pwd*"
$db1BackupFilePrefix="d:\db1Backup"
$db2BackupFilePrefix="d:\db2Backup"
$opTime=get-date -format yyyyMd-HHmm
$vmName=hostname.exe

[System.Console]::OutputEncoding = [System.Text.Encoding]::UTF8       
& $MySQLPath\mysqldump.exe -h"$HostName" -u"$Username" -p"$Password" db1  | Out-File $db2BackupFilePrefix-$vmName-$opTime.sql -Encoding utf8

$Tabl = [System.Collections.Generic.List[String]] (
    & $MySQLPath\mysql.exe -h"$Hostname" -u"$Username" -p"$Password" -B -N -e"show tabl;" sconfig |Where-Object{$_ -notmatch "exclude_.*_\d{8}$"}
)
& $MySQLPath\mysqldump.exe -h"$HostName" -u"$Username" -p"$Password" db2  $($Tabl) | Out-File $db1BackupFilePrefix-$vmName-$opTime.sql -Encoding utf8

###backup windows mysql with powershell exclude specfic files###



windows io acid security set?
innodb_flush_log_at_trx_commit=1
innodb_flush_method=unbuffered

windows io acid security set?


#####reset mysql 5.7 password######
--10
$>systemctl stop mysqld
$>mysqld --user=mysql --skip-grant-tables &

--20
mysql> UPDATE mysql.user SET authentication_string=PASSWORD('my_password') WHERE User='root';
Query OK, 1 row affected, 1 warning (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 1

mysql> flush privileges;
Query OK, 0 rows affected (0.00 sec)

--30 
$>pkill mysqld
$>systemctl start mysqld 
#####reset mysql 5.7 password######


#####optimizing debug script 
https://github.com/major/MySQLTuner-perl
--10
wget http://mysqltuner.pl/ -O mysqltuner.pl
--20
perl mysqltuner.pl --host targetDNS_IP --user admin_user --pass admin_password

#####optimizing debug script 

########SQL: Find out number of rows of all tables within a MySQL database
mysql>SELECT table_name, table_rows FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'your_database' order by table_rows;

########SQL: Find out number of rows of all tables within a MySQL database

##############source mysql in bash############
$>cat /etc/custom-scripts/backup-yc50-mysql.sh
#!/bin/bash
PATH=/usr/local/mysql/bin:$PATH
op_date=$(date +%Y%m%d-%H%M)
mysql_backup_file=/root/backup.sql
scriptErrorLog="/var/log/scriptErrorLog"
operationVM=$(hostname)
bak_password="bak-password"
if ! mysqldump -umybak -h127.0.0.1 -P23306 -p"$bak_password" --set-gtid-purged=OFF  backup-db1 backup-db2 > "$mysql_backup_file"

then
        echo "WRONG $op_date backup your-db database $0 ON $operationVM" >>$scriptErrorLog
fi

if ! mysql -pmypassword -e  'source /root/backup.sql' your-db_pro
then
        echo "WRONG $op_date restore your-db database $0 ON $operationVM" >>$scriptErrorLog
fi
##############source mysql in bash############


####profile analyze  ######

mysql> show variables like '%profil%';
+------------------------+-------+
| Variable_name          | Value |
+------------------------+-------+
| have_profiling         | YES   |
| profiling              | OFF   |
| profiling_history_size | 15    |
+------------------------+-------+
3 rows in set (0.00 sec)
   
mysql> set profiling = 1;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql> show variables like '%profil%';
+------------------------+-------+
| Variable_name          | Value |
+------------------------+-------+
| have_profiling         | YES   |
| profiling              | ON    |
| profiling_history_size | 15    |
+------------------------+-------+
3 rows in set (0.00 sec)


mysql>select * from t1 where create_time <'2017-09-24';


mysql> show profiles;
+----------+------------+---------------------------------------------------------------------------------------------------------------------------+
| Query_ID | Duration   | Query                                                                                                                     |
+----------+------------+---------------------------------------------------------------------------------------------------------------------------+
|       56 | 0.00567875 | select * from t1 where create_time <'2017-09-24'                                                                          |
+----------+------------+---------------------------------------------------------------------------------------------------------------------------+
15 rows in set, 1 warning (0.00 sec)

mysql> select sum(duration) FROM INFORMATION_SCHEMA.PROFILING  WHERE QUERY_ID = 56 into @total_time;
Query OK, 1 row affected, 1 warning (0.00 sec)

mysql> select @total_time;
+-------------+
| @total_time |
+-------------+
|    0.0567875|
+-------------+
1 row in set (0.00 sec)

mysql> select state,concat((round(duration/@total_time,4)*100),'%') as Percent FROM INFORMATION_SCHEMA.PROFILING WHERE QUERY_ID = 56;
+----------------------+------------------------------------------------+
| state                | Percent                                        |
+----------------------+------------------------------------------------+
| starting             | 2.1000%                                        |
| checking permissions | 0.2600%                                        |
| Opening tables       | 0.4800%                                        |
| init                 | 0.8500%                                        |
| System lock          | 0.4200%                                        |
| optimizing           | 0.2600%                                        |
| statistics           | 3.1700%                                        |
| preparing            | 0.5100%                                        |
| executing            | 0.1200%                                        |
| Sending data         | 88.1900%                                       |
| end                  | 0.2600%                                        |
| query end            | 0.9000%                                        |
| closing tables       | 0.2300%                                        |
| freeing items        | 1.8100%                                        |
| cleaning up          | 0.4600%                                        |
+----------------------+------------------------------------------------+
15 rows in set, 1 warning (0.00 sec)

####profile analyze ######


#####deferred join延迟关联#########

https://www.bennadel.com/blog/3168-high-performance-mysql-optimization-backups-and-replication-by-baron-schwartz-peter-zaitsev-and-vadim-tkachenko.htm
http://www.iheavy.com/2013/06/19/3-ways-to-optimize-for-paging-in-mysql/
http://superve.leanote.com/post/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E9%A1%B5%E4%BC%98%E5%8C%96

a)###
mysql> desc t1;
Current database: c_log

+-------------+-------------+------+-----+-------------------+----------------+
| Field       | Type        | Null | Key | Default           | Extra          |
+-------------+-------------+------+-----+-------------------+----------------+
| cip         | varchar(50) | YES  | MUL | NULL              |                |
| create_time | datetime    | NO   | MUL | CURRENT_TIMESTAMP |                |
| id          | int(11)     | NO   | PRI | NULL              | auto_increment |
+-------------+-------------+------+-----+-------------------+----------------+
3 rows in set (0.11 sec)

b)###
mysql> show index from t1;
+-------+------------+-----------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table | Non_unique | Key_name        | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-------+------------+-----------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| t1    |          0 | PRIMARY         |            1 | id          | A         |     1831515 |     NULL | NULL   |      | BTREE      |         |          

c)###
mysql> select count(1) from t1;
+----------+
| count(1) |
+----------+
|  1835986 |
+----------+
1 row in set (0.59 sec)

d1)### 1st clause                               //using(id) equl on t1.id = tmp.id here 
mysql> select t1.id,t1.create_time from t1 inner join (select id from t1 limit 1600000,3) as tmp using(id);
+---------+---------------------+
| id      | create_time         |
+---------+---------------------+
| 1600001 | 2018-02-19 14:26:18 |
| 1600002 | 2018-02-19 14:26:27 |
| 1600003 | 2018-02-19 14:27:06 |
+---------+---------------------+
3 rows in set (0.79 sec)

d2)### 2nd clause                             //on t1.id = tmp.id equl using(id) here
mysql> select t1.id,t1.create_time from t1 inner join (select id from t1 limit 1100000,3) as tmp on t1.id = tmp.id;
+---------+---------------------+
| id      | create_time         |
+---------+---------------------+
| 1100001 | 2018-01-07 23:35:17 |
| 1100002 | 2018-01-07 23:35:27 |
| 1100003 | 2018-01-07 23:35:40 |
+---------+---------------------+
3 rows in set (0.70 sec)

#####deferred join延迟关联#########

###Insert auto increment primary key to existing table
ALTER TABLE tbl ADD id INT PRIMARY KEY AUTO_INCREMENT;
###Insert auto increment primary key to existing table

####simulate the DeadLock issue################

1)initialize
 
mysql>use test ;
mysql> create table table_a ( emp int, ename varchar(100));
mysql> create table table_b ( emp int, ename varchar(100));
mysql> insert into table_a values (1,'anil');
mysql> insert into table_a values (2,'sunil');
mysql> insert into table_b values (2,'sunil');
mysql> insert into table_b values (1,'anil');

2)open two sessions,geneate deadlock

1st session
mysql> use test;
mysql> start transaction;                                            //not commit 
mysql> update table_a set ename='xxx' where emp=1;
mysql> update table_b set ename='xxx' where emp=1;

2nd session
mysql> use test;
mysql> start transaction;
mysql> update table_b set ename='xxx' where emp=1;                  //on 5.7.xx deadlock detected here
mysql> update table_a set ename='xxx' where emp=1;
mysql>  update table_a set ename='zzz' where emp=1;
ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction



3)verification

mysql> SHOW ENGINE INNODB STATUS\G;                                //key step
......omit something......
------------
TRANSACTIONS
------------
Trx id counter 14198
Purge done for trx's n:o < 14196 undo n:o < 0 state: running but idle
History list length 32
LIST OF TRANSACTIONS FOR EACH SESSION:
---TRANSACTION 14197, ACTIVE 785 sec starting index read
mysql tables in use 1, locked 1
LOCK WAIT 2 lock struct(s), heap size 1136, 4 row lock(s)        //thread id is show processlist id
MySQL thread id 186, OS thread handle 139730706839296, query id 1118246 localhost 127.0.0.1 root updating
update table_b set ename='xxx' where emp=1                       //deadlock sql clause
------- TRX HAS BEEN WAITING 5 SEC FOR THIS LOCK TO BE GRANTED:  //below is database and tables 
RECORD LOCKS space id 457 page no 3 n bits 72 index GEN_CLUST_INDEX of table `t1`.`table_b` trx id 14197 lock_mode X waiting
Record lock, heap no 2 PHYSICAL RECORD: n_fields 5; compact format; info bits 0
 0: len 6; hex 000000823f3f; asc     ??;;
 1: len 6; hex 00000000376a; asc     7j;;
 2: len 7; hex eb000001e00110; asc        ;;
.......omit something......
####simulate the Dead Lock issue################


###purge delete binary log
mysql>show binary logs;  //view result
mysql>PURGE BINARY LOGS TO 'mysql-bin.010';
or 
mysql>PURGE BINARY LOGS BEFORE '2008-04-02 22:46:26';
###purge delete binary log

####disable slow log or general log online
mysql>set global slow_query_log = off
and/or 
mysql>set global general_log =off

then add those in my.cnf

slow_query_log = off 
and/or
general_log =off

even free disk space  

$>echo "" > /path/to/log_file 

####disable slow log or general log 

###import table from another_table on different database
If you have shell access you may use mysqldump to dump the content of database1.table1 and pipe it to mysql to database2. The problem here is that table1 is still table1.

$>mysqldump --user=user1 --password=password1 database1 table1 \
| mysql --user=user2 --password=password2 database2

Maybe you need to rename table1 to table2 with another query. On the other way you might use sed to change table1 to table2 between the to pipes.

$>mysqldump --user=user1 --password=password1 database1 table1 \
| sed -e 's/`table1`/`table2`/' \
| mysql --user=user2 --password=password2 database2

If table2 already exists, you might add the parameters to the first mysqldump which dont let create the table-creates.

$>mysqldump --no-create-info --no-create-db --user=user1 --password=password1 database1 table1 \
| sed -e 's/`table1`/`table2`/' \
| mysql --user=user2 --password=password2 database2



mysql>CREATE TABLE db1.table1 SELECT * FROM db2.table1

###import table from another_table on different database


###get data input from another table
create table new_table as select field1,field2,...filedn from another_table
###get data input from another table

###use index from table 
select fld1,fld2.. from table t use index(index_name) where ... group by ...
###use index from table 

###set memory engine size(For Example 512MB)

mysql> set max_heap_table_size = 512 * 1024 *1024;

mysql> show variables like '%heap%'; //verification
+---------------------+-----------+
| Variable_name       | Value     |
+---------------------+-----------+
| max_heap_table_size | 536870912 |
+---------------------+-----------+
1 row in set (0.00 sec)

###set memory engine size


####windows mysql  中文乱码 on  powershell cmd
run
chcp 65001
####windows mysql  中文乱码 on  powershell cmd


######my.cnf config###############
server-id = 2
symbolic-links=0
event_scheduler=ON
log-bin = mysql-bin
binlog_format = MIXED
relay-log = relay-bin
gtid-mode = on
enforce-gtid-consistency = true
log-slave-updates = true
character-set-server=utf8
collation-server=utf8_general_ci
lower_case_table_names = 1
max_connect_errors = 1000
max_connections = 1000
skip-name-resolve = 1
binlog-ignore-db=mysql,information_schema,performance_schema,test

sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES
######my.cnf config###############


##############haproxy on azure##############################
=======================azure ilb set====================================
Topology
172.16.0.10--3306 frontend
172.16.0.11--3306 backend1 master 
172.16.0.12--3306 bacdend2 slave


先创建ILB
azure service internal-load-balancer add --serviceName your-service --internalLBName Mysqlilb  --subnet-name coredb-01 --static-virtualnetwork-ipaddress 172.16.0.10

然后附加endpoint到前面创建的ILB，注意-b参数(load balancer)，共两台机器
azure vm endpoint create your-service-DB02L 3306 -n mysqlELB --local-port 3307  --protocol tcp --probe-port 3307 --probe-protocol tcp --probe-interval 10 --probe-timeout 31 -b mysqllbs --internal-load-balancer-name Mysqlilb
azure vm endpoint create your-service-DB01L 3306 -n mysqlELB --local-port 3307  --protocol tcp --probe-port 3307 --probe-protocol tcp --probe-interval 10 --probe-timeout 31 -b mysqllbs --internal-load-balancer-name Mysqlilb

##下面这条计划使用3306工作端口，3307探测端口，使用nc -l生成探测端口，失败了
azure vm endpoint create your-service-DB01L 3306 -n mysqlELB --local-port 3306  --protocol tcp --probe-port 3307 --probe-protocol tcp --probe-interval 5 --probe-timeout 15 -b lbs --internal-load-balancer-name Mysqlilb

chael@linux-gzbl:~> azure vm endpoint list your-service-DB02L
info:    Executing command vm endpoint list
+ Getting virtual machines
data:    Name      Protocol  Public Port  Private Port  Virtual IP       EnableDirectServerReturn  Load Balanced
data:    --------  --------  -----------  ------------  ---------------  ------------------------  -------------
data:    mysqlELB  tcp       3306         3307                           false                     Yes
data:    SSH       tcp       60002        22            128.5.6.9  false                     No
info:    vm endpoint list command OK
Michael@linux-gzbl:~> azure vm endpoint list your-service-DB01L
info:    Executing command vm endpoint list
+ Getting virtual machines
data:    Name      Protocol  Public Port  Private Port  Virtual IP       EnableDirectServerReturn  Load Balanced
data:    --------  --------  -----------  ------------  ---------------  ------------------------  -------------
data:    mysqlELB  tcp       3306         3307          172.16.0.11     false                     Yes
data:    SSH       tcp       3002        22            128.5.6.9  false                     No
info:    vm endpoint list command OK
Michael@linux-gzbl:~> azure vm endpoint create your-service-DB02L 3306 -n mysqlELB --local-port 3307  --protocol tcp --probe-port 3307 --probe-protocol tcp --probe-interval 5 --probe-timeout 15 -b lbs --internal-load-balancer-name Mysqlilb



====powershell set=============
PS C:\Users\1> Get-AzureVM -ServiceName t-it -Name ilb1 |Add-AzureEndpoint -Name TCP-3306-3306 -Protocol tcp -LocalPort 3306 -PublicPort 3306 -ProbePort 3306 -InternalLoadBalancerName dbilb -LBSetName lbs -ProbeProtocol tcp| Update-AzureVM

OperationDescription OperationId                          OperationStatus
-------------------- -----------                          ---------------
Update-AzureVM       441bca73-64d0-4192-9c7a-8b9f84fdb0e8 Succeeded



PS C:\Users\1> Get-AzureVM -ServiceName t-it -Name ilb2 |Add-AzureEndpoint -Name TCP-3306-3306 -Protocol tcp -LocalPort 3306 -PublicPort 3306 -ProbePort 3306 -InternalLoadBalancerName dbilb -LBSetName lbs -ProbeProtocol tcp| Update-AzureVM
OperationDescription OperationId                          OperationStatus
-------------------- -----------                          ---------------
Update-AzureVM       430d7187-c766-45c4-b57e-d39e6d844674 Succeeded

====powershell set=============



######mysql haproxy port#############
# ss -tlnp |grep 3306
LISTEN     0      128                      :::3306                    :::*      users:(("mysqld",1972,15))

# ss -tlnp |grep 3307
LISTEN     0      128                       *:3307                     *:*      users:(("haproxy",2012,5))
######mysql haproxy port#############


=======================azure ilb set====================================

==================haproxy core cfg use mysql-check=====================                                                                                    
=======================================================================
=======================================================================
cat /etc/haproxy/haproxy.cfg


listen  proxy-mysql *:3307
        mode tcp
        option mysql-check
        balance roundrobin
        ####InternalLoadBalancerName IP IS 172.16.0.10,Access Port is 3306
        server db01 172.16.0.11:3306 check inter 1s rise 2 fall 2
        server db02 172.16.0.12:3306 check inter 1s rise 2 fall 2 backup
==================haproxy core cfg use mysql-check end=================
=======================================================================
=======================================================================
# nc -vz 172.16.0.10 3306
Connection to 172.16.0.10 3306 port [tcp/mysql] succeeded!


# mysql -uroot -h172.16.0.10 -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8169
Server version: 5.6.33-log Source distribution

Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| percona            |
| performance_schema |
+--------------------+
4 rows in set (0.20 sec)


==============db server down log on proxy
# cat /var/log/haproxy.log |grep Server
Dec  1 15:06:10 localhost haproxy[2025]: Server proxy-mysql/db01 is DOWN, reason: Layer4 connection problem, info: "Connection refused", check duration: 0ms. 0 active and 1 backup servers left. Running on backup. 0 sessions active, 0 requeued, 0 remaining in queue.
Dec  1 15:10:26 localhost haproxy[2025]: Server proxy-mysql/db01 is UP, reason: Layer7 check passed, code: 0, info: "5.6.33-log", check duration: 1ms. 1 active and 1 backup servers online. 0 sessions requeued, 0 total in queue.
Dec  1 15:17:03 localhost haproxy[2025]: Backup Server proxy-mysql/db02 is DOWN, reason: Layer4 connection problem, info: "Connection refused", check duration: 0ms. 1 active and 0 backup servers left. 0 sessions active, 0 requeued, 0 remaining in queue.
Dec  1 15:19:39 localhost haproxy[2025]: Backup Server proxy-mysql/db02 is UP, reason: Layer7 check passed, code: 0, info: "5.6.33-log", check duration: 0ms. 1 active and 1 backup servers online. 0 sessions requeued, 0 total in queue.

==============db server down log on proxy


##############haproxy on azure##############################





#####################################################################
#####################################################################
###########batch insert mysql bash script############################
# cat insert2mysql 
#!/bin/bash
PATH=/usr/local/mysql/bin:/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
rm mish
touch mish
chmod 755 mish

echo '#!/bin/bash'>mish                                                                                                                                                                                                                  
for((i=1;i<20000;i++))
do
        echo "mysql -ucs -h172.16.20.11 -pabcd123 -e 'insert into u value($i)' t">>mish;
done

======================generate like follow==========================
cat mish
mysql -ucs -h172.16.20.11 -pabcd123 -e 'insert into u value(1)' t
mysql -ucs -h172.16.20.11 -pabcd123 -e 'insert into u value(2)' t
mysql -ucs -h172.16.20.11 -pabcd123 -e 'insert into u value(3)' t
#####################################################################
#####################################################################
###########batch insert mysql bash script end########################





####index tuning 索引优化#####

燕十八
http://superve.leanote.com/cate/study


####index tuning 索引优化#####


###############mycli##########
http://www.jianshu.com/p/841e5477d3c0
https://www.tuicool.com/articles/ZnANBvq

tips:
1. Map mysql-server to localhost
## L represent map remote end to LOCAL 
## 23306 represent LOCAL  port
## 3306  represent REMOTE  mysql port
$>ssh -NCfqL 23306:localhost:3306 Michael@mysql-server

2. Test map status
$> nc -vz 127.0.0.1 23306
Connection to 127.0.0.1 23306 port [tcp/*] succeeded!

3. Connect  to localhost
$>mycli -uroot -h127.0.0.1 -P23306 -pPassword

4. Done
$> mycli -h127.0.0.1 -P23306 -uroot -pPassowd
Version: 1.8.1
Chat: https://gitter.im/dbcli/mycli
Mail: https://groups.google.com/forum/#!forum/mycli-users
Home: http://mycli.net
Thanks to the contributor - Anonymous
mysql root@127.0.0.1:(none)> show DATABASES;
+--------------------+
| Database           |
|--------------------|
| information_schema |
| deviceregister     |
| sys                |
| test               |
+--------------------+
14 rows in set
Time: 0.003s


5. Auto complete
##first input select from sysrole s;
##back to select input s. chose your need
##s is alias
## BUT mysql.user table didn't work 
###PATT SPACE,PUCTION ETC DETAIL

> select s.`IsDeleted`,s.`RoleName` from sysrole s;
+-------------+------------+
|   IsDeleted | RoleName   |
|-------------+------------|
|           0 |default_role|
+-------------+------------+

6. Warning 
 mycli didn't support delimiter
 create procedure must like this:
CREATE PROCEDURE dorepeat(p1 INT)
BEGIN
  SET @x = 0;
  REPEAT SET @x = @x + 1; UNTIL @x > p1 END REPEAT;
END;

10. connect to mysql over ssh
grant all privileges on *.* to 'root'@'::1' identified by 'your-password' with grant option;
flush privileges 
###############mycli##########



#####procedure variable from select clause
 
mysql> delimiter $
mysql> create procedure procedure_variable_from_select_clause() 
        begin 
        declare days_100_ago date;   ###100days ago 
        SELECT DATE_SUB(NOW(), INTERVAL 100 day) into days_100_ago;
        select count(*) from data_gps where timestamp < days_100_ago; end $
mysql> delimiter ;
mysql> call procedure_variable_from_select_clause();
########schuduler event
mysql> create definer= current_user 
    event event_name 
    on schedule at 'date' + interval time
    do something(or_procedure);




###############schedule with storage procedure ###############
###The follow 2 is manual input 
###official link    https://dev.mysql.com/doc/refman/5.6/en/create-event.html
create procedure sp1() begin insert into t1 value (5) ;end

create event myevent on schedule every 5 second starts current_timestamp + INTERVAL 1 minute do call sp1()


###The fllow is system status 
mysql> show create procedure sp1\G;
*************************** 1. row ***************************
。。。。。。
    Create Procedure: CREATE DEFINER=`root`@`localhost` PROCEDURE `sp1`()
begin insert into t1 value (5) ;end
。。。。。。


mysql> show create event myevent\G;
*************************** 1. row ***************************
               Event: myevent
            sql_mode: STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION
           time_zone: SYSTEM
        Create Event: CREATE DEFINER=`root`@`localhost` EVENT `myevent` ON SCHEDULE EVERY 5 SECOND STARTS '2017-11-13 01:30:39' ON COMPLETION NOT PRESERVE ENABLE DO call sp1()
character_set_client: utf8
collation_connection: utf8_general_ci
  Database Collation: latin1_swedish_ci
1 row in set (0.00 sec)

ERROR: 
No query specified

mysql> show processlist;
+----+-----------------+-----------+------+---------+------+-----------------------------+------------------+
| Id | User            | Host      | db   | Command | Time | State                       | Info             |
+----+-----------------+-----------+------+---------+------+-----------------------------+------------------+
| 26 | event_scheduler | localhost | NULL | Daemon  |    5 | Waiting for next activation | NULL             |
| 94 | root            | localhost | test | Query   |    0 | init                        | show processlist |
+----+-----------------+-----------+------+---------+------+-----------------------------+------------------+
2 rows in set (0.00 sec)

mysql> show events;
+------+---------+----------------+-----------+-----------+------------+----------------+----------------+---------------------+------+---------+------------+----------------------+----------------------+--------------------+
| Db   | Name    | Definer        | Time zone | Type      | Execute at | Interval value | Interval field | Starts              | Ends | Status  | Originator | character_set_client | collation_connection | Database Collation |
+------+---------+----------------+-----------+-----------+------------+----------------+----------------+---------------------+------+---------+------------+----------------------+----------------------+--------------------+
| test | myevent | root@localhost | SYSTEM    | RECURRING | NULL       | 5              | SECOND         | 2017-11-13 01:30:39 | NULL | ENABLED |          0 | utf8                 | utf8_general_ci      | latin1_swedish_ci  |
+------+---------+----------------+-----------+-----------+------------+----------------+----------------+---------------------+------+---------+------------+----------------------+----------------------+--------------------+
1 row in set (0.01 sec)

mysql> show variables like "%schedule%"; ####Here must be ON

+-----------------+-------+
| Variable_name   | Value |
+-----------------+-------+
| event_scheduler | ON    |
+-----------------+-------+
1 row in set (0.00 sec)
###############schedule with storage procedure ###############
===========================================  


############xtrabackup mysql##################################
####install
环境：CENTOS 7+Xtrabackup2.4+mysql 5.7（社区版本）
mysql5.7需要xtrabackup2.4
需要process权限
需要--host --port --socket参数

#####dependent install
yum install libev perl-devel rsync perl-Digest-MD5.x86_64 perl-DBD-MySQL
#yum install perl-devel
#yum install rsync
#yum install -y perl-Digest-MD5.x86_64
wget ftp://rpmfind.net/linux/dag/redhat/el6/en/x86_64/dag/RPMS/libev-4.15-1.el6.rf.x86_64.rpm
rpm -ivh libev-4.15-1.el6.rf.x86_64.rpm
#yum install -y perl-DBD-MySQL
rpm -ivh percona-xtrabackup-24-2.4.7-2.el7.x86_64.rpm 

###backup
1 full backup 
innobackupex --user=bkpuser --port=3306 \
--socket=/usr/local/mysql/mysql.sock \
--password=s3cret ./

2 single table backup
innobackupex --user=root --host=localhost --password=somePW \
--socket=/usr/local/mysql/mysql.sock \
--tables-file=/root/restore/foo.txt .
上面的tables-file需要接完整的路径

###restore
0 innobackupex --apply-log --exports your-backup-full-path ###do it on source 

1 systemctl stop mysqld

2 netstat -tlnp|grep mysqld ###确保已经关闭mysql

3 copy your-backup-full-path/tables-file to your-mysql-data-path

        cp your-restored-table.* /usr/local/mysql/data/your-database/
        cp: overwrite ‘/usr/local/mysql/data/your-database/your-restored-table.cfg’? y
        cp: overwrite ‘/usr/local/mysql/data/your-database/your-restored-table.exp’? y
        cp: overwrite ‘/usr/local/mysql/data/your-database/your-restored-table.frm’? y
        cp: overwrite ‘/usr/local/mysql/data/your-database/your-restored-table.ibd’? y

4 chown mysql-user.mysql-user your-mysql-data-path

5 systemctl start mysqld

6 对于数据库级别的恢复，如果还有events，procedure要恢复;需要使用同样的方法恢复mysql数据库

7 tips
模拟了文中丢弃表空间没有问题，
模拟了文中丢弃文件在从备份文件中copy back成功。
使用的是直接copy back后chown的方法，牛，
备份还原单个表，验证成功。





mysql> drop database your-database;
ERROR 1010 (HY000): Error dropping database (can't rmdir './your-database/', errno: 17)

# rm -f /path/2/your-database/*
mysql> drop database your-database;
Query OK, 0 rows affected (0.00 sec)



Partial Backups
使用这个方法还原单个数据库也成功，但文档上要还原mysql，我
没有做，模拟数据文件丢失，在原来的服务器上处理好copy-back，
shutdown mysql，copy back，chown ，start mysql，done



注意：backup后一定要innobackupex --apply-log --export your-backup-full-path
这个过程在源服务器的正常状态下运行，并且一定要成功，
备份结果才可以使用。
==============================================


====verification 
--10 from source
mysqldump -uroot -hlocalhost -pPassowrd -d dbs >dbs_only_structure.sql   ###only backup table structure

--20 backup single database from source
innobackupex --user=root --port=3306 -pPwd  --socket=/path/2/mysql.sock --databases=dbs --no-timestamp ./dest/path
or 
innobackupex --user=root --password=pwd --databases=dt1 /path/2/back/dir --no-timestamp --port=3306 --host=127.0.0.1
--25 prepare backup file,it's generate exp and cfg file when done                                                                                                              
innobackupex --user=root --port=3306 -pPwd --apply-log --export --socket=/path/2/mysql.sock --databases=dbs /backup/path

--30 5.6 -->5.7 format transfomation from destination

CREATE TABLE `foo` (. . .) ENGINE=InnoDB ROW_FORMAT=compact
or
Alter TABLE `foo` (. . .) ENGINE=InnoDB ROW_FORMAT=compact

--40 discard tablespace from destination
ALTER TABLE tbls discard TABLESPACE;
set FOREIGN_KEY_CHECKS=0;
copy *.exp *.ibd to data directroy
chown -R mysql.mysql data\dbs

--50 import tablespace from destination

ALTER TABLE tbls IMPORT TABLESPACE;
set FOREIGN_KEY_CHECKS=1;

############xtrabackup mysql##################################



#####忘记root密码Linux 5.7.16#####

0 official link https://dev.mysql.com/doc/refman/5.7/en/resetting-permissions.html 

1 shell>$ pwd #在该目录编辑mysql-init   
/usr/local/mysql

2 shell>$ cat mysql-init 
alter user 'root'@'localhost' identified by 'your-temp-password';

3 shell>$ /usr/local/mysql/bin/mysqld --user=mysql --init-file=/usr/local/mysql/mysql-init &

4 shell>$ mysql -uroot -hlocalhost -pyour-temp-password

5 mysql> alter user 'root'@'localhost' identified by 'your-new-password';

6 mysql> flush privileges;

7 mysql> exit;

8 shell>$ mysqladmin -uroot -hlocalhost shutdown -pyour-new-password

9 shell>$ systemctl start mysqld 

#####忘记root密码Linux 5.7.16#####




#########Windows 安装mysql#########
1 下载zip https://dev.mysql.com/downloads/mysql/
2 解压zip
3 copy TO DEST
4 VIM MY.INI
[mysqld]
basedir=D:\\mysql
datadir=D:\\mysql\\data
character-set-server=utf8
collation-server=utf8_general_ci
log-output=FILE
slow-query-log=1
slow_query_log_file="your-slow.log"
long_query_time=10
skip_ssl
# Binary Logging.
log-bin="mysql-bin.log"
lower_case_table_names = 1
innodb_buffer_pool_size=8192M
# Error Logging.
log-error="your-log.err"


# Server Id.
server-id=166


5 INITIAL （特权模式）
PATH/2/mysqld.exe --defaults-file=path2:\\my.ini  --initialize --console
##有疑问，运行mysqld.exe --verbose --help


6 设置service


\bin\mysqld.exe --install


sc delete MySQL ##删除mysql服务


7 忘记密码（备忘）
a 建立一个文件recover.txt；录入ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';


b mysqld --init-file=path2:\\recover.txt --console


c 重启后（不重起?)mysql -uroot -hlocalhost -p new-password


8 修改root密码
mysql> alter user 'root'@'localhost' identified by 'newPassword';
Query OK, 0 rows affected (0.00 sec)


mysql> flush privileges;
Query OK, 0 rows affected (0.00 sec)


9 验证：


E:\mysql\bin>mysql.exe -uroot -hlocalhost -p
Enter password: *********
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 3
Server version: 5.7.18 MySQL Community Server (GPL)


Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.


Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.


Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.


mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| test1              |
+--------------------+
5 rows in set (0.00 sec)
#########Windows 安装mysql end#########




##############


修改5.7 初始密码
You must reset your password using ALTER USER statement before executing this statement.
mysql> alter user 'root'@'localhost' identified by 'you-New-Password-here';
mysql>flush privileges;
##############
##################
http://www.voidcn.com/article/p-bwqyloth-bao.html
c++: internal compiler error: Killed (program cc1plus)


Please submit a full bug report,


with preprocessed source if appropriate.


See <http://bugzilla.redhat.com/bugzilla> for instructions.


make[2]: *** [unittest/gunit/CMakeFiles/merge_small_tests-t.dir/merge_small_tests.cc.o] Error 4


make[1]: *** [unittest/gunit/CMakeFiles/merge_small_tests-t.dir/all] Error 2


make: *** [all] Error 2


google一番后发现是 内存不够 swap分区也不够


解决方案：


[root@web_1 ~]# dd if=/dev/zero of=/swapfile bs=1k count=2048000


[root@web_1 ~]# mkswap /swapfile


[root@web_1 ~]# swapon /swapfile


###############


####mysql bash scrip 含特殊字符#####


# cat readmysql.sh
#!/bin/bash
##can not set password include ' \ ?
##and " need escape
##the pw itself is A1-@;,&!#$"]=+%!>.


pw="A1-@;,&!#$\"]=+%!>."   ##密码中的双引号前面加\转义
mysql -p"$pw" -e 'select user,host,authentication_string from user' mysql


# ./readmysql.sh
mysql: [Warning] Using a password on the command line interface can be insecure.
+-----------+-----------+-------------------------------------------+
| user      | host      | authentication_string                     |
+-----------+-----------+-------------------------------------------+
| root      | localhost | *466D1973D4FA6C14FF90DF20AC7AF3FC6C51AA09 |
| mysql.sys | localhost | *466D1973D4FA6C14FF90DF20AC7AF3FC6C51AA09 |
+-----------+-----------+-------------------------------------------+


####mysql bash scrip 含特殊字符END #####


Windows Mysql配置
# General and Slow logging.
log-output=FILE
general-log=1
general_log_file="your-app-WEB1.log"
slow-query-log=1
slow_query_log_file="your-app-WEB1-slow.log"
long_query_time=10


# Binary Logging.
log-bin="mysql-bin.log" #binlog，可以使用flush log截断。


# Error Logging.
log-error="your-app-WEB1.err"


# Server Id.
server-id=1


# The maximum amount of concurrent sessions the MySQL server will
# allow. One of these connections will be reserved for a user with
# SUPER privileges to allow the administrator to login even if the
# connection limit has been reached.
max_connections=151


性能测试sysbench
sysbench --test=fileio --file-total-size=15G prepare
sysbench --test=fileio --file-total-size=15G --file-test-mode=rndrw --init-rng=on --max-time=300 --max-requests=0 run


time sysbench --test=oltp --oltp-table-size=1000000 --db-driver=mysql --mysql-db=test --mysql-user=root prepare
time sysbench --test=oltp --oltp-table-size=1000000 --mysql-db=test --mysql-user=root/ --max-time=60 --oltp-read-only=on --max-requests=0 --num-threads=8 --db-driver=mysql  run


查询系统页大小
getconf PAGE_SIZE


查询表空间占用大小
mysql> use information_schema
mysql> select TABLE_SCHEMA,TABLE_NAME,INDEX_LENGTH as index_M,DATA_LENGTH as data_M from TABLES order by (INDEX_LENGTH+DATA_LENGTH) desc limit 10;


[mysql 5.5 锁]
Using the INFORMATION_SCHEMA Tables
Using SHOW INNODB STATUS to look at locks is definitely old-school, now that InnoDB
has INFORMATION_SCHEMA tables that expose its transactions and locks.
If you don’t see the tables, you are not using a new enough version of InnoDB. You
need at least MySQL 5.1 and the InnoDB plugin. If you’re using MySQL 5.1 and you
don’t see the INNODB_LOCKS table, check SHOW VARIABLES for the innodb_version variable.
If you don’t see the variable, you’re not using the InnoDB plugin, and you should be!
If you see the variable but you don’t have the tables, you need to ensure that the
plugin_load setting in the server configuration file includes the tables explicitly. Check
the MySQL manual for details.
Fortunately, in MySQL 5.5 you don’t need to worry about all of this; the modern version
of InnoDB is built right into the server.
The MySQL and InnoDB manuals have sample queries you can use against these tables,
which we won’t repeat here, but we’ll add a couple of our own. For example, here is a
query that shows who’s blocking and who’s waiting, and for how long:
SELECT r.trx_id AS waiting_trx_id, r.trx_mysql_thread_id AS waiting_thread,
TIMESTAMPDIFF(SECOND, r.trx_wait_started, CURRENT_TIMESTAMP) AS wait_time,
r.trx_query AS waiting_query,
l.lock_table AS waiting_table_lock,
b.trx_id AS blocking_trx_id, b.trx_mysql_thread_id AS blocking_thread,
SUBSTRING(p.host, 1, INSTR(p.host, ':') - 1) AS blocking_host,
SUBSTRING(p.host, INSTR(p.host, ':') +1) AS blocking_port,
IF(p.command = "Sleep", p.time, 0) AS idle_in_trx,
b.trx_query AS blocking_query
FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS AS w
INNER JOIN INFORMATION_SCHEMA.INNODB_TRX AS b ON b.trx_id = w.blocking_trx_id
INNER JOIN INFORMATION_SCHEMA.INNODB_TRX AS r ON r.trx_id = w.requesting_trx_id
INNER JOIN INFORMATION_SCHEMA.INNODB_LOCKS AS l ON w.requested_lock_id = l.lock_id
LEFT JOIN INFORMATION_SCHEMA.PROCESSLIST AS p ON p.id
= b.trx_mysql_thread_id
ORDER BY wait_time DESC\G
*************************** 1. row ***************************
waiting_trx_id: 5D03
waiting_thread: 3
wait_time: 6
waiting_query: select * from store limit 1 for update
waiting_table_lock: `sakila`.`store`
blocking_trx_id: 5D02
blocking_thread: 2
blocking_host: localhost
blocking_port: 40298
idle_in_trx: 8
blocking_query: NULL
The result shows that thread 3 has been waiting for 6 seconds to lock a row in the
store table. It is blocked on thread 2, which has been idle for 8 seconds.
If you’re suffering from a lot of locking due to threads that are idle in a transaction, the
following variation can show you how many queries are blocked on which threads,
without all the verbosity:
SELECT CONCAT('thread ', b.trx_mysql_thread_id, ' from ', p.host) AS who_blocks,
IF(p.command = "Sleep", p.time, 0) AS idle_in_trx,
MAX(TIMESTAMPDIFF(SECOND, r.trx_wait_started, NOW())) AS max_wait_time,
COUNT(*) AS num_waiters
FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS AS w
INNER JOIN INFORMATION_SCHEMA.INNODB_TRX AS b ON b.trx_id = w.blocking_trx_id
INNER JOIN INFORMATION_SCHEMA.INNODB_TRX AS r ON r.trx_id = w.requesting_trx_id
LEFT JOIN INFORMATION_SCHEMA.PROCESSLIST AS p ON p.id
= b.trx_mysql_thread_id
GROUP BY who_blocks ORDER BY num_waiters DESC\G
*************************** 1. row ***************************
who_blocks:
thread 2 from localhost:40298
idle_in_trx:
1016
max_wait_time:
37
num_waiters:
8
The result shows that thread 2 has now been idle for a much longer time, and at least
one thread has been waiting for up to 37 seconds for it to release its locks. There are
eight threads waiting for thread 2 to finish its work and commit.
We’ve found that idle-in-transaction locking is a common cause of emergency prob-
lems, and is sometimes difficult for people to diagnose. The pt-kill tool from Percona
Toolkit can be configured to kill long-running idle transactions to prevent this situation.
Percona Server itself also supports an idle transaction timeout parameter to accomplish
the same thing.


#查出processlist对应的DML语句
select * from INFORMATION_SCHEMA.PROCESSLIST where db = 'somedb';
| 5 | ssss| localhost:41060 | somedb| Sleep | 3 | | NULL | | 58169 | root |
localhost | somedb| Query | 0
| executing | select * from sometable where tblColumnName = 'someName'


创建range分区
create table orders1(id int not null)
engine = myisam，charset=utf8
partition by range(id) #写表选项的后边
(partition p0 values less than (100),
partition p1 values less than (200),
partition p2 values less than (300));


创建list分区
create table order4 (id int)
partition by list(id)
(partition la values in (1,3,5,7,9),
partition lb values in (2,4,6,8,10));


concat连接
select concat(user,'@',host) as 用户名,password as 密码 from user;
+--------------------+-------------------------------------------+
| 用户名 | 密码 |
+--------------------+-------------------------------------------+
| root@localhost | *F2AF67418B29。。。 |
| repl@localhost | *E74858DB86。。。 |
| user1@192.168.1.7 | *F2AF67418。。。 |
| backup@localhost | *F2AF6741 。。。|


替换函数（replace）


UPDATE [tablename]
SET [fieldname] = REPLACE([fieldname], 'text to find', 'text to replace with')
WHERE [fieldname] LIKE '%text to find%'


mysql> select user ,host,password from user where user='replspace';
+-----------+-------------+-------------------------------------------+
| user | host | password |
+-----------+-------------+-------------------------------------------+
| replspace | localhost | *E74858DB8
| replspace | 192.168.1.% | *F2AF6741
+-----------+-------------+-------------------------------------------+
2 rows in set (0.00 sec)


mysql> update user set user =replace(user,'replspace','repl');


mysql> select user ,host,password from user where user='repl';
+------+-------------+-------------------------------------------+
| user | host | password |
+------+-------------+-------------------------------------------+
| repl | localhost | *E74858DB
| repl | 192.168.1.% | *F2AF674
+------+-------------+-------------------------------------------+
2 rows in set (0.00 sec)


function/trigger/cursor程序结构
if condition then          case varname
                                          when varvalue1 then
          actions;                         actions;
                                           when varvalue2 then
                                                actions；
end if                             end case
------------------------------------------------------------------
label： loop #函数  while condition         repeat
     actions;                    actions;                    actions;
iterate label            end while                  until condition
                                                                 end repeat;


持有写锁自己可以写，但是别的不可以写
mysql> lock tables student write;
Query OK, 0 rows affected (0.00 sec)


mysql> insert into student values(5,'tang','F');
Query OK, 1 row affected (0.00 sec)


mysql> select * from student;
+------+------+--------+
| id | name | gender |
+------+------+--------+
| 1 | zhao | M |
| 2 | YANG | F |
| 3 | XIE | |
| 4 | wang | M |
| 5 | tang | F |
+------+------+--------+
5 rows in set (0.00 sec)


持有读锁自己都不可以写
mysql> lock tables student read;
Query OK, 0 rows affected (0.00 sec)


mysql> select * from student;
+------+------+--------+
| id | name | gender |
+------+------+--------+
| 1 | zhao | M |
| 2 | YANG | F |
| 3 | XIE | |
+------+------+--------+
3 rows in set (0.05 sec)


mysql> insert into student values(4,'wang','M');
ERROR 1099 (HY000): Table 'student' was locked with a READ lock and can't be updated


解锁 mysql> unlock tables; #不需要表名字


备份 # mysqldump -uroot -pyour-password -h 192.168.1.104 Sales goods orders >./Sales.sql


恢复  $> mysql -uroot -pyour-password -h192.168.1.104 Sales < ./Sales.sql
注意，没有能够恢复单张表


隔离级别


[Sales]> show variables like '%iso%';
+---------------+-----------------+
| Variable_name | Value |
+---------------+-----------------+
| tx_isolation | REPEATABLE-READ |
+---------------+-----------------+


[Sales]> SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;
Query OK, 0 rows affected (0.00 sec)


[Sales]> SHOW VARIABLES LIKE "%ISO%" ;


+---------------+--------------+
| Variable_name | Value |
+---------------+--------------+
| tx_isolation | SERIALIZABLE |
+---------------+--------------+


事务提交


[Sales]> SET AUTOCOMMIT =OFF;
[Sales]> START TRANSACTION;
[Sales]> UPDATE goods SET COUNT=21 WHERE GID=100;
[Sales]> commit;
Query OK, 0 rows affected (0.10 sec)


触发器
update good set num=num-new.much where gid=new.gid;(new代表新加的行，much代表数量的列;)


/×update good set num=num+old.much where gid=old.gid 删除语句×/


/*update good set num = num +old.much-new.much where gid=old.gid 更新操作 */


character_set_client: utf8
collation_connection: utf8_general_ci
Database Collation: utf8_general_ci


delimiter $
CREATE trigger t1


before insert


on orders


begin


declare rnum smallint;


select count into rnum from goods where gid=new.gid;


if new.amount>rnu. Then set new.amount=rnum;


end if;


update goods set count=count-new.amount where gid=new.gid;


end$


$>创建表DEPT


CREATE TABLE dept( /*部门表*/
deptno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,
dname VARCHAR(20) NOT NULL DEFAULT "",
loc VARCHAR(13) NOT NULL DEFAULT ""
) ENGINE=MyISAM DEFAULT CHARSET=utf8 ;


$>创建表EMP雇员
CREATE TABLE emp
(empno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,
ename VARCHAR(20) NOT NULL DEFAULT "",
job VARCHAR(9) NOT NULL DEFAULT "",
mgr MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,
hiredate DATE NOT NULL,
sal DECIMAL(7,2) NOT NULL,
comm DECIMAL(7,2) NOT NULL,
deptno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0
)ENGINE=MyISAM DEFAULT CHARSET=utf8 ;


$>工资级别表
CREATE TABLE salgrade
(
grade MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,
losal DECIMAL(17,2) NOT NULL,
hisal DECIMAL(17,2) NOT NULL
)ENGINE=MyISAM DEFAULT CHARSET=utf8;


INSERT INTO salgrade VALUES (1,700,1200);
INSERT INTO salgrade VALUES (2,1201,1400);


$> 随机产生字符串
$>定义一个新的命令结束符合
delimiter $$
$>删除自定的函数
drop function rand_string $$


$>这里我创建了一个函数.


create function rand_string(n INT)
returns varchar(255)
begin
declare chars_str varchar(100) default
'abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ';
declare return_str varchar(255) default '';
declare i int default 0;
while i < n do
set return_str =concat(return_str,substring(chars_str,floor(1+rand()*52),1));
set i = i + 1;
end while;
return return_str;
end $$


delimiter ;
select rand_string(6);


$> 随机产生部门编号
delimiter $$
drop function rand_num $$


$>这里我们又自定了一个函数
create function rand_num( )
returns int(5)
begin
declare i int default 0;
set i = floor(10+rand()*500);
return i;
end $$


delimiter ;
select rand_num();


$>******************************************
$>向emp表中插入记录(海量的数据)


delimiter $$
drop procedure insert_emp $$


create procedure insert_emp(in start int(10),in max_num int(10))
begin
declare i int default 0;
set autocommit = 0;
repeat
set i = i + 1;
insert into emp values ((start+i) ,rand_string(6),'SALESMAN',0001,curdate(),2000,400,rand_num());
until i = max_num
end repeat;
commit;
end $$


delimiter ;
$>调用刚刚写好的函数, 1800000条记录,从100001号开始
call insert_emp(100001,1800000);


$>**************************************************************
$> 向dept表中插入记录


delimiter $$
drop procedure insert_dept $$


create procedure insert_dept(in start int(10),in max_num int(10))
begin
declare i int default 0;
set autocommit = 0;
repeat
set i = i + 1;
insert into dept values ((start+i) ,rand_string(10),rand_string(8));
until i = max_num
end repeat;
commit;
end $$


delimiter ;
call insert_dept(100,10);


$>------------------------------------------------
$>向salgrade 表插入数据
delimiter $$
drop procedure insert_salgrade $$
create procedure insert_salgrade(in start int(10),in max_num int(10))
begin
declare i int default 0;
set autocommit = 0;
ALTER TABLE emp DISABLE KEYS;
repeat
set i = i + 1;
insert into salgrade values ((start+i) ,(start+i),(start+i));
until i = max_num
end repeat;
commit;
end $$
delimiter ;
$>测试不需要了
$>call insert_salgrade(10000,1000000);


游标设计


create procedure p3()


declare rcount int;
declare Cgid int;
declare Ccount int;
declare Cname varchar(10);
declare GetGoodsCursor cursor for select gid,count,name from goods;


open GetGoodsCursor;


select count(*) into rcount from goods;


while(rcount>0) do
fetch GetGoodsCursor into Cgid,Ccount,Cname;
select Cname,Ccount;
set rcount := rcount-1;
end while;


close GetGoodsCursor;


[Sales]> call p3()$
+-------+--------+
| Cname | Ccount |
+-------+--------+
| pc | 0 |
+-------+--------+


+-------+--------+
| Cname | Ccount |
+-------+--------+
| nb | 19 |
+-------+--------+


Query OK, 0 rows affected (0.00 sec)


以下的和上面的结果一样，注意是使用的标志位来处理。
create procedure p4()


declare rcount int;
declare Cgid int;
declare Cname varchar(10);
declare flag tinyint default 1;
declare Ccount int;
declare GetGoodsCursor cursor for select gid,count,name from goods;
declare continue handler for NOT FOUND set flag :=0;


open GetGoodsCursor;
fetch GetGoodsCursor into Cgid,Ccount,Cname;


while(flag) do
select Cname,Ccount;
fetch GetGoodsCursor into Cgid,Ccount,Cname;
end while;
close GetGoodsCursor;


修改密码，注意PASSWORD（“NEWPASSWORD”）是函数
UPDATE USER SET PASSWORD = PASSWORD('NEWPASSWORD') WHERE USER='WHO';
FLUSH PRIVILEGES;


授权


grant SomePrivileges on Database.Table to 'somebody'@'someHost' identified by 'Somebody's password';
flush privileges;


如何破解数据库的密码:


1:通过任务管理器或者服务管理,关掉mysqld(服务进程)


2:通过命令行+特殊参数开启mysqld


mysqld --skip-grant-tables --skip-networking


3:此时,mysqld服务进程已经打开,并且,不需要权限检查.


4:mysql -uroot 无密码登陆服务器.


5: 修改权限表


A: use mysql;


B:update user set Password = password('11111') where User = 'root';


C:flush privileges;


show status like 'uptime'; /×系统运行时间
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| Uptime | 5710 |
+---------------+-------+


[(none)]> show status like 'com_select'; /×select执行次数
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| Com_select | 1 |
+---------------+-------+
[(none)]> show status like 'com_update'; /×update执行次数
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| Com_update | 0 |
+---------------+-------+


show variables like 'long_query_time' /×查看慢查询时间的定义
-> ;
+-----------------+-----------+
| Variable_name | Value |
+-----------------+-----------+
| long_query_time | 10.000000 |
+-----------------+-----------+


set long_query_time = 1; /×设置慢查询时间


1, 查看MySQL服务器配置信息
Java代码 收藏代码
mysql> show variables;


2, 查看MySQL服务器运行的各种状态值
Java代码 收藏代码
mysql> show global status;


3, 慢查询
Java代码 收藏代码
mysql> show variables like '%slow%';
+------------------+-------+
| Variable_name | Value |
+------------------+-------+
| log_slow_queries | OFF |
| slow_launch_time | 2 |
+------------------+-------+
mysql> show global status like '%slow%';
+---------------------+-------+
| Variable_name | Value |
+---------------------+-------+
| Slow_launch_threads | 0 |
| Slow_queries | 279 |
+---------------------+-------+


配置中关闭了记录慢查询（最好是打开，方便优化），超过2秒即为慢查询，一共有279条慢查询


4, 连接数


Java代码 收藏代码
mysql> show variables like 'max_connections';
+-----------------+-------+
| Variable_name | Value |
+-----------------+-------+
| max_connections | 500 |
+-----------------+-------+


mysql> show global status like 'max_used_connections';
+----------------------+-------+
| Variable_name | Value |
+----------------------+-------+
| Max_used_connections | 498 |
+----------------------+-------+


设置的最大连接数是500，而响应的连接数是498


max_used_connections / max_connections * 100% = 99.6% （理想值 ≈ 85%）


5, key_buffer_size
key_buffer_size是对MyISAM表性能影响最大的一个参数, 不过数据库中多为Innodb


Java代码 收藏代码
mysql> show variables like 'key_buffer_size';
+-----------------+----------+
| Variable_name | Value |
+-----------------+----------+
| key_buffer_size | 67108864 |
+-----------------+----------+


mysql> show global status like 'key_read%';
+-------------------+----------+
| Variable_name | Value |
+-------------------+----------+
| Key_read_requests | 25629497 |
| Key_reads | 66071 |
+-------------------+----------+


一共有25629497个索引读取请求，有66071个请求在内存中没有找到直接从硬盘读取索引，计算索引未命中缓存的概率：
key_cache_miss_rate ＝ Key_reads / Key_read_requests * 100% =0.27%
需要适当加大key_buffer_size


Java代码 收藏代码
mysql> show global status like 'key_blocks_u%';
+-------------------+-------+
| Variable_name | Value |
+-------------------+-------+
| Key_blocks_unused | 10285 |
| Key_blocks_used | 47705 |
+-------------------+-------+


Key_blocks_unused表示未使用的缓存簇(blocks)数，Key_blocks_used表示曾经用到的最大的blocks数
Key_blocks_used / (Key_blocks_unused + Key_blocks_used) * 100% ≈ 18% （理想值 ≈ 80%）


6， 临时表


Java代码 收藏代码
mysql> show global status like 'created_tmp%';
+-------------------------+---------+
| Variable_name | Value |
+-------------------------+---------+
| Created_tmp_disk_tables | 4184337 |
| Created_tmp_files | 4124 |
| Created_tmp_tables | 4215028 |
+-------------------------+---------+


每次创建临时表，Created_tmp_tables增加，如果是在磁盘上创建临时表，Created_tmp_disk_tables也增加,Created_tmp_files表示MySQL服务创建的临时文件文件数：
Created_tmp_disk_tables / Created_tmp_tables * 100% ＝ 99% （理想值<= 25%）


Java代码 收藏代码
mysql> show variables where Variable_name in ('tmp_table_size', 'max_heap_table_size');
+---------------------+-----------+
| Variable_name | Value |
+---------------------+-----------+
| max_heap_table_size | 134217728 |
| tmp_table_size | 134217728 |
+---------------------+-----------+


需要增加tmp_table_size


7,open table 的情况
Java代码 收藏代码
mysql> show global status like 'open%tables%';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| Open_tables | 1024 |
| Opened_tables | 1465 |
+---------------+-------+


Open_tables 表示打开表的数量，Opened_tables表示打开过的表数量，如果Opened_tables数量过大，说明配置中 table_cache(5.1.3之后这个值叫做table_open_cache)值可能太小，我们查询一下服务器table_cache值
Java代码 收藏代码
mysql> show variables like 'table_cache';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| table_cache | 1024 |
+---------------+-------+


Open_tables / Opened_tables * 100% =69% 理想值 （>= 85%）
Open_tables / table_cache * 100% = 100% 理想值 (<= 95%)


8, 进程使用情况
Java代码 收藏代码
mysql> show global status like 'Thread%';
+-------------------+-------+
| Variable_name | Value |
+-------------------+-------+
| Threads_cached | 31 |
| Threads_connected | 239 |
| Threads_created | 2914 |
| Threads_running | 4 |
+-------------------+-------+


如果我们在MySQL服务器配置文件中设置了thread_cache_size，当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应 下一个客户而不是销毁（前提是缓存数未达上限）。Threads_created表示创建过的线程数，如果发现Threads_created值过大的 话，表明 MySQL服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中thread_cache_size值，查询服务器 thread_cache_size配置：
Java代码 收藏代码
mysql> show variables like 'thread_cache_size';
+-------------------+-------+
| Variable_name | Value |
+-------------------+-------+
| thread_cache_size | 32 |
+-------------------+-------+


9, 查询缓存(query cache)
Java代码 收藏代码
mysql> show global status like 'qcache%';
+-------------------------+----------+
| Variable_name | Value |
+-------------------------+----------+
| Qcache_free_blocks | 2226 |
| Qcache_free_memory | 10794944 |
| Qcache_hits | 5385458 |
| Qcache_inserts | 1806301 |
| Qcache_lowmem_prunes | 433101 |
| Qcache_not_cached | 4429464 |
| Qcache_queries_in_cache | 7168 |
| Qcache_total_blocks | 16820 |
+-------------------------+----------+


Qcache_free_blocks：缓存中相邻内存块的个数。数目大说明可能有碎片。FLUSH QUERY CACHE会对缓存中的碎片进行整理，从而得到一个空闲块。
Qcache_free_memory：缓存中的空闲内存。
Qcache_hits：每次查询在缓存中命中时就增大
Qcache_inserts：每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。
Qcache_lowmem_prunes：缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看；如果这 个数字在不断增长，就表示可能碎片非常严重，或者内存很少。（上面的 free_blocks和free_memory可以告诉您属于哪种情况）
Qcache_not_cached：不适合进行缓存的查询的数量，通常是由于这些查询不是 SELECT 语句或者用了now()之类的函数。
Qcache_queries_in_cache：当前缓存的查询（和响应）的数量。
Qcache_total_blocks：缓存中块的数量。


我们再查询一下服务器关于query_cache的配置：
Java代码 收藏代码
mysql> show variables like 'query_cache%';
+------------------------------+----------+
| Variable_name | Value |
+------------------------------+----------+
| query_cache_limit | 33554432 |
| query_cache_min_res_unit | 4096 |
| query_cache_size | 33554432 |
| query_cache_type | ON |
| query_cache_wlock_invalidate | OFF |
+------------------------------+----------+


各字段的解释：


query_cache_limit：超过此大小的查询将不缓存
query_cache_min_res_unit：缓存块的最小大小
query_cache_size：查询缓存大小
query_cache_type：缓存类型，决定缓存什么样的查询，示例中表示不缓存 select sql_no_cache 查询
query_cache_wlock_invalidate：当有其他客户端正在对MyISAM表进行写操作时，如果查询在query cache中，是否返回cache结果还是等写操作完成再读表获取结果。


query_cache_min_res_unit的配置是一柄”双刃剑”，默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费。


查询缓存碎片率 = Qcache_free_blocks / Qcache_total_blocks * 100%


如果查询缓存碎片率超过20%，可以用FLUSH QUERY CACHE整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话。


查询缓存利用率 = (query_cache_size – Qcache_free_memory) / query_cache_size * 100%


查询缓存利用率在25%以下的话说明query_cache_size设置的过大，可适当减小；查询缓存利用率在80％以上而且Qcache_lowmem_prunes > 50的话说明query_cache_size可能有点小，要不就是碎片太多。


查询缓存命中率 = (Qcache_hits – Qcache_inserts) / Qcache_hits * 100%


示例服务器 查询缓存碎片率 ＝ 20.46％，查询缓存利用率 ＝ 62.26％，查询缓存命中率 ＝ 1.94％，命中率很差，可能写操作比较频繁吧，而且可能有些碎片。


10,排序使用情况


Java代码 收藏代码
mysql> show global status like 'sort%';
+-------------------+----------+
| Variable_name | Value |
+-------------------+----------+
| Sort_merge_passes | 2136 |
| Sort_range | 81888 |
| Sort_rows | 35918141 |
| Sort_scan | 55269 |
+-------------------+----------+


Sort_merge_passes 包括两步。MySQL 首先会尝试在内存中做排序，使用的内存大小由系统变量 Sort_buffer_size 决定，如果它的大小不够把所有的记录都读到内存中，MySQL 就会把每次在内存中排序的结果存到临时文件中，等 MySQL 找到所有记录之后，再把临时文件中的记录做一次排序。这再次排序就会增加 Sort_merge_passes。实际上，MySQL 会用另一个临时文件来存再次排序的结果，所以通常会看到 Sort_merge_passes 增加的数值是建临时文件数的两倍。因为用到了临时文件，所以速度可能会比较慢，增加 Sort_buffer_size 会减少 Sort_merge_passes 和 创建临时文件的次数。但盲目的增加 Sort_buffer_size 并不一定能提高速度，见 How fast can you sort data with MySQL?（引自http://qroom.blogspot.com/2007/09/mysql-select-sort.html）


另外，增加read_rnd_buffer_size(3.2.3是record_rnd_buffer_size)的值对排序的操作也有一点的 好处，参见：http://www.mysqlperformanceblog.com/2007/07/24/what-exactly-is- read_rnd_buffer_size/


11.文件打开数(open_files)


Java代码 收藏代码
mysql> show global status like 'open_files';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| Open_files | 821 |
+---------------+-------+


mysql> show variables like 'open_files_limit';
+------------------+-------+
| Variable_name | Value |
+------------------+-------+
| open_files_limit | 65535 |
+------------------+-------+


比较合适的设置：Open_files / open_files_limit * 100% <= 75％


正常


12。 表锁情况
Java代码 收藏代码
mysql> show global status like 'table_locks%';
+-----------------------+---------+
| Variable_name | Value |
+-----------------------+---------+
| Table_locks_immediate | 4257944 |
| Table_locks_waited | 25182 |
+-----------------------+---------+


Table_locks_immediate 表示立即释放表锁数，Table_locks_waited表示需要等待的表锁数，如果 Table_locks_immediate / Table_locks_waited > 5000，最好采用InnoDB引擎，因为InnoDB是行锁而MyISAM是表锁，对于高并发写入的应用InnoDB效果会好些.


13. 表扫描情况
Java代码 收藏代码
mysql> show global status like 'handler_read%';
+-----------------------+-----------+
| Variable_name | Value |
+-----------------------+-----------+
| Handler_read_first | 108763 |
| Handler_read_key | 92813521 |
| Handler_read_next | 486650793 |
| Handler_read_prev | 688726 |
| Handler_read_rnd | 9321362 |
| Handler_read_rnd_next | 153086384 |
+-----------------------+-----------+


各字段解释参见http://hi.baidu.com/thinkinginlamp/blog/item/31690cd7c4bc5cdaa144df9c.html，调出服务器完成的查询请求次数：
Java代码 收藏代码
mysql> show global status like 'com_select';
+---------------+---------+
| Variable_name | Value |
+---------------+---------+
| Com_select | 2693147 |
+---------------+---------+


计算表扫描率：


表扫描率 ＝ Handler_read_rnd_next / Com_select


如果表扫描率超过4000，说明进行了太多表扫描，很有可能索引没有建好，增加read_buffer_size值会有一些好处，但最好不要超过8MB。


[mysql]> delimiter $ /*修改界定符号为$
[mysql]> select id from scores where id = 100001$
+--------+
| id |
+--------+
| 100001 |
| 100001 |
+--------+

[mysql]> drop index idx_name on some_table;                    
[mysql]> create index idx_name on data_table(field1,field2...);

[mysql]> show index from some_table\G; /×显示索引，\G表示使用如下的方式显示结果，很多命令都可以使用


*************************** 1. row ***************************
Table: scores
Non_unique: 1
Key_name: score_id_idx
Seq_in_index: 1
Column_name: id
Collation: A
Cardinality: 249496
Sub_part: NULL
Packed: NULL
Null: YES
Index_type: BTREE
Comment:
Index_comment:


方法一：


select `name` from mysql.proc where db = 'your_db_name' and `type` = 'PROCEDURE' //存储过程
select `name` from mysql.proc where db = 'your_db_name' and `type` = 'FUNCTION' //函数


方法二：


show rocedure status; //存储过程


show function status; //函数


查看存储过程或函数的创建代码


show create procedure proc_name;
show create function func_name;


查看视图


SELECT * from information_schema.VIEWS //视图


SELECT * from information_schema.TABLES //表


查看触发器


方法一：
语法：SHOW TRIGGERS [FROM db_name] [LIKE expr]
实例：SHOW TRIGGERS\G //触发器


方法二：
对INFORMATION_SCHEMA数据库中的TRIGGERS表查询
mysql>SELECT * FROM triggers T WHERE trigger_name=”mytrigger” \G


分页：


select * from tab limit 起始行，共几行


常用函数：


与oracle的比较


CHARSET(str) //返回字串字符集
CONCAT (string2 [,... ]) //连接字串
INSTR (string ,substring ) //返回substring首次在string中出现的位置,不存在返回0 同oracle
LCASE (string2 ) //转换成小写
LEFT (string2 ,length ) //从string2中的左边起取length个字符
LENGTH (string ) //string长度
LOAD_FILE (file_name ) //从文件读取内容
LOCATE (substring , string [,start_position ] ) 同INSTR,但可指定开始位置
LPAD (string2 ,length ,pad ) //重复用pad加在string开头,直到字串长度为length
LTRIM (string2 ) //去除前端空格
REPEAT (string2 ,count ) //重复count次
REPLACE (str ,search_str ,replace_str ) //在str中用replace_str替换search_str
RPAD (string2 ,length ,pad) //在str后用pad补充,直到长度为length
RTRIM (string2 ) //去除后端空格
STRCMP (string1 ,string2 ) //逐字符比较两字串大小,
SUBSTRING (str , position [,length ]) //从str的position开始,取length个字符, 同oracle
TRIM([[BOTH|LEADING|TRAILING] [padding] FROM]string2) //去除指定位置的指定字符
UCASE (string2 ) //转换成大写
RIGHT(string2,length) //取string2最后length个字符
SPACE(count) //生成count个空格


数学类


ABS (number2 ) //绝对值
BIN (decimal_number ) //十进制转二进制
CEILING (number2 ) //向上取整
CONV(number2,from_base,to_base) //进制转换
FLOOR (number2 ) //向下取整
FORMAT (number,decimal_places ) //保留小数位数
HEX (DecimalNumber ) //转十六进制
LEAST (number , number2 [,..]) //求最小值
MOD (numerator ,denominator ) //求余
POWER (number ,power ) //求指数
RAND([seed]) //随机数
ROUND (number [,decimals ]) //四舍五入,decimals为小数位数]
SIGN (number2 ) //返回符号,正负或0
SQRT(number2) //开平方


日期时间类


ADDTIME (date2 ,time_interval ) //将time_interval加到date2
CONVERT_TZ (datetime2 ,fromTZ ,toTZ ) //转换时区
CURRENT_DATE ( ) //当前日期
CURRENT_TIME ( ) //当前时间
CURRENT_TIMESTAMP ( ) //当前时间戳
DATE (datetime ) //返回datetime的日期部分
DATE_ADD (date2 , INTERVAL d_value d_type ) //在date2中加上日期或时间
DATE_FORMAT (datetime ,FormatCodes ) //使用formatcodes格式显示datetime
DATE_SUB (date2 , INTERVAL d_value d_type ) //在date2上减去一个时间
DATEDIFF (date1 ,date2 ) //两个日期差
DAY (date ) //返回日期的天
DAYNAME (date ) //英文星期
DAYOFWEEK (date ) //星期(1-7) ,1为星期天
DAYOFYEAR (date ) //一年中的第几天
EXTRACT (interval_name FROM date ) //从date中提取日期的指定部分
MAKEDATE (year ,day ) //给出年及年中的第几天,生成日期串
MAKETIME (hour ,minute ,second ) //生成时间串
MONTHNAME (date ) //英文月份名
NOW ( ) //当前时间
SEC_TO_TIME (seconds ) //秒数转成时间
STR_TO_DATE (string ,format ) //字串转成时间,以format格式显示 oracle:to_date
TIMEDIFF (datetime1 ,datetime2 ) //两个时间差
TIME_TO_SEC (time ) //时间转秒数
WEEK (date_time [,start_of_week ]) //第几周
YEAR (datetime ) //年份
DAYOFMONTH(datetime) //月的第几天
HOUR(datetime) //小时
LAST_DAY(date) //date的月的最后日期
MICROSECOND(datetime) //微秒
MONTH(datetime) //月
MINUTE(datetime) //分


附:可用在INTERVAL中的类型
DAY ,DAY_HOUR ,DAY_MINUTE ,DAY_SECOND ,HOUR ,HOUR_MINUTE ,HOUR_SECOND ,MINUTE ,MINUTE_SECOND,MONTH ,SECOND ,YEAR


12: 解决字符集问题:
默认建表一般用utf8, 而我们在windows下窗口是GBK的,
因此,需要声明字符集.
Set names gbk;


连接的两种方法：
select fd1,fd2 from tb1 as p inner/left/right join tb2 as q on p.fdx=q.fdx
select fd1,fd2 from tb1 as p exists(select fd3 from tb2 as q where p.fdx=q.fdx)
增: insert
Insert 3问:
1: 插入哪张表?
2: 插入哪几列?
3: 这几列分别插入什么值?


Insert into TableName
(列1,列2.... 列n)
Values
(值1,值2,....值n)


值 与 列,按顺序,一一对应


特殊: insert语句 允不允许不写列名
答: 允许.
如果没有声明列明,则默认插入所有列.
因此,值应该与全部列,按顺序一一对应.


Delete from 表名 where expr


Update 表名
Set
列1 = 新值 1,
列2 = 新值2,
列n = 新值n.....
Where expr


Select 列1, 列2, 列3,...列n
From 表名
Where expr;


区别: decimal比float精度更高, 适合存储货币等要求精确的数字


注意: char(M),varchar(M)限制的是字符,不是字节.
即 char(2) charset utf8, 能存2个utf8字符. 比如'中国'char与varchar型的选择原则:
1:空间利用效率, 四字成语表, char(4),
个人简介,微博140字, varchar(140)
2:速度
用户名: char


日期时间类型
Year 年(1字节) 95/1995, [1901-2155],
在insert时,可以简写年的后2位,但是不推荐这样.
[00-69] +2000
[70-99] + 1900,
即: 填2位,表示 1970 - 2069


Date 日期 1998-12-31
范围: 1000/01/01 ,9999/12/31


Time 时间 13:56:23
范围: -838:59:59 -->838:59:59


datetime 时期时间 1998-12-31 13:56:23
范围: 1000/01//01 00:00:00 ---> 9999:12:31 23:59:59


时间戳:
是1970-01-01 00:00:00 到当前的秒数.
一般存注册时间,商品发布时间等,并不是用datetime存储,而是用时间戳.
因为datetime虽然直观,但计算不便.


3:在查询时使用了函数,最大的一个坏处,
以 date_format(A)为例
则A列的索引将无法使用.


如果你针对某列作操作,而此次查询,又使用的此列的索引.
此时,速度将显著变慢.


例:
sname, email 两列
email加了索引


Select name,email from table where right(email,6)='qq.com';
将会导致此次查询中, email的索引并不会产生效果.


Create view 视图名 as select 语句;
而temptable是根据创建语句瞬间创建一张临时表,
然后查询视图的语句从该临时表查数据.
create algorethm=temptable view g2 as select goods_id,cat_id,goods_name,shop_price from goods where shop_price > 2000
查询视图的语句:
select * from g2 where shop_price < 3000;


1:告诉服务器,我给你发送的数据是什么编码的? character_set_client
2:告诉转换器,转换成什么编码? Character_set_connection
3:查询的结果用什么编码? Character_set_results


如果以上3者都为字符集N, 则可以简写为 set names N


推论: 什么时将会乱码?
1: client声明与事实不符
2:results与客户端页面不符的时候.


什么时间将会丢失数据?
Connetion和服务器的字符集比client小时.


常用的表的引擎
Myisam ,批量插入速度快, 不支持事务,锁表,所有的索引指向物理行位置，无分裂页面的劣势
Innodb, 批量插入相对较慢,支持事务,锁行.主索引是Cluster索引，其他索引指向主索引，有分裂页面的劣势


全文索引:目前5.5版本,myisam,innodb都已经支持


触发器:
能监视: 增,删,改
四要素:
监视地点
监视事件
触发时间
触发事件


创建触发器的语法
Create trigger triggerName
After/before insert/update/delete on 表名
For each row #这句话是固定的
Begin
Sql语句; # 一句或多句,insert/update/delete范围内
End;
如何在触发器引用行的值
对于insert而言, 新增的行 用new 来表示,
行中的每一列的值 ,用new.列名来表示.


对于 delete来说, 原本有一行,后来被删除,
想引用被删除的这一行,用old,来表示, old.列名,就可以引用被删行中的值.


对于update来说,
被修改的行,
修改前的数据 ,用 old来表示, old.列名引用被修改之前行中的值
修改后的数据,用new 来表示, new.列名引用被修改之后行中的值
触发器里after 和before的区别
After 是先完成数据的增,删,改再触发,
触发的语句晚于监视的增,删,改,无法影响前面的增删改动作.


Before是先完成触发,再增删改,
触发的语句先于监视的增,删,改发生,我们有机会判断,修改即将发生的操作.


备份的工具
Mysqldump可以导出
库
表
cl
例1: 导出mugua库下面的表
Mysqldump -u用户名 -p密码 库名 表1 表2 表3 > 地址/备份文件名称
导出的是建表语句及insert语句


例2:如何导出一个库下面的所有表?
Mysqldump -u用户名 -p密码 库名 > 地址/备份文件名称


例3: 如何导出以库为单位导出?
Mysqldump -u用户名 -p密码 -B 库1 库2 库3 > 地址/备份文件名称


例4: 如何导出所有库?
Mysqldump -u用户名 -p密码 -A > 地址/备份文件名称


恢复:
1:登陆到mysql命令行
对于库级的备份文件
Mysql> source 备份文件地址


对于表级的备份文件
Mysql > use 库名
Mysql> source 备份文件地址


2:不登陆到mysql命令行
针对库级的备份文件
Mysql -u用户名 -p密码 < 库级备份文件地址


针对表级的备份文件
Mysql -u用户名 -p密码 库名 < 表级备份文件地址


Alter table 表名 add index /unique/fulltext [索引名] (列名)
Alter table 表名 add primary key (列名) // 不要加索引名,因为主键只有一个


删除索引
删除非主键索引:Alter table 表名 drop index 索引名;
删除主键: alter table 表名 drop primary key


关于全文索引的用法
Match (全文索引名) against ('keyword');


关于全文索引的停止词
全文索引不针对非常频繁的词做索引,
如this, is, you, my等等.


全文索引:在mysql的默认情况下, 对于中文意义不大.
因为英文有空格,标点符号来拆成单词,进而对单词进行索引.
而对于中文,没有空格来隔开单词,mysql无法识别每个中文词.


存储过程: procedure
概念类似于函数,就是把一段代码封装起来,
当要执行这一段代码的时候,可以通过调用该存储过程来实现.
在封装的语句体里面,可以用if/else, case,while等控制结构.
可以进行sql编程.


查看现有的存储过程:
Show procedure status


删除存储过程
Drop procedure 存储过程的名字


调用存储过程
Call 存储过程名字(varvalue);


校对集: 指字符集的排序规则
一种字符集可以有一个或多个排序规则.
以Utf8为例, 我们默认使的utf8_general_ci 规则,也可以按二进制来排, utf8_bin


怎么样声明校对集?
Create table ()... Charset utf8 collate utf8_general_ci;


注意:声明的校对集必须是字符集合法的校对集.


查看一张表上所有索引
Show index from 表名


安装


准备环境


1、安装确保以下系统相关库文件


gcc gcc-c++ autoconf automake zlib* libxml* ncurses-devel libmcrypt* libtool*(libtool-ltdl-devel*)


$> yum –y install gcc gcc-c++ autoconf automake zlib* libxml* ncurses-devel libmcrypt* libtool* cmake


2、 建立mysql安装目录及数据存放目录


$> mkdir /usr/local/mysql


$> mkdir -p /data/mysql


3、 创建用户和用户组


$> groupadd mysql


$> useradd -g mysql mysql


4、 赋予数据存放目录权限


$> chown mysql.mysql –R /data/mysql


二、安装MySQL 5.5.35
1、 获取解压mysql-5.5.35.tar.gz
在mysql.com官网或国内镜像下载源码
$> wget http://mirrors.sohu.com/mysql/MySQL-5.5/mysql-5.5.35.tar.gz
$> tar zxvf mysql-5.5.35.tar.gz
$> cd mysql-5.5.35
2、 编译mysql-5.5.35
$> cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \
-DMYSQL_UNIX_ADDR=/tmp/mysqld.sock \
-DDEFAULT_CHARSET=utf8 \
-DDEFAULT_COLLATION=utf8_general_ci \
-DWITH_EXTRA_CHARSETS:STRING=utf8,gbk \
-DWITH_MYISAM_STORAGE_ENGINE=1 \
-DWITH_INNOBASE_STORAGE_ENGINE=1 \
-DWITH_MEMORY_STORAGE_ENGINE=1 \
-DWITH_READLINE=1 \
-DENABLED_LOCAL_INFILE=1 \
-DMYSQL_DATADIR=/data/mysql \
-DMYSQL_USER=mysql \
-DMYSQL_TCP_PORT=3306
$> make
$> make install
3、 复制配置文件
$> cp support-files/my-medium.cnf /etc/my.cnf
4、 初始化数据库
执行前需赋给scripts/mysql_install_db文件执行权限
$> chmod 755 scripts/mysql_install_db
$> scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql/ \
--datadir=/data/mysql/
注：basedir：mysql安装路径 datadir：数据库文件储存路径
5、 设置mysqld的开机启动
$> cp support-files/mysql.server /etc/init.d/mysql
$> chmod 755 /etc/init.d/mysql
$> chkconfig mysql on
6、 为MySQL配置环境变量
将mysql的bin目录加到PATH中，有利于以后管理和维护，在/etc/profile中加入myslq/bin，同时增加两个别名方便操作：
$> export PATH=/usr/local/mysql/bin:$PATH
$> alias mysql_start="mysqld_safe &"
$> alias mysql_stop="mysqladmin –u root -p shutdown"
7、 启动mysql服务
$> /etc/init.d/mysql start
启动完成之后用ps -ef |grep mysql 命令查看是否启动
8、 登陆mysql
$>mysql -uroot -p
Show processlist;
这个命令是显示当前所有连接的工作状态.
$>!/bin/bash
while true
do
mysql -uroot -e 'show processlist\G'|grep State:|uniq -c|sort -rn
echo '---'
sleep 1
Done
如果观察到以下状态,则需要注意
converting HEAP to MyISAM 查询结果太大时,把结果放在磁盘 (语句写的不好,取数据太多)
create tmp table 创建临时表(如group时储存中间结果,说明索引建的不好)
Copying to tmp table on disk 把内存临时表复制到磁盘 (索引不好,表字段选的不好)
locked 被其他查询锁住 (一般在使用事务时易发生,互联网应用不常发生)
logging slow query 记录慢查询


mysql 5.5 以后加了一个profile设置,可以观察到具体语句的执行步骤.


0:查看profile是否开启


> Show variables like ‘profiling’


+---------------+-------+


| Variable_name | Value |


| profiling | OFF |


1:> set profiling=on;


| profiling | On |


mysql> show profiles;


+----------+------------+----------------------------------------------------------+


| Query_ID | Duration | Query |


| 1 | 0.00034225 | select cat_id,avg(shop_price) from goods group by cat_id |


1 row in set (0.00 sec)


mysql> show profile for query 1;


+----------------------+----------+


| Status | Duration |


| starting | 0.000058 |


| checking permissions | 0.000008 |


...
...


| cleaning up | 0.000004 |


疑问; 如何定位到有问题的语句?


答:


1: 开启服务器慢查询


2: 了解临时表的使用规则


3: 经验


列选择原则:


1:字段类型优先级 int > date,time > enum,char>varchar > blob


列的特点分析:


整型: 定长,没有国家/地区之分,没有字符集的差异


time定长,运算快,节省空间. 考虑时区,写sql时不方便 where > ‘2005-10-12’;


enum: 能起来约束值的目的, 内部用整型来存储,但与char联查时,内部要经历串与值的转化


Char 定长, 考虑字符集和(排序)校对集


varchar, 不定长 要考虑字符集的转换与排序时的校对集,速度慢.


text/Blob 无法使用内存临时表


explain type性能排序 ALL(全表扫描)<index(索引扫描）<range<ref<eq_ref
通俗的说: all 扫描所有的数据行,相当于data_all index 扫描所有的索引节点,相当于index_all


range: 意思是查询时,能根据索引做范围的扫描


ref 意思是指 通过索引列,可以直接引用到某些数据行


eq_ref 是指,通过索引列,直接引用某1行数据


常见于连接查询中


const, system, null 这3个分别指查询优化到常量级别, 甚至不需要查找时间.


一般按照主键来查询时,易出现const,system


或者直接查询某个表达式,不经过表时, 出现NULL(效率极高）


extra:


index: 是指用到了索引覆盖,效率非常高


using where 是指光靠索引定位不了,还得where判断一下


using temporary 是指用上了临时表, group by 与order by 不同列时,或group by ,order by 别的表的列.


using filesort : 文件排序(文件可能在磁盘,也可能在内存), (?????


select sum(shop_price) from goods group by cat_id(???? 这句话,用到了临时表和文件排序


在ecshop商城表中,查询6号栏目的商品, (注,6号是一个大栏目)


最直观的: mysql> select goods_id,cat_id,goods_name from goods where cat_id in (select


cat_id from ecs_category where parent_id=6);


误区: 给我们的感觉是, 先查到内层的6号栏目的子栏目,如7,8,9,11


然后外层, cat_id in (7,8,9,11)


事实: 如下图, goods表全扫描, 并逐行与category表对照,看parent_id=6是否成立


原因: mysql的查询优化器,针对In型做优化,被改成了exists的执行效果.


当goods表越大时, 查询速度越慢.


改进: 用连接查询来代替子查询


explain select goods_id,g.cat_id,g.goods_name from goods as g


inner join (select cat_id from ecs_category where parent_id=6) as t


using(cat_id) \G


内层 select cat_id from ecs_category where parent_id=6 ; 用到Parent_id索引, 返回4行


+--------+


增量备份


mysql> SHOW BINARY LOGS; 显示二进制日志
mysql> SHOW MASTER STATUS; 显示当前二进制日志及POSITION


还原 shell> mysqlbinlog binlog.000002 binlog.000002 | mysql -u root -p


$> mysqlbinlog binlog.000001 > /tmp/statements.sql
$> mysqlbinlog binlog.000002 >> /tmp/statements.sql
$> mysql -u root -p -e "source /tmp/statements.sql"
###windows source
mysql >source d:\path\to\backup.sql;

$> mysqlbinlog --stop-datetime="2005-04-20 9:59:59" \
/var/log/mysql/bin.123456 | mysql -u root -p


$> mysqlbinlog --start-datetime="2005-04-20 10:01:00" \
/var/log/mysql/bin.123456 | mysql -u root -p


$> mysqlbinlog /var/log/mysql/bin.123456 > /tmp/mysql_restore.sql


$> mysqlbinlog --stop-position=368312 /var/log/mysql/bin.123456 \
| mysql -u root -p


$> mysqlbinlog --start-position=368315 /var/log/mysql/bin.123456 \
| mysql -u root -p


主从 1 开启主从 my.cnf server-id=x logbin=mysql-log(Master)/relay-log=mysql-relay logformat=mixed
2 privileges(master) grant replication salve replication client on smsrc to 'smone'@'smhost' identified by 'pwd';
3 start(salve) change master to master_host='$master',m_user='$user',m_p='pwd',m_log_file='logfile',m_log_pos=nn;
4 relative directive: start/stop/reset slave show master/salve status
Windows Mysql配置
# General and Slow logging.
log-output=FILE
general-log=1
general_log_file="your-app-WEB1.log"
slow-query-log=1
slow_query_log_file="your-app-WEB1-slow.log"
long_query_time=10


如 果我们在MySQL服务器配置文件中设置了thread_cache_size，当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应 下一个客户而不是销毁（前提是缓存数未达上限）。Threads_created表示创建过的线程数，如果发现Threads_created值过大的 话，表明 MySQL服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中thread_cache_size值，查询服务器 thread_cache_size配置：
Java代码 收藏代码
mysql> show variables like 'thread_cache_size';
+-------------------+-------+
| Variable_name | Value |
+-------------------+-------+
| thread_cache_size | 32 |
+-------------------+-------+


Qcache_free_blocks：缓存中相邻内存块的个数。数目大说明可能有碎片。FLUSH QUERY CACHE会对缓存中的碎片进行整理，从而得到一个空闲块。
Qcache_free_memory：缓存中的空闲内存。
Qcache_hits：每次查询在缓存中命中时就增大
Qcache_inserts：每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。
Qcache_lowmem_prunes： 缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看；如果这 个数字在不断增长，就表示可能碎片非常严重，或者内存很少。（上面的 free_blocks和free_memory可以告诉您属于哪种情况）
Qcache_not_cached：不适合进行缓存的查询的数量，通常是由于这些查询不是 SELECT 语句或者用了now()之类的函数。
Qcache_queries_in_cache：当前缓存的查询（和响应）的数量。
Qcache_total_blocks：缓存中块的数量。


另 外，增加read_rnd_buffer_size(3.2.3是record_rnd_buffer_size)的值对排序的操作也有一点的 好处，参见：http://www.mysqlperformanceblog.com/2007/07/24/what-exactly-is- read_rnd_buffer_size/


主从 1 开启主从 my.cnf server-id=x logbin=mysql-log(Master)/relay-log=mysql-relay logformat=mixed
2 privileges(master) grant replication salve replication client on smsrc to 'smone'@'smhost' identified by 'pwd';
3 start(salve) change master to master_host='$master',m_user='$user',m_p='pwd',m_log_file='logfile',m_log_pos=nn;
4 relative directive: start/stop/reset slave show master/salve status

GUID WITH REPLICATION UUID GTID
change master to
master_host='172.16.0.2',
master_user='repli',
master_password='replicat',
master_auto_position=1;

GRANT  REPLICATION SLAVE ON *.* TO 'repli'@'172.16.0.%' IDENTIFIED  BY 'replicat';


【mysql备份权限】
mysql>
CREATE USER 'backup-User'@'127.0.0.1' IDENTIFIED BY 'Bak-pwd';
GRANT RELOAD ON *.* TO 'backup-User'@'127.0.0.1';                                                                                                                                                    
GRANT CREATE, INSERT, DROP, UPDATE ON mysql.backup_progress TO 'backup-User'@'127.0.0.1';
GRANT CREATE, INSERT, SELECT, DROP, UPDATE ON mysql.backup_history TO 'backup-User'@'127.0.0.1';
GRANT REPLICATION CLIENT ON *.* TO 'backup-User'@'127.0.0.1';
GRANT SUPER ON *.* TO 'backup-User'@'127.0.0.1';
GRANT EVENT ON *.* TO 'backup-User'@'127.0.0.1';
GRANT PROCESS ON *.* TO 'backup-User'@'127.0.0.1';
GRANT LOCK TABLES, SELECT, CREATE, ALTER ON *.* TO 'backup-User'@'127.0.0.1';
GRANT CREATE, INSERT, DROP, UPDATE ON mysql.backup_sbt_history TO 'backup-User'@'127.0.0.1';
grant event on *.* to  'backup-User'@'127.0.0.1';
flush privileges;


###script backup
#!/bin/bash
export PATH=/usr/local/mysql/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
optDate=$(date +%Y%m%d-%H%M)
bakPath="/data/backup/"
scriptErrorLog="/var/log/scriptErrorLog"
operationVM=$(hostname)
bakPwd="Bak-pwd"
bakUser="backup-User"
bakHost="127.0.0.1"
lsyncPath="/data/lsyncd"


###0 delete old sql and create work directory
            ls $bakPath || mkdir -p $bakPath
            ls $lsyncPath || mkdir -p $lsyncPath

            rm -f "$bakPath"*.sql

####1 get dbs need backup
if ! dbs=$(mysql -e 'show databases;' -u"$bakUser" -p"$bakPwd" -h"$bakHost" \
            |grep -Ev 'Database|information_schema|performance_schema|sys')

then
            echo "WRONG $0 ON $operationVM" >>$scriptErrorLog
fi

#####2 bakup dbs in seperately files
for db in $dbs;do
      if !  mysqldump -u"$bakUser" -h"$bakHost" -p"$bakPwd" --databases "$db" \
       --set-gtid-purged=OFF --hex-blob --triggers --routines >"$bakPath""$db"-"$optDate".sql
      then
            echo "WRONG $0 ON $operationVM on dump $db" >>$scriptErrorLog
      fi
done

#####3 tar file and transfer to lsync path
if ! tar zcPf "$lsyncPath"/"$operationVM"-"$optDate".tar.gz "$bakPath"*.sql
then
            echo "WRONG $0 ON $operationVM" >>$scriptErrorLog
fi


######End mysql.memo #######
######Endmemoof mysql.memo #######
